{
    $Id: system.fpd,v 1.1 2004/11/22 22:48:10 michael Exp $
    This file is part of the Free Pascal Run time library.
    Copyright (c) 1999-2000 by the Free Pascal development team

    This File contains extra, phony declarations used in fpdoc.

    See the File COPYING.FPC, included in this distribution,
    for details about the copyright.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 **********************************************************************}

Type 
   Byte    = 0..255;
   Char    = #0..#255;
   Longint = -2147483648..2147483647;
   Longword= 0..4294967295;
   Int64   = -9223372036854775808..9223372036854775807;
   QWord   = 0..18446744073709551615;
   Shortint= -128 .. 127;
   Smallint= -32768 .. 32767;
   Word    = 0 .. 65535;
   WideChar= #$0000..#$FFFF;
   UnicodeString = UnicodeString;
   WideString = WideString;

Function Addr (X : TAnytype) : Pointer;
Procedure Assert(Expr : Boolean); 
Procedure Assert(Expr : Boolean; const Msg : string);
Function Assigned (P : Pointer) : Boolean;
Procedure Break;
Function Concat (Const S1,S2,S3,Sn  : String) : String;
Procedure Continue;
Procedure Dec(Var X : TOrdinal);
Procedure Dec(Var X : TOrdinal; Decrement : TOrdinal);
Procedure Dispose (P : Pointer);
Procedure Dispose (P : TypedPointer; Des : TProcedure);
Procedure Exclude (Var S : TSetType; E : TSetElement);
Procedure Exit(Const X : TAnyType);
Procedure Exit;
Function High (Arg: TypeOrVariable) : TOrdinal;
Procedure Inc (Var X : TOrdinal);
Procedure Inc (Var X : TOrdinal; Increment : TOrdinal);
Procedure Include (Var S : TSetType; E : TSetElement);
Function Low (Arg: TypeOrVariable) : TOrdinal;
Procedure New (Var P : Pointer);
Procedure New (Var P : Pointer; Cons : TProcedure);
Function Ofs (Var X) : Longint;
Function Ord (X : TOrdinal) : Longint;
Function Pred (X : TOrdinal) : TOrdinal;
Procedure Read (Var F : Text; Args : Arguments);
Procedure ReadLn (Var F : Text; Args : Arguments);
Procedure Read (Args : Arguments);
Procedure ReadLn (Args : Arguments);
Function Seg (Var X) : Longint;
Function SizeOf (X : TAnyType) : Longint;
Procedure Str (Var X : TNumericType; Var S : String);
Function Succ (X : TOrdinal) : TOrdinal;
Procedure Val (const S : string;Var V;var Code : word);
Procedure Write (Args : Arguments);
Procedure Writeln (Args : Arguments);
Procedure Write (Var F : Text; Args : Arguments);
Procedure WriteLn (Var F : Text; Args : Arguments);
Function Copy(S : AStringType; Index,Count : Integer) : String;
Function Copy(A : DynArrayType; Index,Count : Integer) : DynArray;
Procedure SetLength(Var S : AStringType; Len : Integer);
Procedure SetLength(Var A : DynArrayType; Len : Integer);
Function Length(S : AStringType) : Integer;
Function Length(A : DynArrayType) : Integer;
Function Power(Base:double;expon:double):double;
Function Power(Base:Longint;expon:Longint):Longint;
Procedure WriteStr(Out S : String; Args : Arguments);
Procedure ReadStr(Const S : String; Args : Arguments);
Procedure Pack(Const A : UnpackedArrayType; StartIndex : TIndexType; Out Z : PackedArrayType);
Procedure UnPack(Const Z : PackedArrayType; Out A : UnpackedArrayType; StartIndex : TIndexType);
Function Slice(Const A : ArrayType; ACount : Integer) : ArrayType2;
Function TypeInfo(Const T : AnyType) : Pointer;
Procedure Fail;
Function TypeOf(T : TObjectType) : Pointer;
Procedure Initialize(Var T : TAnyType; ACount : Integer = 1);
Procedure Finalize(Var T : TAnyType; ACount : Integer = 1);
Function Default(Const T : AnyType) : AnyType;
 
{$IFNDEF GO32V2}
Var
  mem  : array[0..$7fffffff-1] of byte;
  memw : array[0..($7fffffff div sizeof(word))-1] of word;
  meml : array[0..($7fffffff div sizeof(longint))-1] of longint;
{$ENDIF}
