unit G2OpenGL;
{$include Gen2MP.inc}
{$ifdef G2Target_OSX}
  {$define GL_STATIC}
{$endif}
interface

uses
  {$if defined(G2Target_Windows)}
  Windows,
  {$elseif defined(G2Target_Linux)}
  X, XLib, XUtil,
  {$elseif defined(G2Target_OSX)}
  MacOSAll,
  {$endif}
  {$if defined(cpui386) or defined(cpux86_64)}
  Math,
  {$endif}
  G2Utils;

{$MACRO ON}
{$ifdef G2Target_Windows}
  {$define libdecl := stdcall}
{$else}
  {$define libdecl := cdecl}
{$endif}

const
{$if defined(G2Target_Windows)}
  LibGL = 'opengl32.dll';
{$elseif defined(G2Target_Linux)}
  LibGL = 'libGL.so.1';
{$elseif defined(G2Target_OSX)}
  LibGL = 'System/Library/Frameworks/OpenGL.framework/Libraries/libGL.dylib';
  //LibAGL = 'System/Library/Frameworks/AGL.framework/AGL';
{$endif}

type
  TGLenum = LongWord;
  TGLboolean = Boolean;
  TGLbitfield = LongWord;
  TGLbyte = ShortInt;
  TGLshort = SmallInt;
  TGLint = Integer;
  TGLuint = LongWord;
  TGLsizei = Integer;
  TGLubyte = Byte;
  TGLushort = Word;
  TGLfloat = Single;
  TGLclampf = Single;
  TGLdouble = Double;
  TGLclampd = Double;
  TGLvoid = Pointer;
  TGLint64 = Int64;

  GLenum = TGLenum;
  GLboolean = TGLboolean;
  GLbitfield = TGLbitfield;
  GLbyte = TGLbyte;
  GLshort = TGLshort;
  GLint = TGLint;
  GLuint = TGLuint;
  GLsizei = TGLsizei;
  GLubyte = TGLubyte;
  GLushort = TGLushort;
  GLfloat = TGLfloat;
  GLclampf = TGLclampf;
  GLdouble = TGLdouble;
  GLclampd = TGLclampd;
  GLvoid = TGLvoid;
  GLint64 = TGLint64;

  PGLBoolean = ^TGLboolean;
  PGLByte = ^TGLbyte;
  PGLShort = ^TGLshort;
  PGLInt = ^TGLint;
  PGLSizei = ^TGLsizei;
  PGLubyte = ^TGLubyte;
  PGLushort = ^TGLushort;
  PGLuint = ^TGLuint;
  PGLclampf = ^TGLclampf;
  PGLfloat = ^TGLfloat;
  PGLdouble = ^TGLdouble;
  PGLclampd = ^TGLclampd;
  PGLenum = ^TGLenum;
  PGLvoid = Pointer;
  PGLint64 = ^TGLint64;

{$if defined(G2Target_Windows)}
const
  WGL_RGBA_FLOAT_MODE = $8820;
  WGL_CLAMP_VERTEX_COLOR = $891A;
  WGL_CLAMP_FRAGMENT_COLOR = $891B;
  WGL_CLAMP_READ_COLOR = $891C;
  WGL_FIXED_ONLY = $891D;

  WGL_DRAW_TO_PBUFFER = $202D;
  WGL_MAX_PBUFFER_PIXELS = $202E;
  WGL_MAX_PBUFFER_WIDTH = $202F;
  WGL_MAX_PBUFFER_HEIGHT = $2030;
  WGL_PBUFFER_LARGEST = $2033;
  WGL_PBUFFER_WIDTH = $2034;
  WGL_PBUFFER_HEIGHT = $2035;
  WGL_PBUFFER_LOST = $2036;

  WGL_NUMBER_PIXEL_FORMATS = $2000;
  WGL_DRAW_TO_WINDOW = $2001;
  WGL_DRAW_TO_BITMAP = $2002;
  WGL_ACCELERATION = $2003;
  WGL_NEED_PALETTE = $2004;
  WGL_NEED_SYSTEM_PALETTE = $2005;
  WGL_SWAP_LAYER_BUFFERS = $2006;
  WGL_SWAP_METHOD = $2007;
  WGL_NUMBER_OVERLAYS = $2008;
  WGL_NUMBER_UNDERLAYS = $2009;
  WGL_TRANSPARENT = $200A;
  WGL_TRANSPARENT_RED_VALUE = $2037;
  WGL_TRANSPARENT_GREEN_VALUE = $2038;
  WGL_TRANSPARENT_BLUE_VALUE = $2039;
  WGL_TRANSPARENT_ALPHA_VALUE = $203A;
  WGL_TRANSPARENT_INDEX_VALUE = $203B;
  WGL_SHARE_DEPTH = $200C;
  WGL_SHARE_STENCIL = $200D;
  WGL_SHARE_ACCUM = $200E;
  WGL_SUPPORT_GDI = $200F;
  WGL_SUPPORT_OPENGL = $2010;
  WGL_DOUBLE_BUFFER = $2011;
  WGL_STEREO = $2012;
  WGL_PIXEL_TYPE = $2013;
  WGL_COLOR_BITS = $2014;
  WGL_RED_BITS = $2015;
  WGL_RED_SHIFT = $2016;
  WGL_GREEN_BITS = $2017;
  WGL_GREEN_SHIFT = $2018;
  WGL_BLUE_BITS = $2019;
  WGL_BLUE_SHIFT = $201A;
  WGL_ALPHA_BITS = $201B;
  WGL_ALPHA_SHIFT = $201C;
  WGL_ACCUM_BITS = $201D;
  WGL_ACCUM_RED_BITS = $201E;
  WGL_ACCUM_GREEN_BITS = $201F;
  WGL_ACCUM_BLUE_BITS = $2020;
  WGL_ACCUM_ALPHA_BITS = $2021;
  WGL_DEPTH_BITS = $2022;
  WGL_STENCIL_BITS = $2023;
  WGL_AUX_BUFFERS = $2024;
  WGL_NO_ACCELERATION = $2025;
  WGL_GENERIC_ACCELERATION = $2026;
  WGL_FULL_ACCELERATION = $2027;
  WGL_SWAP_EXCHANGE = $2028;
  WGL_SWAP_COPY = $2029;
  WGL_SWAP_UNDEFINED = $202A;
  WGL_TYPE_RGBA = $202B;
  WGL_TYPE_COLORINDEX = $202C;

  WGL_BIND_TO_TEXTURE_RGB = $2070;
  WGL_BIND_TO_TEXTURE_RGBA = $2071;
  WGL_TEXTURE_FORMAT = $2072;
  WGL_TEXTURE_TARGET = $2073;
  WGL_MIPMAP_TEXTURE = $2074;
  WGL_TEXTURE_RGB = $2075;
  WGL_TEXTURE_RGBA = $2076;
  WGL_NO_TEXTURE = $2077;
  WGL_TEXTURE_CUBE_MAP = $2078;
  WGL_TEXTURE_1D = $2079;
  WGL_TEXTURE_2D = $207A;
  WGL_MIPMAP_LEVEL = $207B;
  WGL_CUBE_MAP_FACE = $207C;
  WGL_TEXTURE_CUBE_MAP_POSITIVE_X = $207D;
  WGL_TEXTURE_CUBE_MAP_NEGATIVE_X = $207E;
  WGL_TEXTURE_CUBE_MAP_POSITIVE_Y = $207F;
  WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $2080;
  WGL_TEXTURE_CUBE_MAP_POSITIVE_Z = $2081;
  WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $2082;
  WGL_FRONT_LEFT = $2083;
  WGL_FRONT_RIGHT = $2084;
  WGL_BACK_LEFT = $2085;
  WGL_BACK_RIGHT = $2086;
  WGL_AUX0 = $2087;
  WGL_AUX1 = $2088;
  WGL_AUX2 = $2089;
  WGL_AUX3 = $208A;
  WGL_AUX4 = $208B;
  WGL_AUX5 = $208C;
  WGL_AUX6 = $208D;
  WGL_AUX7 = $208E;
  WGL_AUX8 = $208F;
  WGL_AUX9 = $2090;

type
  HPBuffer = THandle;

  function wglGetProcAddress(proc: PAnsiChar): Pointer; stdcall; external LibGL;

var
  wglChoosePixelFormat: function (hdc: HDC; const piAttribIList: PGLint; const pfAttribFList: PGLfloat; nMaxFormats: TGLuint; piFormats: PGLint; nNumFormats: PGLuint): Boolean; stdcall;
  wglGetPixelFormatAttribiv: function (hdc: HDC; iPixelFormat: TGLint; iLayerPlane: TGLint; nAttributes: TGLuint; const piAttributes: PGLint; piValues: PGLint): Boolean; stdcall;
  wglGetPixelFormatAttribfv: function (hdc: HDC; iPixelFormat: TGLint; iLayerPlane: TGLint; nAttributes: TGLuint; const piAttributes: PGLint; pfValues: PGLfloat): Boolean; stdcall;

  wglCreatePbuffer: function (hDC: HDC; iPixelFormat: TGLint; iWidth: TGLint; iHeight: TGLint; const piAttribList: PGLint): HPBuffer; stdcall;
  wglGetPbufferDC: function (hPbuffer: HPBuffer): HDC; stdcall;
  wglReleasePbufferDC: function (hPbuffer: HPBuffer; hDC: HDC): TGLint; stdcall;
  wglDestroyPbuffer: function (hPbuffer: HPBuffer): Boolean; stdcall;
  wglQueryPbuffer: function (hPbuffer: HPBuffer; iAttribute: TGLint; piValue: PGLint): Boolean; stdcall;

  wglBindTexImage: function(hPbuffer: HPBuffer; iBuffer: TGLint): Boolean; stdcall;
  wglReleaseTexImage: function(hPbuffer: HPBuffer; iBuffer: TGLint): Boolean; stdcall;
  wglSetPbufferAttrib: function(hPbuffer: HPBuffer; const piAttribList: PGLint): Boolean; stdcall;

  wglSwapInterval: function(interval: TGLint): Boolean; stdcall;
  wglGetSwapInterval: function(): TGLint; stdcall;

{$elseif defined(G2Target_Linux)}
const
  GLX_USE_GL = 1;
  GLX_BUFFER_SIZE = 2;
  GLX_LEVEL = 3;
  GLX_RGBA = 4;
  GLX_DOUBLEBUFFER = 5;
  GLX_STEREO = 6;
  GLX_AUX_BUFFERS = 7;
  GLX_RED_SIZE = 8;
  GLX_GREEN_SIZE = 9;
  GLX_BLUE_SIZE = 10;
  GLX_ALPHA_SIZE = 11;
  GLX_DEPTH_SIZE = 12;
  GLX_STENCIL_SIZE = 13;
  GLX_ACCUM_RED_SIZE = 14;
  GLX_ACCUM_GREEN_SIZE = 15;
  GLX_ACCUM_BLUE_SIZE = 16;
  GLX_ACCUM_ALPHA_SIZE = 17;

  GLX_X_VISUAL_TYPE_EXT = $22;
  GLX_TRANSPARENT_TYPE_EXT = $23;
  GLX_TRANSPARENT_INDEX_VALUE_EXT = $24;
  GLX_TRANSPARENT_RED_VALUE_EXT = $25;
  GLX_TRANSPARENT_GREEN_VALUE_EXT = $26;
  GLX_TRANSPARENT_BLUE_VALUE_EXT = $27;
  GLX_TRANSPARENT_ALPHA_VALUE_EXT = $28;

  GLX_BAD_SCREEN = 1;
  GLX_BAD_ATTRIBUTE = 2;
  GLX_NO_EXTENSION = 3;
  GLX_BAD_VISUAL = 4;
  GLX_BAD_CONTEXT = 5;
  GLX_BAD_VALUE = 6;
  GLX_BAD_ENUM = 7;

  GLX_VENDOR = 1;
  GLX_VERSION = 2;
  GLX_EXTENSIONS = 3;

  GLX_RGBA_BIT = 1;
  GLX_PBUFFER_BIT = 4;

  GLX_TRUE_COLOR_EXT = $8002;
  GLX_DIRECT_COLOR_EXT = $8003;
  GLX_PSEUDO_COLOR_EXT = $8004;
  GLX_STATIC_COLOR_EXT = $8005;
  GLX_GRAY_SCALE_EXT = $8006;
  GLX_STATIC_GRAY_EXT = $8007;
  GLX_NONE_EXT = $8000;
  GLX_TRANSPARENT_RGB_EXT = $8008;
  GLX_TRANSPARENT_INDEX_EXT = $8009;

  GLX_DRAWABLE_TYPE = $8010;
  GLX_RENDER_TYPE = $8011;

  GLX_PBUFFER_HEIGHT = $8040;
  GLX_PBUFFER_WIDTH = $8041;
  GLX_PRESERVED_CONTENTS = $801B;
  GLX_LARGEST_PBUFFER = $801C;

type
  XPixmap = TXID;
  XFont = TXID;
  XColormap = TXID;

  GLXContext = Pointer;
  GLXFBConfig = Pointer;
  GLXPBuffer = TXID;
  GLXPixmap = TXID;
  GLXDrawable = TXID;
  GLXContextID = TXID;

  TXPixmap = XPixmap;
  TXFont = XFont;
  TXColormap = XColormap;

  TGLXContext = GLXContext;
  TGLXFBConfig = GLXFBConfig;
  TGLXPBuffer = GLXPBuffer;
  TGLXPixmap = GLXPixmap;
  TGLXDrawable = GLXDrawable;
  TGLXContextID = GLXContextID;

function glXChooseVisual(dpy: PDisplay; screen: Integer; attribList: PInteger): PXVisualInfo; cdecl; external LibGL;
function glXCreateContext(dpy: PDisplay; vis: PXVisualInfo; shareList: GLXContext; direct: Boolean): GLXContext; cdecl; external LibGL;
procedure glXDestroyContext(dpy: PDisplay; ctx: GLXContext); cdecl; external LibGL;
function glXMakeCurrent(dpy: PDisplay; drawable: GLXDrawable; ctx: GLXContext): Boolean; cdecl; external LibGL;
procedure glXCopyContext(dpy: PDisplay; src, dst: GLXContext; mask: LongWord); cdecl; external LibGL;
procedure glXSwapBuffers(dpy: PDisplay; drawable: GLXDrawable); cdecl; external LibGL;
function glXCreateGLXPixmap(dpy: PDisplay; visual: PXVisualInfo; pixmap: XPixmap): GLXPixmap; cdecl; external LibGL;
procedure glXDestroyGLXPixmap(dpy: PDisplay; pixmap: GLXPixmap); cdecl; external LibGL;
function glXQueryExtension(dpy: PDisplay; var errorb, event: Integer): Boolean; cdecl; external LibGL;
function glXQueryVersion(dpy: PDisplay; var maj, min: Integer): Boolean; cdecl; external LibGL;
function glXIsDirect(dpy: PDisplay; ctx: GLXContext): Boolean; cdecl; external LibGL;
function glXGetConfig(dpy: PDisplay; visual: PXVisualInfo; attrib: Integer; var value: Integer): Integer; cdecl; external LibGL;
function glXGetCurrentContext: GLXContext; cdecl; external LibGL;
function glXGetCurrentDrawable: GLXDrawable; cdecl; external LibGL;
procedure glXWaitGL cdecl; external LibGL;
procedure glXWaitX cdecl; external LibGL;
procedure glXUseXFont(font: XFont; first, count, list: Integer); cdecl; external LibGL;

function glXQueryExtensionsString(dpy: PDisplay; screen: Integer): PChar; cdecl; external LibGL;
function glXQueryServerString(dpy: PDisplay; screen, name: Integer): PChar; cdecl; external LibGL;
function glXGetClientString(dpy: PDisplay; name: Integer): PChar; cdecl; external LibGL;

function glXCreateGLXPixmapMESA(dpy: PDisplay; visual: PXVisualInfo; pixmap: XPixmap; cmap: XColormap): GLXPixmap; cdecl; external LibGL;
function glXReleaseBufferMESA(dpy: PDisplay; d: GLXDrawable): Boolean; cdecl; external LibGL;
procedure glXCopySubBufferMESA(dpy: PDisplay; drawbale: GLXDrawable; x, y, width, height: Integer); cdecl; external LibGL;
function glXGetVideoSyncSGI(var counter: LongWord): Integer; cdecl; external LibGL;
function glXWaitVideoSyncSGI(divisor, remainder: Integer; var count: LongWord): Integer; cdecl; external LibGL;

var
  glXGetVisualFromFBConfig: function(dpy: PDisplay; consfig: Integer): PXVisualInfo; cdecl;
  glXChooseFBConfig: function(dpy: PDisplay; screen: Integer; attribList: PInteger; nitems: PInteger): GLXFBConfig; cdecl;
  glXCreatePBuffer: function(dpy: PDisplay; config: Integer; attribList: PInteger): GLXPbuffer; cdecl;
  glXDestroyPBuffer: procedure(dpy: PDisplay; pbuf: GLXPBuffer); cdecl;
  glXGetVisualFromFBConfigSGIX: function(dpy: PDisplay; consfig: Integer): PXVisualInfo; cdecl;
  glXChooseFBConfigSGIX: function(dpy: PDisplay; screen: Integer; attribList: PInteger; nitems: PInteger): GLXFBConfig; cdecl;
  glXCreateGLXPBufferSGIX: function(dpy: PDisplay; config: Integer; width, height: LongWord; attribList: PInteger): GLXPbuffer; cdecl;
  glXDestroyGLXPBufferSGIX: procedure(dpy: PDisplay; pbuf: GLXPBuffer); cdecl;

{$elseif defined(G2Target_OSX)}
const
  AGL_NONE = 0;
  AGL_ALL_RENDERERS = 1;
  AGL_BUFFER_SIZE = 2;
  AGL_LEVEL = 3;
  AGL_RGBA = 4;
  AGL_DOUBLEBUFFER = 5;
  AGL_STEREO = 6;
  AGL_AUX_BUFFERS = 7;
  AGL_RED_SIZE = 8;
  AGL_GREEN_SIZE = 9;
  AGL_BLUE_SIZE = 10;
  AGL_ALPHA_SIZE = 11;
  AGL_DEPTH_SIZE = 12;
  AGL_STENCIL_SIZE = 13;
  AGL_ACCUM_RED_SIZE = 14;
  AGL_ACCUM_GREEN_SIZE = 15;
  AGL_ACCUM_BLUE_SIZE = 16;
  AGL_ACCUM_ALPHA_SIZE = 17;

  AGL_PIXEL_SIZE = 50;
  AGL_MINIMUM_POLICY = 51;
  AGL_MAXIMUM_POLICY = 52;
  AGL_OFFSCREEN = 53;
  AGL_FULLSCREEN = 54;
  AGL_SAMPLE_BUFFERS = 55;
  AGL_SAMPLES = 56;
  AGL_AUX_DEPTH_STENCIL = 57;
  AGL_COLOR_FLOAT = 58;
  AGL_MULTISAMPLE =  59;
  AGL_SUPERSAMPLE = 60;
  AGL_SAMPLE_ALPHA = 61;

  AGL_RENDERER_ID = 70;
  AGL_SINGLE_RENDERER = 71;
  AGL_NO_RECOVERY = 72;
  AGL_ACCELERATED = 73;
  AGL_CLOSEST_POLICY = 74;
  AGL_ROBUST = 75;
  AGL_BACKING_STORE = 76;
  AGL_MP_SAFE = 78;

  AGL_WINDOW = 80;
  AGL_MULTISCREEN = 81;
  AGL_VIRTUAL_SCREEN = 82;
  AGL_COMPLIANT = 83;
  AGL_DISPLAY_MASK = 84;

  AGL_PBUFFER = 90;
  AGL_REMOTE_PBUFFER = 91;

  AGL_ALLOW_OFFLINE_RENDERERS = 96;

  AGL_BUFFER_MODES = 100;
  AGL_MIN_LEVEL = 101;
  AGL_MAX_LEVEL = 102;
  AGL_COLOR_MODES = 103;
  AGL_ACCUM_MODES = 104;
  AGL_DEPTH_MODES = 105;
  AGL_STENCIL_MODES = 106;
  AGL_MAX_AUX_BUFFERS = 107;
  AGL_VIDEO_MEMORY = 120;
  AGL_TEXTURE_MEMORY = 121;
  AGL_RENDERER_COUNT = 128;

  AGL_SWAP_RECT = 200;
  AGL_BUFFER_RECT = 202;
  AGL_SWAP_LIMIT = 203;
  AGL_COLORMAP_TRACKING = 210;
  AGL_COLORMAP_ENTRY = 212;
  AGL_RASTERIZATION = 220;
  AGL_SWAP_INTERVAL = 222;
  AGL_STATE_VALIDATION = 230;
  AGL_BUFFER_NAME = 231;
  AGL_ORDER_CONTEXT_TO_FRONT = 232;
  AGL_CONTEXT_SURFACE_ID = 233;
  AGL_CONTEXT_DISPLAY_ID = 234;
  AGL_SURFACE_ORDER = 235;
  AGL_SURFACE_OPACITY = 236;

  AGL_CLIP_REGION = 254;

  AGL_FS_CAPTURE_SINGLE = 255;
  AGL_SURFACE_BACKING_SIZE = 304;
  AGL_ENABLE_SURFACE_BACKING_SIZE = 305;
  AGL_SURFACE_VOLATILE = 306;

  AGL_FORMAT_CACHE_SIZE = 501;
  AGL_CLEAR_FORMAT_CACHE = 502;
  AGL_RETAIN_RENDERERS = 503;

  AGL_MONOSCOPIC_BIT = $00000001;
  AGL_STEREOSCOPIC_BIT = $00000002;
  AGL_SINGLEBUFFER_BIT = $00000004;
  AGL_DOUBLEBUFFER_BIT = $00000008;

  AGL_0_BIT = $00000001;
  AGL_1_BIT = $00000002;
  AGL_2_BIT = $00000004;
  AGL_3_BIT = $00000008;
  AGL_4_BIT = $00000010;
  AGL_5_BIT = $00000020;
  AGL_6_BIT = $00000040;
  AGL_8_BIT = $00000080;
  AGL_10_BIT = $00000100;
  AGL_12_BIT = $00000200;
  AGL_16_BIT = $00000400;
  AGL_24_BIT = $00000800;
  AGL_32_BIT = $00001000;
  AGL_48_BIT = $00002000;
  AGL_64_BIT = $00004000;
  AGL_96_BIT = $00008000;
  AGL_128_BIT = $00010000;

  AGL_RGB8_BIT = $00000001;
  AGL_RGB8_A8_BIT = $00000002;
  AGL_BGR233_BIT = $00000004;
  AGL_BGR233_A8_BIT = $00000008;
  AGL_RGB332_BIT = $00000010;
  AGL_RGB332_A8_BIT = $00000020;
  AGL_RGB444_BIT = $00000040;
  AGL_ARGB4444_BIT = $00000080;
  AGL_RGB444_A8_BIT = $00000100;
  AGL_RGB555_BIT = $00000200;
  AGL_ARGB1555_BIT = $00000400;
  AGL_RGB555_A8_BIT = $00000800;
  AGL_RGB565_BIT = $00001000;
  AGL_RGB565_A8_BIT = $00002000;
  AGL_RGB888_BIT = $00004000;
  AGL_ARGB8888_BIT = $00008000;
  AGL_RGB888_A8_BIT = $00010000;
  AGL_RGB101010_BIT = $00020000;
  AGL_ARGB2101010_BIT = $00040000;
  AGL_RGB101010_A8_BIT = $00080000;
  AGL_RGB121212_BIT = $00100000;
  AGL_ARGB12121212_BIT = $00200000;
  AGL_RGB161616_BIT = $00400000;
  AGL_ARGB16161616_BIT = $00800000;
  AGL_INDEX8_BIT = $20000000;
  AGL_INDEX16_BIT = $40000000;
  AGL_RGBFLOAT64_BIT = $01000000;
  AGL_RGBAFLOAT64_BIT = $02000000;
  AGL_RGBFLOAT128_BIT = $04000000;
  AGL_RGBAFLOAT128_BIT = $08000000;
  AGL_RGBFLOAT256_BIT = $10000000;
  AGL_RGBAFLOAT256_BIT =  $20000000;

 AGL_NO_ERROR = 0;

  AGL_BAD_ATTRIBUTE = 10000;
  AGL_BAD_PROPERTY = 10001;
  AGL_BAD_PIXELFMT = 10002;
  AGL_BAD_RENDINFO = 10003;
  AGL_BAD_CONTEXT = 10004;
  AGL_BAD_DRAWABLE = 10005;
  AGL_BAD_GDEV = 10006;
  AGL_BAD_STATE = 10007;
  AGL_BAD_VALUE = 10008;
  AGL_BAD_MATCH = 10009;
  AGL_BAD_ENUM = 10010;
  AGL_BAD_OFFSCREEN = 10011;
  AGL_BAD_FULLSCREEN = 10012;
  AGL_BAD_WINDOW = 10013;
  AGL_BAD_POINTER = 10014;
  AGL_BAD_MODULE = 10015;
  AGL_BAD_ALLOC = 10016;
  AGL_BAD_CONNECTION = 10017;
  AGL_INVALID_FUNCTION = 10018;

type
  TGDHandle = ptrint;
  TCGrafPtr = Pointer;

  PAGLDevice = ^TAGLDevice;
  TAGLDevice = TGDHandle;

  PAGLDrawable = ^TAGLDrawable;
  TAGLDrawable = TCGrafPtr;

  TAGLRendererInfo = Pointer;

  TAGLPixelFormat = Pointer;

  TAGLContext = Pointer;

  TAGLPbuffer = Pointer;
  PAGLPbuffer = ^TAGLPbuffer;

  _AGLStyle = 0..255;

{$linkframework AGL}
function aglChoosePixelFormat(gdevs: PAGLDevice; ndev: GLint; attribs: PGLint): TAGLPixelFormat; cdecl; external;
procedure aglDestroyPixelFormat(pix: TAGLPixelFormat); cdecl; external;
function aglNextPixelFormat(pix: TAGLPixelFormat): TAGLPixelFormat; cdecl; external;
function aglDescribePixelFormat(pix: TAGLPixelFormat; attrib: GLint; value: PGLint): GLboolean; cdecl; external;
function aglDevicesOfPixelFormat(pix: TAGLPixelFormat; ndevs: PGLint): PAGLDevice; cdecl; external;
function aglQueryRendererInfo(gdevs: PAGLDevice; ndev: GLint): TAGLRendererInfo; cdecl; external;
procedure aglDestroyRendererInfo(rend: TAGLRendererInfo); cdecl; external;
function aglNextRendererInfo(rend: TAGLRendererInfo): TAGLRendererInfo; cdecl; external;
function aglDescribeRenderer(rend: TAGLRendererInfo; prop: GLint; value: PGLint): GLboolean; cdecl; external;
function aglCreateContext(pix: TAGLPixelFormat; share: TAGLContext): TAGLContext; cdecl; external;
function aglDestroyContext(ctx: TAGLContext): GLboolean; cdecl; external;
function aglCopyContext(src: TAGLContext; dst: TAGLContext; mask: GLuint): GLboolean; cdecl; external;
function aglUpdateContext(ctx: TAGLContext): GLboolean; cdecl; external;
function aglSetCurrentContext(ctx: TAGLContext): GLboolean; cdecl; external;
function aglGetCurrentContext: TAGLContext; cdecl; external;
function aglSetDrawable(ctx: TAGLContext; draw: TAGLDrawable): GLboolean; cdecl; external;
function aglSetOffScreen(ctx: TAGLContext; width: GLsizei; height: GLsizei; rowbytes: GLsizei; baseaddr: PGLvoid): GLboolean; cdecl; external;
function aglSetFullScreen(ctx: TAGLContext; width: GLsizei; height: GLsizei; freq: GLsizei; device: GLint):GLboolean;  cdecl; external;
function aglGetDrawable(ctx: TAGLContext): TAGLDrawable; cdecl; external;
function aglSetVirtualScreen(ctx: TAGLContext; screen: GLint): GLboolean; cdecl; external;
function aglGetVirtualScreen(ctx: TAGLContext): GLint; cdecl; external;
procedure aglGetVersion(major: PGLint; minor: PGLint); cdecl; external;
function aglSetWindowRef(ctx: TAGLContext; window: WindowRef): GLboolean; cdecl; external;
function aglGetWindowRef(ctx: TAGLContext): WindowRef; cdecl; external;
function aglConfigure(pname: GLenum; param: GLuint): GLboolean; cdecl; external;
procedure aglSwapBuffers(ctx: TAGLContext); cdecl; external;
function aglEnable(ctx: TAGLContext; pname: GLenum): GLboolean; cdecl; external;
function aglDisable(ctx: TAGLContext; pname: GLenum): GLboolean; cdecl; external;
function aglIsEnabled(ctx: TAGLContext; pname: GLenum): GLboolean; cdecl; external;
function aglSetInteger(ctx: TAGLContext; pname: GLenum; params: PGLint): GLboolean; cdecl; external;
function aglGetInteger(ctx: TAGLContext; pname: GLenum; params: PGLint): GLboolean; cdecl; external;
function aglUseFont(ctx: TAGLContext; fontID: GLint; face: _AGLStyle; size: GLint; first: GLint; count: GLint; base: GLint): GLboolean; cdecl; external;
function aglGetError: GLenum; cdecl; external;
function aglErrorString(code: GLenum): PGLubyte; cdecl; external;
procedure aglResetLibrary; cdecl; external;
procedure aglSurfaceTexture(context: TAGLContext; target: GLenum; internalformat: GLenum; surfacecontext: TAGLContext); cdecl; external;
function aglCreatePBuffer(width: GLint; height: GLint; target: GLenum; internalFormat: GLenum; max_level: longint; pbuffer: PAGLPbuffer): GLboolean; cdecl; external;
function aglDestroyPBuffer(pbuffer: TAGLPbuffer): GLboolean; cdecl; external;
function aglDescribePBuffer(pbuffer: TAGLPbuffer; width: PGLint; height: PGLint; target: PGLenum; internalFormat: PGLenum; max_level: PGLint): GLboolean; cdecl; external;
function aglTexImagePBuffer(ctx: TAGLContext; pbuffer: TAGLPbuffer; source: GLint): GLboolean; cdecl; external;
function aglSetPBuffer(ctx: TAGLContext; pbuffer: TAGLPbuffer; face: GLint; level: GLint; screen: GLint): GLboolean; cdecl; external;
function aglGetPBuffer(ctx: TAGLContext; pbuffer: PAGLPbuffer; face: PGLint; level: PGLint; screen: PGLint): GLboolean; cdecl; external;
function aglGetCGLContext(ctx: TAGLContext; cgl_ctx: Ppointer): GLboolean; cdecl; external;
function aglGetCGLPixelFormat(pix: TAGLPixelFormat; cgl_pix: Ppointer): GLboolean; cdecl; external;
{$endif}

//gl 1.1
const
  GL_ACCUM = $0100;
  GL_LOAD = $0101;
  GL_RETURN = $0102;
  GL_MULT = $0103;
  GL_ADD = $0104;
  GL_NEVER = $0200;
  GL_LESS = $0201;
  GL_EQUAL = $0202;
  GL_LEQUAL = $0203;
  GL_GREATER = $0204;
  GL_NOTEQUAL = $0205;
  GL_GEQUAL = $0206;
  GL_ALWAYS = $0207;
  GL_CURRENT_BIT = $00000001;
  GL_POINT_BIT = $00000002;
  GL_LINE_BIT = $00000004;
  GL_POLYGON_BIT = $00000008;
  GL_POLYGON_STIPPLE_BIT = $00000010;
  GL_PIXEL_MODE_BIT = $00000020;
  GL_LIGHTING_BIT = $00000040;
  GL_FOG_BIT = $00000080;
  GL_DEPTH_BUFFER_BIT = $00000100;
  GL_ACCUM_BUFFER_BIT = $00000200;
  GL_STENCIL_BUFFER_BIT = $00000400;
  GL_VIEWPORT_BIT = $00000800;
  GL_TRANSFORM_BIT = $00001000;
  GL_ENABLE_BIT = $00002000;
  GL_COLOR_BUFFER_BIT = $00004000;
  GL_HINT_BIT = $00008000;
  GL_EVAL_BIT = $00010000;
  GL_LIST_BIT = $00020000;
  GL_TEXTURE_BIT = $00040000;
  GL_SCISSOR_BIT = $00080000;
  GL_ALL_ATTRIB_BITS = $000FFFFF;
  GL_POINTS = $0000;
  GL_LINES = $0001;
  GL_LINE_LOOP = $0002;
  GL_LINE_STRIP = $0003;
  GL_TRIANGLES = $0004;
  GL_TRIANGLE_STRIP = $0005;
  GL_TRIANGLE_FAN = $0006;
  GL_QUADS = $0007;
  GL_QUAD_STRIP = $0008;
  GL_POLYGON = $0009;
  GL_ZERO = 0;
  GL_ONE = 1;
  GL_SRC_COLOR = $0300;
  GL_ONE_MINUS_SRC_COLOR = $0301;
  GL_SRC_ALPHA = $0302;
  GL_ONE_MINUS_SRC_ALPHA = $0303;
  GL_DST_ALPHA = $0304;
  GL_ONE_MINUS_DST_ALPHA = $0305;
  GL_DST_COLOR = $0306;
  GL_ONE_MINUS_DST_COLOR = $0307;
  GL_SRC_ALPHA_SATURATE = $0308;
  GL_TRUE = 1;
  GL_FALSE = 0;
  GL_CLIP_PLANE0 = $3000;
  GL_CLIP_PLANE1 = $3001;
  GL_CLIP_PLANE2 = $3002;
  GL_CLIP_PLANE3 = $3003;
  GL_CLIP_PLANE4 = $3004;
  GL_CLIP_PLANE5 = $3005;
  GL_BYTE = $1400;
  GL_UNSIGNED_BYTE = $1401;
  GL_SHORT = $1402;
  GL_UNSIGNED_SHORT = $1403;
  GL_INT = $1404;
  GL_UNSIGNED_INT = $1405;
  GL_FLOAT = $1406;
  GL_2_BYTES = $1407;
  GL_3_BYTES = $1408;
  GL_4_BYTES = $1409;
  GL_DOUBLE = $140A;
  GL_NONE = 0;
  GL_FRONT_LEFT = $0400;
  GL_FRONT_RIGHT = $0401;
  GL_BACK_LEFT = $0402;
  GL_BACK_RIGHT = $0403;
  GL_FRONT = $0404;
  GL_BACK = $0405;
  GL_LEFT = $0406;
  GL_RIGHT = $0407;
  GL_FRONT_AND_BACK = $0408;
  GL_AUX0 = $0409;
  GL_AUX1 = $040A;
  GL_AUX2 = $040B;
  GL_AUX3 = $040C;
  GL_NO_ERROR = 0;
  GL_INVALID_ENUM = $0500;
  GL_INVALID_VALUE = $0501;
  GL_INVALID_OPERATION = $0502;
  GL_STACK_OVERFLOW = $0503;
  GL_STACK_UNDERFLOW = $0504;
  GL_OUT_OF_MEMORY = $0505;
  GL_2D = $0600;
  GL_3D = $0601;
  GL_3D_COLOR = $0602;
  GL_3D_COLOR_TEXTURE = $0603;
  GL_4D_COLOR_TEXTURE = $0604;
  GL_PASS_THROUGH_TOKEN = $0700;
  GL_POINT_TOKEN = $0701;
  GL_LINE_TOKEN = $0702;
  GL_POLYGON_TOKEN = $0703;
  GL_BITMAP_TOKEN = $0704;
  GL_DRAW_PIXEL_TOKEN = $0705;
  GL_COPY_PIXEL_TOKEN = $0706;
  GL_LINE_RESET_TOKEN = $0707;
  GL_EXP = $0800;
  GL_EXP2 = $0801;
  GL_CW = $0900;
  GL_CCW = $0901;
  GL_COEFF = $0A00;
  GL_ORDER = $0A01;
  GL_DOMAIN = $0A02;
  GL_CURRENT_COLOR = $0B00;
  GL_CURRENT_INDEX = $0B01;
  GL_CURRENT_NORMAL = $0B02;
  GL_CURRENT_TEXTURE_COORDS = $0B03;
  GL_CURRENT_RASTER_COLOR = $0B04;
  GL_CURRENT_RASTER_INDEX = $0B05;
  GL_CURRENT_RASTER_TEXTURE_COORDS = $0B06;
  GL_CURRENT_RASTER_POSITION = $0B07;
  GL_CURRENT_RASTER_POSITION_VALID = $0B08;
  GL_CURRENT_RASTER_DISTANCE = $0B09;
  GL_POINT_SMOOTH = $0B10;
  GL_POINT_SIZE = $0B11;
  GL_POINT_SIZE_RANGE = $0B12;
  GL_POINT_SIZE_GRANULARITY = $0B13;
  GL_LINE_SMOOTH = $0B20;
  GL_LINE_WIDTH = $0B21;
  GL_LINE_WIDTH_RANGE = $0B22;
  GL_LINE_WIDTH_GRANULARITY = $0B23;
  GL_LINE_STIPPLE = $0B24;
  GL_LINE_STIPPLE_PATTERN = $0B25;
  GL_LINE_STIPPLE_REPEAT = $0B26;
  GL_LIST_MODE = $0B30;
  GL_MAX_LIST_NESTING = $0B31;
  GL_LIST_BASE = $0B32;
  GL_LIST_INDEX = $0B33;
  GL_POLYGON_MODE = $0B40;
  GL_POLYGON_SMOOTH = $0B41;
  GL_POLYGON_STIPPLE = $0B42;
  GL_EDGE_FLAG = $0B43;
  GL_CULL_FACE = $0B44;
  GL_CULL_FACE_MODE = $0B45;
  GL_FRONT_FACE = $0B46;
  GL_LIGHTING = $0B50;
  GL_LIGHT_MODEL_LOCAL_VIEWER = $0B51;
  GL_LIGHT_MODEL_TWO_SIDE = $0B52;
  GL_LIGHT_MODEL_AMBIENT = $0B53;
  GL_SHADE_MODEL = $0B54;
  GL_COLOR_MATERIAL_FACE = $0B55;
  GL_COLOR_MATERIAL_PARAMETER = $0B56;
  GL_COLOR_MATERIAL = $0B57;
  GL_FOG = $0B60;
  GL_FOG_INDEX = $0B61;
  GL_FOG_DENSITY = $0B62;
  GL_FOG_START = $0B63;
  GL_FOG_END = $0B64;
  GL_FOG_MODE = $0B65;
  GL_FOG_COLOR = $0B66;
  GL_DEPTH_RANGE = $0B70;
  GL_DEPTH_TEST = $0B71;
  GL_DEPTH_WRITEMASK = $0B72;
  GL_DEPTH_CLEAR_VALUE = $0B73;
  GL_DEPTH_FUNC = $0B74;
  GL_ACCUM_CLEAR_VALUE = $0B80;
  GL_STENCIL_TEST = $0B90;
  GL_STENCIL_CLEAR_VALUE = $0B91;
  GL_STENCIL_FUNC = $0B92;
  GL_STENCIL_VALUE_MASK = $0B93;
  GL_STENCIL_FAIL = $0B94;
  GL_STENCIL_PASS_DEPTH_FAIL = $0B95;
  GL_STENCIL_PASS_DEPTH_PASS = $0B96;
  GL_STENCIL_REF = $0B97;
  GL_STENCIL_WRITEMASK = $0B98;
  GL_MATRIX_MODE = $0BA0;
  GL_NORMALIZE = $0BA1;
  GL_VIEWPORT = $0BA2;
  GL_MODELVIEW_STACK_DEPTH = $0BA3;
  GL_PROJECTION_STACK_DEPTH = $0BA4;
  GL_TEXTURE_STACK_DEPTH = $0BA5;
  GL_MODELVIEW_MATRIX = $0BA6;
  GL_PROJECTION_MATRIX = $0BA7;
  GL_TEXTURE_MATRIX = $0BA8;
  GL_ATTRIB_STACK_DEPTH = $0BB0;
  GL_CLIENT_ATTRIB_STACK_DEPTH = $0BB1;
  GL_ALPHA_TEST = $0BC0;
  GL_ALPHA_TEST_FUNC = $0BC1;
  GL_ALPHA_TEST_REF = $0BC2;
  GL_DITHER = $0BD0;
  GL_BLEND_DST = $0BE0;
  GL_BLEND_SRC = $0BE1;
  GL_BLEND = $0BE2;
  GL_LOGIC_OP_MODE = $0BF0;
  GL_INDEX_LOGIC_OP = $0BF1;
  GL_COLOR_LOGIC_OP = $0BF2;
  GL_AUX_BUFFERS = $0C00;
  GL_DRAW_BUFFER = $0C01;
  GL_READ_BUFFER = $0C02;
  GL_SCISSOR_BOX = $0C10;
  GL_SCISSOR_TEST = $0C11;
  GL_INDEX_CLEAR_VALUE = $0C20;
  GL_INDEX_WRITEMASK = $0C21;
  GL_COLOR_CLEAR_VALUE = $0C22;
  GL_COLOR_WRITEMASK = $0C23;
  GL_INDEX_MODE = $0C30;
  GL_RGBA_MODE = $0C31;
  GL_DOUBLEBUFFER = $0C32;
  GL_STEREO = $0C33;
  GL_RENDER_MODE = $0C40;
  GL_PERSPECTIVE_CORRECTION_HINT = $0C50;
  GL_POINT_SMOOTH_HINT = $0C51;
  GL_LINE_SMOOTH_HINT = $0C52;
  GL_POLYGON_SMOOTH_HINT = $0C53;
  GL_FOG_HINT = $0C54;
  GL_TEXTURE_GEN_S = $0C60;
  GL_TEXTURE_GEN_T = $0C61;
  GL_TEXTURE_GEN_R = $0C62;
  GL_TEXTURE_GEN_Q = $0C63;
  GL_PIXEL_MAP_I_TO_I = $0C70;
  GL_PIXEL_MAP_S_TO_S = $0C71;
  GL_PIXEL_MAP_I_TO_R = $0C72;
  GL_PIXEL_MAP_I_TO_G = $0C73;
  GL_PIXEL_MAP_I_TO_B = $0C74;
  GL_PIXEL_MAP_I_TO_A = $0C75;
  GL_PIXEL_MAP_R_TO_R = $0C76;
  GL_PIXEL_MAP_G_TO_G = $0C77;
  GL_PIXEL_MAP_B_TO_B = $0C78;
  GL_PIXEL_MAP_A_TO_A = $0C79;
  GL_PIXEL_MAP_I_TO_I_SIZE = $0CB0;
  GL_PIXEL_MAP_S_TO_S_SIZE = $0CB1;
  GL_PIXEL_MAP_I_TO_R_SIZE = $0CB2;
  GL_PIXEL_MAP_I_TO_G_SIZE = $0CB3;
  GL_PIXEL_MAP_I_TO_B_SIZE = $0CB4;
  GL_PIXEL_MAP_I_TO_A_SIZE = $0CB5;
  GL_PIXEL_MAP_R_TO_R_SIZE = $0CB6;
  GL_PIXEL_MAP_G_TO_G_SIZE = $0CB7;
  GL_PIXEL_MAP_B_TO_B_SIZE = $0CB8;
  GL_PIXEL_MAP_A_TO_A_SIZE = $0CB9;
  GL_UNPACK_SWAP_BYTES = $0CF0;
  GL_UNPACK_LSB_FIRST = $0CF1;
  GL_UNPACK_ROW_LENGTH = $0CF2;
  GL_UNPACK_SKIP_ROWS = $0CF3;
  GL_UNPACK_SKIP_PIXELS = $0CF4;
  GL_UNPACK_ALIGNMENT = $0CF5;
  GL_PACK_SWAP_BYTES = $0D00;
  GL_PACK_LSB_FIRST = $0D01;
  GL_PACK_ROW_LENGTH = $0D02;
  GL_PACK_SKIP_ROWS = $0D03;
  GL_PACK_SKIP_PIXELS = $0D04;
  GL_PACK_ALIGNMENT = $0D05;
  GL_MAP_COLOR = $0D10;
  GL_MAP_STENCIL = $0D11;
  GL_INDEX_SHIFT = $0D12;
  GL_INDEX_OFFSET = $0D13;
  GL_RED_SCALE = $0D14;
  GL_RED_BIAS = $0D15;
  GL_ZOOM_X = $0D16;
  GL_ZOOM_Y = $0D17;
  GL_GREEN_SCALE = $0D18;
  GL_GREEN_BIAS = $0D19;
  GL_BLUE_SCALE = $0D1A;
  GL_BLUE_BIAS = $0D1B;
  GL_ALPHA_SCALE = $0D1C;
  GL_ALPHA_BIAS = $0D1D;
  GL_DEPTH_SCALE = $0D1E;
  GL_DEPTH_BIAS = $0D1F;
  GL_MAX_EVAL_ORDER = $0D30;
  GL_MAX_LIGHTS = $0D31;
  GL_MAX_CLIP_PLANES = $0D32;
  GL_MAX_TEXTURE_SIZE = $0D33;
  GL_MAX_PIXEL_MAP_TABLE = $0D34;
  GL_MAX_ATTRIB_STACK_DEPTH = $0D35;
  GL_MAX_MODELVIEW_STACK_DEPTH = $0D36;
  GL_MAX_NAME_STACK_DEPTH = $0D37;
  GL_MAX_PROJECTION_STACK_DEPTH = $0D38;
  GL_MAX_TEXTURE_STACK_DEPTH = $0D39;
  GL_MAX_VIEWPORT_DIMS = $0D3A;
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = $0D3B;
  GL_SUBPIXEL_BITS = $0D50;
  GL_INDEX_BITS = $0D51;
  GL_RED_BITS = $0D52;
  GL_GREEN_BITS = $0D53;
  GL_BLUE_BITS = $0D54;
  GL_ALPHA_BITS = $0D55;
  GL_DEPTH_BITS = $0D56;
  GL_STENCIL_BITS = $0D57;
  GL_ACCUM_RED_BITS = $0D58;
  GL_ACCUM_GREEN_BITS = $0D59;
  GL_ACCUM_BLUE_BITS = $0D5A;
  GL_ACCUM_ALPHA_BITS = $0D5B;
  GL_NAME_STACK_DEPTH = $0D70;
  GL_AUTO_NORMAL = $0D80;
  GL_MAP1_COLOR_4 = $0D90;
  GL_MAP1_INDEX = $0D91;
  GL_MAP1_NORMAL = $0D92;
  GL_MAP1_TEXTURE_COORD_1 = $0D93;
  GL_MAP1_TEXTURE_COORD_2 = $0D94;
  GL_MAP1_TEXTURE_COORD_3 = $0D95;
  GL_MAP1_TEXTURE_COORD_4 = $0D96;
  GL_MAP1_VERTEX_3 = $0D97;
  GL_MAP1_VERTEX_4 = $0D98;
  GL_MAP2_COLOR_4 = $0DB0;
  GL_MAP2_INDEX = $0DB1;
  GL_MAP2_NORMAL = $0DB2;
  GL_MAP2_TEXTURE_COORD_1 = $0DB3;
  GL_MAP2_TEXTURE_COORD_2 = $0DB4;
  GL_MAP2_TEXTURE_COORD_3 = $0DB5;
  GL_MAP2_TEXTURE_COORD_4 = $0DB6;
  GL_MAP2_VERTEX_3 = $0DB7;
  GL_MAP2_VERTEX_4 = $0DB8;
  GL_MAP1_GRID_DOMAIN = $0DD0;
  GL_MAP1_GRID_SEGMENTS = $0DD1;
  GL_MAP2_GRID_DOMAIN = $0DD2;
  GL_MAP2_GRID_SEGMENTS = $0DD3;
  GL_TEXTURE_1D = $0DE0;
  GL_TEXTURE_2D = $0DE1;
  GL_FEEDBACK_BUFFER_POINTER = $0DF0;
  GL_FEEDBACK_BUFFER_SIZE = $0DF1;
  GL_FEEDBACK_BUFFER_TYPE = $0DF2;
  GL_SELECTION_BUFFER_POINTER = $0DF3;
  GL_SELECTION_BUFFER_SIZE = $0DF4;
  GL_TEXTURE_WIDTH = $1000;
  GL_TEXTURE_HEIGHT = $1001;
  GL_TEXTURE_INTERNAL_FORMAT = $1003;
  GL_TEXTURE_BORDER_COLOR = $1004;
  GL_TEXTURE_BORDER = $1005;
  GL_DONT_CARE = $1100;
  GL_FASTEST = $1101;
  GL_NICEST = $1102;
  GL_LIGHT0 = $4000;
  GL_LIGHT1 = $4001;
  GL_LIGHT2 = $4002;
  GL_LIGHT3 = $4003;
  GL_LIGHT4 = $4004;
  GL_LIGHT5 = $4005;
  GL_LIGHT6 = $4006;
  GL_LIGHT7 = $4007;
  GL_AMBIENT = $1200;
  GL_DIFFUSE = $1201;
  GL_SPECULAR = $1202;
  GL_POSITION = $1203;
  GL_SPOT_DIRECTION = $1204;
  GL_SPOT_EXPONENT = $1205;
  GL_SPOT_CUTOFF = $1206;
  GL_CONSTANT_ATTENUATION = $1207;
  GL_LINEAR_ATTENUATION = $1208;
  GL_QUADRATIC_ATTENUATION = $1209;
  GL_COMPILE = $1300;
  GL_COMPILE_AND_EXECUTE = $1301;
  GL_CLEAR = $1500;
  GL_AND = $1501;
  GL_AND_REVERSE = $1502;
  GL_COPY = $1503;
  GL_AND_INVERTED = $1504;
  GL_NOOP = $1505;
  GL_XOR = $1506;
  GL_OR = $1507;
  GL_NOR = $1508;
  GL_EQUIV = $1509;
  GL_INVERT = $150A;
  GL_OR_REVERSE = $150B;
  GL_COPY_INVERTED = $150C;
  GL_OR_INVERTED = $150D;
  GL_NAND = $150E;
  GL_SET = $150F;
  GL_EMISSION = $1600;
  GL_SHININESS = $1601;
  GL_AMBIENT_AND_DIFFUSE = $1602;
  GL_COLOR_INDEXES = $1603;
  GL_MODELVIEW = $1700;
  GL_PROJECTION = $1701;
  GL_TEXTURE = $1702;
  GL_COLOR = $1800;
  GL_DEPTH = $1801;
  GL_STENCIL = $1802;
  GL_COLOR_INDEX = $1900;
  GL_STENCIL_INDEX = $1901;
  GL_DEPTH_COMPONENT = $1902;
  GL_RED = $1903;
  GL_GREEN = $1904;
  GL_BLUE = $1905;
  GL_ALPHA = $1906;
  GL_RGB = $1907;
  GL_RGBA = $1908;
  GL_LUMINANCE = $1909;
  GL_LUMINANCE_ALPHA = $190A;
  GL_BITMAP = $1A00;
  GL_POINT = $1B00;
  GL_LINE = $1B01;
  GL_FILL = $1B02;
  GL_RENDER = $1C00;
  GL_FEEDBACK = $1C01;
  GL_SELECT = $1C02;
  GL_FLAT = $1D00;
  GL_SMOOTH = $1D01;
  GL_KEEP = $1E00;
  GL_REPLACE = $1E01;
  GL_INCR = $1E02;
  GL_DECR = $1E03;
  GL_VENDOR = $1F00;
  GL_RENDERER = $1F01;
  GL_VERSION = $1F02;
  GL_EXTENSIONS = $1F03;
  GL_S = $2000;
  GL_T = $2001;
  GL_R = $2002;
  GL_Q = $2003;
  GL_MODULATE = $2100;
  GL_DECAL = $2101;
  GL_TEXTURE_ENV_MODE = $2200;
  GL_TEXTURE_ENV_COLOR = $2201;
  GL_TEXTURE_ENV = $2300;
  GL_EYE_LINEAR = $2400;
  GL_OBJECT_LINEAR = $2401;
  GL_SPHERE_MAP = $2402;
  GL_TEXTURE_GEN_MODE = $2500;
  GL_OBJECT_PLANE = $2501;
  GL_EYE_PLANE = $2502;
  GL_NEAREST = $2600;
  GL_LINEAR = $2601;
  GL_NEAREST_MIPMAP_NEAREST = $2700;
  GL_LINEAR_MIPMAP_NEAREST = $2701;
  GL_NEAREST_MIPMAP_LINEAR = $2702;
  GL_LINEAR_MIPMAP_LINEAR = $2703;
  GL_TEXTURE_MAG_FILTER = $2800;
  GL_TEXTURE_MIN_FILTER = $2801;
  GL_TEXTURE_WRAP_S = $2802;
  GL_TEXTURE_WRAP_T = $2803;
  GL_CLAMP = $2900;
  GL_REPEAT = $2901;
  GL_CLIENT_PIXEL_STORE_BIT = $00000001;
  GL_CLIENT_VERTEX_ARRAY_BIT = $00000002;
  GL_CLIENT_ALL_ATTRIB_BITS = $FFFFFFFF;
  GL_POLYGON_OFFSET_FACTOR = $8038;
  GL_POLYGON_OFFSET_UNITS = $2A00;
  GL_POLYGON_OFFSET_POINT = $2A01;
  GL_POLYGON_OFFSET_LINE = $2A02;
  GL_POLYGON_OFFSET_FILL = $8037;
  GL_ALPHA4 = $803B;
  GL_ALPHA8 = $803C;
  GL_ALPHA12 = $803D;
  GL_ALPHA16 = $803E;
  GL_LUMINANCE4 = $803F;
  GL_LUMINANCE8 = $8040;
  GL_LUMINANCE12 = $8041;
  GL_LUMINANCE16 = $8042;
  GL_LUMINANCE4_ALPHA4 = $8043;
  GL_LUMINANCE6_ALPHA2 = $8044;
  GL_LUMINANCE8_ALPHA8 = $8045;
  GL_LUMINANCE12_ALPHA4 = $8046;
  GL_LUMINANCE12_ALPHA12 = $8047;
  GL_LUMINANCE16_ALPHA16 = $8048;
  GL_INTENSITY = $8049;
  GL_INTENSITY4 = $804A;
  GL_INTENSITY8 = $804B;
  GL_INTENSITY12 = $804C;
  GL_INTENSITY16 = $804D;
  GL_R3_G3_B2 = $2A10;
  GL_RGB4 = $804F;
  GL_RGB5 = $8050;
  GL_RGB8 = $8051;
  GL_RGB10 = $8052;
  GL_RGB12 = $8053;
  GL_RGB16 = $8054;
  GL_RGBA2 = $8055;
  GL_RGBA4 = $8056;
  GL_RGB5_A1 = $8057;
  GL_RGBA8 = $8058;
  GL_RGB10_A2 = $8059;
  GL_RGBA12 = $805A;
  GL_RGBA16 = $805B;
  GL_TEXTURE_RED_SIZE = $805C;
  GL_TEXTURE_GREEN_SIZE = $805D;
  GL_TEXTURE_BLUE_SIZE = $805E;
  GL_TEXTURE_ALPHA_SIZE = $805F;
  GL_TEXTURE_LUMINANCE_SIZE = $8060;
  GL_TEXTURE_INTENSITY_SIZE = $8061;
  GL_PROXY_TEXTURE_1D = $8063;
  GL_PROXY_TEXTURE_2D = $8064;
  GL_TEXTURE_PRIORITY = $8066;
  GL_TEXTURE_RESIDENT = $8067;
  GL_TEXTURE_BINDING_1D = $8068;
  GL_TEXTURE_BINDING_2D = $8069;
  GL_VERTEX_ARRAY = $8074;
  GL_NORMAL_ARRAY = $8075;
  GL_COLOR_ARRAY = $8076;
  GL_INDEX_ARRAY = $8077;
  GL_TEXTURE_COORD_ARRAY = $8078;
  GL_EDGE_FLAG_ARRAY = $8079;
  GL_VERTEX_ARRAY_SIZE = $807A;
  GL_VERTEX_ARRAY_TYPE = $807B;
  GL_VERTEX_ARRAY_STRIDE = $807C;
  GL_NORMAL_ARRAY_TYPE = $807E;
  GL_NORMAL_ARRAY_STRIDE = $807F;
  GL_COLOR_ARRAY_SIZE = $8081;
  GL_COLOR_ARRAY_TYPE = $8082;
  GL_COLOR_ARRAY_STRIDE = $8083;
  GL_INDEX_ARRAY_TYPE = $8085;
  GL_INDEX_ARRAY_STRIDE = $8086;
  GL_TEXTURE_COORD_ARRAY_SIZE = $8088;
  GL_TEXTURE_COORD_ARRAY_TYPE = $8089;
  GL_TEXTURE_COORD_ARRAY_STRIDE = $808A;
  GL_EDGE_FLAG_ARRAY_STRIDE = $808C;
  GL_VERTEX_ARRAY_POINTER = $808E;
  GL_NORMAL_ARRAY_POINTER = $808F;
  GL_COLOR_ARRAY_POINTER = $8090;
  GL_INDEX_ARRAY_POINTER = $8091;
  GL_TEXTURE_COORD_ARRAY_POINTER = $8092;
  GL_EDGE_FLAG_ARRAY_POINTER = $8093;
  GL_V2F = $2A20;
  GL_V3F = $2A21;
  GL_C4UB_V2F = $2A22;
  GL_C4UB_V3F = $2A23;
  GL_C3F_V3F = $2A24;
  GL_N3F_V3F = $2A25;
  GL_C4F_N3F_V3F = $2A26;
  GL_T2F_V3F = $2A27;
  GL_T4F_V4F = $2A28;
  GL_T2F_C4UB_V3F = $2A29;
  GL_T2F_C3F_V3F = $2A2A;
  GL_T2F_N3F_V3F = $2A2B;
  GL_T2F_C4F_N3F_V3F = $2A2C;
  GL_T4F_C4F_N3F_V4F = $2A2D;
  GL_COLOR_TABLE_FORMAT_EXT = $80D8;
  GL_COLOR_TABLE_WIDTH_EXT = $80D9;
  GL_COLOR_TABLE_RED_SIZE_EXT = $80DA;
  GL_COLOR_TABLE_GREEN_SIZE_EXT = $80DB;
  GL_COLOR_TABLE_BLUE_SIZE_EXT = $80DC;
  GL_COLOR_TABLE_ALPHA_SIZE_EXT = $80DD;
  GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = $80DE;
  GL_COLOR_TABLE_INTENSITY_SIZE_EXT = $80DF;
  GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
  GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;
{$ifndef GL_STATIC}
var
  glAccum: procedure (op: TGLenum; value: TGLfloat); libdecl;
  glAlphaFunc: procedure (func: TGLenum; ref: TGLclampf); libdecl;
  glAreTexturesResident: function (n: TGLsizei; const textures: PGLuint; residences: PGLboolean): TGLboolean; libdecl;
  glArrayElement: procedure (i: TGLint); libdecl;
  glBegin: procedure (mode: TGLenum); libdecl;
  glBindTexture: procedure (target: TGLenum; texture: TGLuint); libdecl;
  glBitmap: procedure (width: TGLsizei; height: TGLsizei; xorig: TGLfloat; yorig: TGLfloat; xmove: TGLfloat; ymove: TGLfloat; const bitmap: PGLubyte); libdecl;
  glBlendFunc: procedure (sfactor: TGLenum; dfactor: TGLenum); libdecl;
  glCallList: procedure (list: TGLuint); libdecl;
  glCallLists: procedure (n: TGLsizei; _type: TGLenum; const lists: PGLvoid); libdecl;
  glClear: procedure (mask: TGLbitfield); libdecl;
  glClearAccum: procedure (red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); libdecl;
  glClearColor: procedure (red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf); libdecl;
  glClearDepth: procedure (depth: TGLclampd); libdecl;
  glClearIndex: procedure (c: TGLfloat); libdecl;
  glClearStencil: procedure (s: TGLint); libdecl;
  glClipPlane: procedure (plane: TGLenum; const equation: PGLdouble); libdecl;
  glColor3b: procedure (red: TGLbyte; green: TGLbyte; blue: TGLbyte); libdecl;
  glColor3bv: procedure (const v: PGLbyte); libdecl;
  glColor3d: procedure (red: TGLdouble; green: TGLdouble; blue: TGLdouble); libdecl;
  glColor3dv: procedure (const v: PGLdouble); libdecl;
  glColor3f: procedure (red: TGLfloat; green: TGLfloat; blue: TGLfloat); libdecl;
  glColor3fv: procedure (const v: PGLfloat); libdecl;
  glColor3i: procedure (red: TGLint; green: TGLint; blue: TGLint); libdecl;
  glColor3iv: procedure (const v: PGLint); libdecl;
  glColor3s: procedure (red: TGLshort; green: TGLshort; blue: TGLshort); libdecl;
  glColor3sv: procedure (const v: PGLshort); libdecl;
  glColor3ub: procedure (red: TGLubyte; green: TGLubyte; blue: TGLubyte); libdecl;
  glColor3ubv: procedure (const v: PGLubyte); libdecl;
  glColor3ui: procedure (red: TGLuint; green: TGLuint; blue: TGLuint); libdecl;
  glColor3uiv: procedure (const v: PGLuint); libdecl;
  glColor3us: procedure (red: TGLushort; green: TGLushort; blue: TGLushort); libdecl;
  glColor3usv: procedure (const v: PGLushort); libdecl;
  glColor4b: procedure (red: TGLbyte; green: TGLbyte; blue: TGLbyte; alpha: TGLbyte); libdecl;
  glColor4bv: procedure (const v: PGLbyte); libdecl;
  glColor4d: procedure (red: TGLdouble; green: TGLdouble; blue: TGLdouble; alpha: TGLdouble); libdecl;
  glColor4dv: procedure (const v: PGLdouble); libdecl;
  glColor4f: procedure (red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); libdecl;
  glColor4fv: procedure (const v: PGLfloat); libdecl;
  glColor4i: procedure (red: TGLint; green: TGLint; blue: TGLint; alpha: TGLint); libdecl;
  glColor4iv: procedure (const v: PGLint); libdecl;
  glColor4s: procedure (red: TGLshort; green: TGLshort; blue: TGLshort; alpha: TGLshort); libdecl;
  glColor4sv: procedure (const v: PGLshort); libdecl;
  glColor4ub: procedure (red: TGLubyte; green: TGLubyte; blue: TGLubyte; alpha: TGLubyte); libdecl;
  glColor4ubv: procedure (const v: PGLubyte); libdecl;
  glColor4ui: procedure (red: TGLuint; green: TGLuint; blue: TGLuint; alpha: TGLuint); libdecl;
  glColor4uiv: procedure (const v: PGLuint); libdecl;
  glColor4us: procedure (red: TGLushort; green: TGLushort; blue: TGLushort; alpha: TGLushort); libdecl;
  glColor4usv: procedure (const v: PGLushort); libdecl;
  glColorMask: procedure (red: TGLboolean; green: TGLboolean; blue: TGLboolean; alpha: TGLboolean); libdecl;
  glColorMaterial: procedure (face: TGLenum; mode: TGLenum); libdecl;
  glColorPointer: procedure (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glCopyPixels: procedure (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; _type: TGLenum); libdecl;
  glCopyTexImage1D: procedure (target: TGLenum; level: TGLint; internalFormat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; border: TGLint); libdecl;
  glCopyTexImage2D: procedure (target: TGLenum; level: TGLint; internalFormat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint); libdecl;
  glCopyTexSubImage1D: procedure (target: TGLenum; level: TGLint; xoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei); libdecl;
  glCopyTexSubImage2D: procedure (target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl;
  glCullFace: procedure (mode: TGLenum); libdecl;
  glDeleteLists: procedure (list: TGLuint; range: TGLsizei); libdecl;
  glDeleteTextures: procedure (n: TGLsizei; const textures: PGLuint); libdecl;
  glDepthFunc: procedure (func: TGLenum); libdecl;
  glDepthMask: procedure (flag: TGLboolean); libdecl;
  glDepthRange: procedure (zNear: TGLclampd; zFar: TGLclampd); libdecl;
  glDisable: procedure (cap: TGLenum); libdecl;
  glDisableClientState: procedure (_array: TGLenum); libdecl;
  glDrawArrays: procedure (mode: TGLenum; first: TGLint; count: TGLsizei); libdecl;
  glDrawBuffer: procedure (mode: TGLenum); libdecl;
  glDrawElements: procedure (mode: TGLenum; count: TGLsizei; _type: TGLenum; const indices: PGLvoid); libdecl;
  glDrawPixels: procedure (width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl;
  glEdgeFlag: procedure (flag: TGLboolean); libdecl;
  glEdgeFlagPointer: procedure (stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glEdgeFlagv: procedure (const flag: PGLboolean); libdecl;
  glEnable: procedure (cap: TGLenum); libdecl;
  glEnableClientState: procedure (_array: TGLenum); libdecl;
  glEnd: procedure (); libdecl;
  glEndList: procedure (); libdecl;
  glEvalCoord1d: procedure (u: TGLdouble); libdecl;
  glEvalCoord1dv: procedure (const u: PGLdouble); libdecl;
  glEvalCoord1f: procedure (u: TGLfloat); libdecl;
  glEvalCoord1fv: procedure (const u: PGLfloat); libdecl;
  glEvalCoord2d: procedure (u: TGLdouble; v: TGLdouble); libdecl;
  glEvalCoord2dv: procedure (const u: PGLdouble); libdecl;
  glEvalCoord2f: procedure (u: TGLfloat; v: TGLfloat); libdecl;
  glEvalCoord2fv: procedure (const u: PGLfloat); libdecl;
  glEvalMesh1: procedure (mode: TGLenum; i1: TGLint; i2: TGLint); libdecl;
  glEvalMesh2: procedure (mode: TGLenum; i1: TGLint; i2: TGLint; j1: TGLint; j2: TGLint); libdecl;
  glEvalPoint1: procedure (i: TGLint); libdecl;
  glEvalPoint2: procedure (i: TGLint; j: TGLint); libdecl;
  glFeedbackBuffer: procedure (size: TGLsizei; _type: TGLenum; buffer: PGLfloat); libdecl;
  glFinish: procedure (); libdecl;
  glFlush: procedure (); libdecl;
  glFogf: procedure (pname: TGLenum; param: TGLfloat); libdecl;
  glFogfv: procedure (pname: TGLenum; const params: PGLfloat); libdecl;
  glFogi: procedure (pname: TGLenum; param: TGLint); libdecl;
  glFogiv: procedure (pname: TGLenum; const params: PGLint); libdecl;
  glFrontFace: procedure (mode: TGLenum); libdecl;
  glFrustum: procedure (left: TGLdouble; right: TGLdouble; bottom: TGLdouble; top: TGLdouble; zNear: TGLdouble; zFar: TGLdouble); libdecl;
  glGenLists: function (range: TGLsizei): TGLuint; libdecl;
  glGenTextures: procedure (n: TGLsizei; textures: PGLuint); libdecl;
  glGetBooleanv: procedure (pname: TGLenum; params: PGLboolean); libdecl;
  glGetClipPlane: procedure (plane: TGLenum; equation: PGLdouble); libdecl;
  glGetDoublev: procedure (pname: TGLenum; params: PGLdouble); libdecl;
  glGetError: function (): TGLenum; libdecl;
  glGetFloatv: procedure (pname: TGLenum; params: PGLfloat); libdecl;
  glGetIntegerv: procedure (pname: TGLenum; params: PGLint); libdecl;
  glGetLightfv: procedure (light: TGLenum; pname: TGLenum; params: PGLfloat); libdecl;
  glGetLightiv: procedure (light: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glGetMapdv: procedure (target: TGLenum; query: TGLenum; v: PGLdouble); libdecl;
  glGetMapfv: procedure (target: TGLenum; query: TGLenum; v: PGLfloat); libdecl;
  glGetMapiv: procedure (target: TGLenum; query: TGLenum; v: PGLint); libdecl;
  glGetMaterialfv: procedure (face: TGLenum; pname: TGLenum; params: PGLfloat); libdecl;
  glGetMaterialiv: procedure (face: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glGetPixelMapfv: procedure (map: TGLenum; values: PGLfloat); libdecl;
  glGetPixelMapuiv: procedure (map: TGLenum; values: PGLuint); libdecl;
  glGetPixelMapusv: procedure (map: TGLenum; values: PGLushort); libdecl;
  glGetPointerv: procedure (pname: TGLenum; params: PGLvoid); libdecl;
  glGetPolygonStipple: procedure (mask: PGLubyte); libdecl;
  glGetString: function (name: TGLenum): PAnsiChar; libdecl;
  glGetTexEnvfv: procedure (target: TGLenum; pname: TGLenum; params: PGLfloat); libdecl;
  glGetTexEnviv: procedure (target: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glGetTexGendv: procedure (coord: TGLenum; pname: TGLenum; params: PGLdouble); libdecl;
  glGetTexGenfv: procedure (coord: TGLenum; pname: TGLenum; params: PGLfloat); libdecl;
  glGetTexGeniv: procedure (coord: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glGetTexImage: procedure (target: TGLenum; level: TGLint; format: TGLenum; _type: TGLenum; pixels: PGLvoid); libdecl;
  glGetTexLevelParameterfv: procedure (target: TGLenum; level: TGLint; pname: TGLenum; params: PGLfloat); libdecl;
  glGetTexLevelParameteriv: procedure (target: TGLenum; level: TGLint; pname: TGLenum; params: PGLint); libdecl;
  glGetTexParameterfv: procedure (target: TGLenum; pname: TGLenum; params: PGLfloat); libdecl;
  glGetTexParameteriv: procedure (target: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glHint: procedure (target: TGLenum; mode: TGLenum); libdecl;
  glIndexMask: procedure (mask: TGLuint); libdecl;
  glIndexPointer: procedure (_type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glIndexd: procedure (c: TGLdouble); libdecl;
  glIndexdv: procedure (const c: PGLdouble); libdecl;
  glIndexf: procedure (c: TGLfloat); libdecl;
  glIndexfv: procedure (const c: PGLfloat); libdecl;
  glIndexi: procedure (c: TGLint); libdecl;
  glIndexiv: procedure (const c: PGLint); libdecl;
  glIndexs: procedure (c: TGLshort); libdecl;
  glIndexsv: procedure (const c: PGLshort); libdecl;
  glIndexub: procedure (c: TGLubyte); libdecl;
  glIndexubv: procedure (const c: PGLubyte); libdecl;
  glInitNames: procedure (); libdecl;
  glInterleavedArrays: procedure (format: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glIsEnabled: function (cap: TGLenum): TGLboolean; libdecl;
  glIsList: function (list: TGLuint): TGLboolean; libdecl;
  glIsTexture: function (texture: TGLuint): TGLboolean; libdecl;
  glLightModelf: procedure (pname: TGLenum; param: TGLfloat); libdecl;
  glLightModelfv: procedure (pname: TGLenum; const params: PGLfloat); libdecl;
  glLightModeli: procedure (pname: TGLenum; param: TGLint); libdecl;
  glLightModeliv: procedure (pname: TGLenum; const params: PGLint); libdecl;
  glLightf: procedure (light: TGLenum; pname: TGLenum; param: TGLfloat); libdecl;
  glLightfv: procedure (light: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl;
  glLighti: procedure (light: TGLenum; pname: TGLenum; param: TGLint); libdecl;
  glLightiv: procedure (light: TGLenum; pname: TGLenum; const params: PGLint); libdecl;
  glLineStipple: procedure (factor: TGLint; pattern: TGLushort); libdecl;
  glLineWidth: procedure (width: TGLfloat); libdecl;
  glListBase: procedure (base: TGLuint); libdecl;
  glLoadIdentity: procedure (); libdecl;
  glLoadMatrixd: procedure (const m: PGLdouble); libdecl;
  glLoadMatrixf: procedure (const m: PGLfloat); libdecl;
  glLoadName: procedure (name: TGLuint); libdecl;
  glLogicOp: procedure (opcode: TGLenum); libdecl;
  glMap1d: procedure (target: TGLenum; u1: TGLdouble; u2: TGLdouble; stride: TGLint; order: TGLint; const points: PGLdouble); libdecl;
  glMap1f: procedure (target: TGLenum; u1: TGLfloat; u2: TGLfloat; stride: TGLint; order: TGLint; const points: PGLfloat); libdecl;
  glMap2d: procedure (target: TGLenum; u1: TGLdouble; u2: TGLdouble; ustride: TGLint; uorder: TGLint; v1: TGLdouble; v2: TGLdouble; vstride: TGLint; vorder: TGLint; const points: PGLdouble); libdecl;
  glMap2f: procedure (target: TGLenum; u1: TGLfloat; u2: TGLfloat; ustride: TGLint; uorder: TGLint; v1: TGLfloat; v2: TGLfloat; vstride: TGLint; vorder: TGLint; const points: PGLfloat); libdecl;
  glMapGrid1d: procedure (un: TGLint; u1: TGLdouble; u2: TGLdouble); libdecl;
  glMapGrid1f: procedure (un: TGLint; u1: TGLfloat; u2: TGLfloat); libdecl;
  glMapGrid2d: procedure (un: TGLint; u1: TGLdouble; u2: TGLdouble; vn: TGLint; v1: TGLdouble; v2: TGLdouble); libdecl;
  glMapGrid2f: procedure (un: TGLint; u1: TGLfloat; u2: TGLfloat; vn: TGLint; v1: TGLfloat; v2: TGLfloat); libdecl;
  glMaterialf: procedure (face: TGLenum; pname: TGLenum; param: TGLfloat); libdecl;
  glMaterialfv: procedure (face: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl;
  glMateriali: procedure (face: TGLenum; pname: TGLenum; param: TGLint); libdecl;
  glMaterialiv: procedure (face: TGLenum; pname: TGLenum; const params: PGLint); libdecl;
  glMatrixMode: procedure (mode: TGLenum); libdecl;
  glMultMatrixd: procedure (const m: PGLdouble); libdecl;
  glMultMatrixf: procedure (const m: PGLfloat); libdecl;
  glNewList: procedure (list: TGLuint; mode: TGLenum); libdecl;
  glNormal3b: procedure (nx: TGLbyte; ny: TGLbyte; nz: TGLbyte); libdecl;
  glNormal3bv: procedure (const v: PGLbyte); libdecl;
  glNormal3d: procedure (nx: TGLdouble; ny: TGLdouble; nz: TGLdouble); libdecl;
  glNormal3dv: procedure (const v: PGLdouble); libdecl;
  glNormal3f: procedure (nx: TGLfloat; ny: TGLfloat; nz: TGLfloat); libdecl;
  glNormal3fv: procedure (const v: PGLfloat); libdecl;
  glNormal3i: procedure (nx: TGLint; ny: TGLint; nz: TGLint); libdecl;
  glNormal3iv: procedure (const v: PGLint); libdecl;
  glNormal3s: procedure (nx: TGLshort; ny: TGLshort; nz: TGLshort); libdecl;
  glNormal3sv: procedure (const v: PGLshort); libdecl;
  glNormalPointer: procedure (_type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glOrtho: procedure (left: TGLdouble; right: TGLdouble; bottom: TGLdouble; top: TGLdouble; zNear: TGLdouble; zFar: TGLdouble); libdecl;
  glPassThrough: procedure (token: TGLfloat); libdecl;
  glPixelMapfv: procedure (map: TGLenum; mapsize: TGLsizei; const values: PGLfloat); libdecl;
  glPixelMapuiv: procedure (map: TGLenum; mapsize: TGLsizei; const values: PGLuint); libdecl;
  glPixelMapusv: procedure (map: TGLenum; mapsize: TGLsizei; const values: PGLushort); libdecl;
  glPixelStoref: procedure (pname: TGLenum; param: TGLfloat); libdecl;
  glPixelStorei: procedure (pname: TGLenum; param: TGLint); libdecl;
  glPixelTransferf: procedure (pname: TGLenum; param: TGLfloat); libdecl;
  glPixelTransferi: procedure (pname: TGLenum; param: TGLint); libdecl;
  glPixelZoom: procedure (xfactor: TGLfloat; yfactor: TGLfloat); libdecl;
  glPointSize: procedure (size: TGLfloat); libdecl;
  glPolygonMode: procedure (face: TGLenum; mode: TGLenum); libdecl;
  glPolygonOffset: procedure (factor: TGLfloat; units: TGLfloat); libdecl;
  glPolygonStipple: procedure (const mask: PGLubyte); libdecl;
  glPopAttrib: procedure (); libdecl;
  glPopClientAttrib: procedure (); libdecl;
  glPopMatrix: procedure (); libdecl;
  glPopName: procedure (); libdecl;
  glPrioritizeTextures: procedure (n: TGLsizei; const textures: PGLuint; const priorities: PGLclampf); libdecl;
  glPushAttrib: procedure (mask: TGLbitfield); libdecl;
  glPushClientAttrib: procedure (mask: TGLbitfield); libdecl;
  glPushMatrix: procedure (); libdecl;
  glPushName: procedure (name: TGLuint); libdecl;
  glRasterPos2d: procedure (x: TGLdouble; y: TGLdouble); libdecl;
  glRasterPos2dv: procedure (const v: PGLdouble); libdecl;
  glRasterPos2f: procedure (x: TGLfloat; y: TGLfloat); libdecl;
  glRasterPos2fv: procedure (const v: PGLfloat); libdecl;
  glRasterPos2i: procedure (x: TGLint; y: TGLint); libdecl;
  glRasterPos2iv: procedure (const v: PGLint); libdecl;
  glRasterPos2s: procedure (x: TGLshort; y: TGLshort); libdecl;
  glRasterPos2sv: procedure (const v: PGLshort); libdecl;
  glRasterPos3d: procedure (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl;
  glRasterPos3dv: procedure (const v: PGLdouble); libdecl;
  glRasterPos3f: procedure (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl;
  glRasterPos3fv: procedure (const v: PGLfloat); libdecl;
  glRasterPos3i: procedure (x: TGLint; y: TGLint; z: TGLint); libdecl;
  glRasterPos3iv: procedure (const v: PGLint); libdecl;
  glRasterPos3s: procedure (x: TGLshort; y: TGLshort; z: TGLshort); libdecl;
  glRasterPos3sv: procedure (const v: PGLshort); libdecl;
  glRasterPos4d: procedure (x: TGLdouble; y: TGLdouble; z: TGLdouble; w: TGLdouble); libdecl;
  glRasterPos4dv: procedure (const v: PGLdouble); libdecl;
  glRasterPos4f: procedure (x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); libdecl;
  glRasterPos4fv: procedure (const v: PGLfloat); libdecl;
  glRasterPos4i: procedure (x: TGLint; y: TGLint; z: TGLint; w: TGLint); libdecl;
  glRasterPos4iv: procedure (const v: PGLint); libdecl;
  glRasterPos4s: procedure (x: TGLshort; y: TGLshort; z: TGLshort; w: TGLshort); libdecl;
  glRasterPos4sv: procedure (const v: PGLshort); libdecl;
  glReadBuffer: procedure (mode: TGLenum); libdecl;
  glReadPixels: procedure (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; pixels: PGLvoid); libdecl;
  glRectd: procedure (x1: TGLdouble; y1: TGLdouble; x2: TGLdouble; y2: TGLdouble); libdecl;
  glRectdv: procedure (const v1: PGLdouble; const v2: PGLdouble); libdecl;
  glRectf: procedure (x1: TGLfloat; y1: TGLfloat; x2: TGLfloat; y2: TGLfloat); libdecl;
  glRectfv: procedure (const v1: PGLfloat; const v2: PGLfloat); libdecl;
  glRecti: procedure (x1: TGLint; y1: TGLint; x2: TGLint; y2: TGLint); libdecl;
  glRectiv: procedure (const v1: PGLint; const v2: PGLint); libdecl;
  glRects: procedure (x1: TGLshort; y1: TGLshort; x2: TGLshort; y2: TGLshort); libdecl;
  glRectsv: procedure (const v1: PGLshort; const v2: PGLshort); libdecl;
  glRenderMode: function (mode: TGLenum): TGLint; libdecl;
  glRotated: procedure (angle: TGLdouble; x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl;
  glRotatef: procedure (angle: TGLfloat; x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl;
  glScaled: procedure (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl;
  glScalef: procedure (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl;
  glScissor: procedure (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl;
  glSelectBuffer: procedure (size: TGLsizei; buffer: PGLuint); libdecl;
  glShadeModel: procedure (mode: TGLenum); libdecl;
  glStencilFunc: procedure (func: TGLenum; ref: TGLint; mask: TGLuint); libdecl;
  glStencilMask: procedure (mask: TGLuint); libdecl;
  glStencilOp: procedure (fail: TGLenum; zfail: TGLenum; zpass: TGLenum); libdecl;
  glTexCoord1d: procedure (s: TGLdouble); libdecl;
  glTexCoord1dv: procedure (const v: PGLdouble); libdecl;
  glTexCoord1f: procedure (s: TGLfloat); libdecl;
  glTexCoord1fv: procedure (const v: PGLfloat); libdecl;
  glTexCoord1i: procedure (s: TGLint); libdecl;
  glTexCoord1iv: procedure (const v: PGLint); libdecl;
  glTexCoord1s: procedure (s: TGLshort); libdecl;
  glTexCoord1sv: procedure (const v: PGLshort); libdecl;
  glTexCoord2d: procedure (s: TGLdouble; t: TGLdouble); libdecl;
  glTexCoord2dv: procedure (const v: PGLdouble); libdecl;
  glTexCoord2f: procedure (s: TGLfloat; t: TGLfloat); libdecl;
  glTexCoord2fv: procedure (const v: PGLfloat); libdecl;
  glTexCoord2i: procedure (s: TGLint; t: TGLint); libdecl;
  glTexCoord2iv: procedure (const v: PGLint); libdecl;
  glTexCoord2s: procedure (s: TGLshort; t: TGLshort); libdecl;
  glTexCoord2sv: procedure (const v: PGLshort); libdecl;
  glTexCoord3d: procedure (s: TGLdouble; t: TGLdouble; r: TGLdouble); libdecl;
  glTexCoord3dv: procedure (const v: PGLdouble); libdecl;
  glTexCoord3f: procedure (s: TGLfloat; t: TGLfloat; r: TGLfloat); libdecl;
  glTexCoord3fv: procedure (const v: PGLfloat); libdecl;
  glTexCoord3i: procedure (s: TGLint; t: TGLint; r: TGLint); libdecl;
  glTexCoord3iv: procedure (const v: PGLint); libdecl;
  glTexCoord3s: procedure (s: TGLshort; t: TGLshort; r: TGLshort); libdecl;
  glTexCoord3sv: procedure (const v: PGLshort); libdecl;
  glTexCoord4d: procedure (s: TGLdouble; t: TGLdouble; r: TGLdouble; q: TGLdouble); libdecl;
  glTexCoord4dv: procedure (const v: PGLdouble); libdecl;
  glTexCoord4f: procedure (s: TGLfloat; t: TGLfloat; r: TGLfloat; q: TGLfloat); libdecl;
  glTexCoord4fv: procedure (const v: PGLfloat); libdecl;
  glTexCoord4i: procedure (s: TGLint; t: TGLint; r: TGLint; q: TGLint); libdecl;
  glTexCoord4iv: procedure (const v: PGLint); libdecl;
  glTexCoord4s: procedure (s: TGLshort; t: TGLshort; r: TGLshort; q: TGLshort); libdecl;
  glTexCoord4sv: procedure (const v: PGLshort); libdecl;
  glTexCoordPointer: procedure (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glTexEnvf: procedure (target: TGLenum; pname: TGLenum; param: TGLfloat); libdecl;
  glTexEnvfv: procedure (target: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl;
  glTexEnvi: procedure (target: TGLenum; pname: TGLenum; param: TGLint); libdecl;
  glTexEnviv: procedure (target: TGLenum; pname: TGLenum; const params: PGLint); libdecl;
  glTexGend: procedure (coord: TGLenum; pname: TGLenum; param: TGLdouble); libdecl;
  glTexGendv: procedure (coord: TGLenum; pname: TGLenum; const params: PGLdouble); libdecl;
  glTexGenf: procedure (coord: TGLenum; pname: TGLenum; param: TGLfloat); libdecl;
  glTexGenfv: procedure (coord: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl;
  glTexGeni: procedure (coord: TGLenum; pname: TGLenum; param: TGLint); libdecl;
  glTexGeniv: procedure (coord: TGLenum; pname: TGLenum; const params: PGLint); libdecl;
  glTexImage1D: procedure (target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl;
  glTexImage2D: procedure (target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl;
  glTexParameterf: procedure (target: TGLenum; pname: TGLenum; param: TGLfloat); libdecl;
  glTexParameterfv: procedure (target: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl;
  glTexParameteri: procedure (target: TGLenum; pname: TGLenum; param: TGLint); libdecl;
  glTexParameteriv: procedure (target: TGLenum; pname: TGLenum; const params: PGLint); libdecl;
  glTexSubImage1D: procedure (target: TGLenum; level: TGLint; xoffset: TGLint; width: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl;
  glTexSubImage2D: procedure (target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl;
  glTranslated: procedure (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl;
  glTranslatef: procedure (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl;
  glVertex2d: procedure (x: TGLdouble; y: TGLdouble); libdecl;
  glVertex2dv: procedure (const v: PGLdouble); libdecl;
  glVertex2f: procedure (x: TGLfloat; y: TGLfloat); libdecl;
  glVertex2fv: procedure (const v: PGLfloat); libdecl;
  glVertex2i: procedure (x: TGLint; y: TGLint); libdecl;
  glVertex2iv: procedure (const v: PGLint); libdecl;
  glVertex2s: procedure (x: TGLshort; y: TGLshort); libdecl;
  glVertex2sv: procedure (const v: PGLshort); libdecl;
  glVertex3d: procedure (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl;
  glVertex3dv: procedure (const v: PGLdouble); libdecl;
  glVertex3f: procedure (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl;
  glVertex3fv: procedure (const v: PGLfloat); libdecl;
  glVertex3i: procedure (x: TGLint; y: TGLint; z: TGLint); libdecl;
  glVertex3iv: procedure (const v: PGLint); libdecl;
  glVertex3s: procedure (x: TGLshort; y: TGLshort; z: TGLshort); libdecl;
  glVertex3sv: procedure (const v: PGLshort); libdecl;
  glVertex4d: procedure (x: TGLdouble; y: TGLdouble; z: TGLdouble; w: TGLdouble); libdecl;
  glVertex4dv: procedure (const v: PGLdouble); libdecl;
  glVertex4f: procedure (x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); libdecl;
  glVertex4fv: procedure (const v: PGLfloat); libdecl;
  glVertex4i: procedure (x: TGLint; y: TGLint; z: TGLint; w: TGLint); libdecl;
  glVertex4iv: procedure (const v: PGLint); libdecl;
  glVertex4s: procedure (x: TGLshort; y: TGLshort; z: TGLshort; w: TGLshort); libdecl;
  glVertex4sv: procedure (const v: PGLshort); libdecl;
  glVertexPointer: procedure (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl;
  glViewport: procedure (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl;
{$endif}

//gl 1.2
const
  GL_UNSIGNED_BYTE_3_3_2 = $8032;
  GL_UNSIGNED_SHORT_4_4_4_4 = $8033;
  GL_UNSIGNED_SHORT_5_5_5_1 = $8034;
  GL_UNSIGNED_INT_8_8_8_8 = $8035;
  GL_UNSIGNED_INT_10_10_10_2 = $8036;
  GL_TEXTURE_BINDING_3D = $806A;
  GL_PACK_SKIP_IMAGES = $806B;
  GL_PACK_IMAGE_HEIGHT = $806C;
  GL_UNPACK_SKIP_IMAGES = $806D;
  GL_UNPACK_IMAGE_HEIGHT = $806E;
  GL_TEXTURE_3D = $806F;
  GL_PROXY_TEXTURE_3D = $8070;
  GL_TEXTURE_DEPTH = $8071;
  GL_TEXTURE_WRAP_R = $8072;
  GL_MAX_3D_TEXTURE_SIZE = $8073;
  GL_UNSIGNED_BYTE_2_3_3_REV = $8362;
  GL_UNSIGNED_SHORT_5_6_5 = $8363;
  GL_UNSIGNED_SHORT_5_6_5_REV = $8364;
  GL_UNSIGNED_SHORT_4_4_4_4_REV = $8365;
  GL_UNSIGNED_SHORT_1_5_5_5_REV = $8366;
  GL_UNSIGNED_INT_8_8_8_8_REV = $8367;
  GL_UNSIGNED_INT_2_10_10_10_REV = $8368;
  GL_BGR = $80E0;
  GL_BGRA = $80E1;
  GL_MAX_ELEMENTS_VERTICES = $80E8;
  GL_MAX_ELEMENTS_INDICES = $80E9;
  GL_CLAMP_TO_EDGE = $812F;
  GL_TEXTURE_MIN_LOD = $813A;
  GL_TEXTURE_MAX_LOD = $813B;
  GL_TEXTURE_BASE_LEVEL = $813C;
  GL_TEXTURE_MAX_LEVEL = $813D;
  GL_SMOOTH_POINT_SIZE_RANGE = $0B12;
  GL_SMOOTH_POINT_SIZE_GRANULARITY = $0B13;
  GL_SMOOTH_LINE_WIDTH_RANGE = $0B22;
  GL_SMOOTH_LINE_WIDTH_GRANULARITY = $0B23;
  GL_ALIASED_LINE_WIDTH_RANGE = $846E;

{$ifndef GL_STATIC}
var
  glBlendColor: procedure(red: GLclampf; green: GLclampf; blue: GLclampf; alpha: GLclampf); libdecl;
  glBlendEquation: procedure(mode: GLenum); libdecl;
  glDrawRangeElements: procedure(mode: GLenum; start: GLuint; _end: GLuint; count: GLsizei; _type: GLenum; const indices: PGLvoid); libdecl;
  glTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; _type: GLenum; const pixels: PGLvoid); libdecl;
  glTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); libdecl;
  glCopyTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); libdecl;
{$endif}

//FrameBuffer
const
  GL_FRAMEBUFFER = $8D40;
  GL_RENDERBUFFER = $8D41;
  GL_STENCIL_INDEX0 = $8D45;
  GL_STENCIL_INDEX1 = $8D46;
  GL_STENCIL_INDEX4 = $8D47;
  GL_STENCIL_INDEX8 = $8D48;
  GL_STENCIL_INDEX16 = $8D49;
  GL_RENDERBUFFER_WIDTH = $8D42;
  GL_RENDERBUFFER_HEIGHT = $8D43;
  GL_RENDERBUFFER_INTERNAL_FORMAT = $8D44;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = $8CD0;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = $8CD1;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = $8CD2;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = $8CD3;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET = $8CD4;
  GL_COLOR_ATTACHMENT0 = $8CE0;
  GL_COLOR_ATTACHMENT1 = $8CE1;
  GL_COLOR_ATTACHMENT2 = $8CE2;
  GL_COLOR_ATTACHMENT3 = $8CE3;
  GL_COLOR_ATTACHMENT4 = $8CE4;
  GL_COLOR_ATTACHMENT5 = $8CE5;
  GL_COLOR_ATTACHMENT6 = $8CE6;
  GL_COLOR_ATTACHMENT7 = $8CE7;
  GL_COLOR_ATTACHMENT8 = $8CE8;
  GL_COLOR_ATTACHMENT9 = $8CE9;
  GL_COLOR_ATTACHMENT10 = $8CEA;
  GL_COLOR_ATTACHMENT11 = $8CEB;
  GL_COLOR_ATTACHMENT12 = $8CEC;
  GL_COLOR_ATTACHMENT13 = $8CED;
  GL_COLOR_ATTACHMENT14 = $8CEE;
  GL_COLOR_ATTACHMENT15 = $8CEF;
  GL_DEPTH_ATTACHMENT = $8D00;
  GL_STENCIL_ATTACHMENT = $8D20;
  GL_FRAMEBUFFER_COMPLETE = $8CD5;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = $8CD6;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = $8CD7;
  GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT = $8CD8;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = $8CD9;
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS = $8CDA;
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = $8CDB;
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = $8CDC;
  GL_FRAMEBUFFER_UNSUPPORTED = $8CDD;
  GL_FRAMEBUFFER_STATUS_ERROR = $8CDE;
  GL_FRAMEBUFFER_BINDING = $8CA6;
  GL_RENDERBUFFER_BINDING = $8CA7;
  GL_MAX_COLOR_ATTACHMENTS = $8CDF;
  GL_MAX_RENDERBUFFER_SIZE = $84E8;
  GL_INVALID_FRAMEBUFFER_OPERATION = $0506;

{$ifndef GL_STATIC}
var
  glIsRenderBuffer: function (renderbuffer: TGLuint): Boolean; libdecl;
  glBindRenderBuffer: procedure (target: TGLenum; renderbuffer: TGLuint); libdecl;
  glDeleteRenderBuffers: procedure (n: TGLsizei; const renderbuffers: PGLuint); libdecl;
  glGenRenderBuffers: procedure (n: TGLsizei; renderbuffers: PGLuint); libdecl;
  glRenderBufferStorage: procedure (target: TGLenum; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); libdecl;
  glGetRenderBufferParameteriv: procedure (target: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glIsFrameBuffer: function (framebuffer: TGLuint): Boolean; libdecl;
  glBindFrameBuffer: procedure (target: TGLenum; framebuffer: TGLuint); libdecl;
  glDeleteFrameBuffers: procedure (n: TGLsizei; const framebuffers: PGLuint); libdecl;
  glGenFrameBuffers: procedure (n: TGLsizei; framebuffers: PGLuint); libdecl;
  glCheckFrameBufferStatus: function (target: TGLenum): TGLenum; libdecl;
  glFrameBufferTexture1D: procedure (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); libdecl;
  glFrameBufferTexture2D: procedure (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); libdecl;
  glFrameBufferTexture3D: procedure (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint; zoffset: TGLint); libdecl;
  glFrameBufferRenderbuffer: procedure (target: TGLenum; attachment: TGLenum; renderbuffertarget: TGLenum; renderbuffer: TGLuint); libdecl;
  glGetFrameBufferAttachmentParameteriv: procedure (target: TGLenum; attachment: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glGenerateMipmap: procedure (target: TGLenum); libdecl;
{$endif}

//gl 1.3
const
  GL_TEXTURE0 = $84C0;
  GL_TEXTURE1 = $84C1;
  GL_TEXTURE2 = $84C2;
  GL_TEXTURE3 = $84C3;
  GL_TEXTURE4 = $84C4;
  GL_TEXTURE5 = $84C5;
  GL_TEXTURE6 = $84C6;
  GL_TEXTURE7 = $84C7;
  GL_TEXTURE8 = $84C8;
  GL_TEXTURE9 = $84C9;
  GL_TEXTURE10 = $84CA;
  GL_TEXTURE11 = $84CB;
  GL_TEXTURE12 = $84CC;
  GL_TEXTURE13 = $84CD;
  GL_TEXTURE14 = $84CE;
  GL_TEXTURE15 = $84CF;
  GL_TEXTURE16 = $84D0;
  GL_TEXTURE17 = $84D1;
  GL_TEXTURE18 = $84D2;
  GL_TEXTURE19 = $84D3;
  GL_TEXTURE20 = $84D4;
  GL_TEXTURE21 = $84D5;
  GL_TEXTURE22 = $84D6;
  GL_TEXTURE23 = $84D7;
  GL_TEXTURE24 = $84D8;
  GL_TEXTURE25 = $84D9;
  GL_TEXTURE26 = $84DA;
  GL_TEXTURE27 = $84DB;
  GL_TEXTURE28 = $84DC;
  GL_TEXTURE29 = $84DD;
  GL_TEXTURE30 = $84DE;
  GL_TEXTURE31 = $84DF;
  GL_ACTIVE_TEXTURE = $84E0;
  GL_CLIENT_ACTIVE_TEXTURE = $84E1;
  GL_MAX_TEXTURE_UNITS = $84E2;
  GL_TRANSPOSE_MODELVIEW_MATRIX = $84E3;
  GL_TRANSPOSE_PROJECTION_MATRIX = $84E4;
  GL_TRANSPOSE_TEXTURE_MATRIX = $84E5;
  GL_TRANSPOSE_COLOR_MATRIX = $84E6;
  GL_MULTISAMPLE = $809D;
  GL_SAMPLE_ALPHA_TO_COVERAGE = $809E;
  GL_SAMPLE_ALPHA_TO_ONE = $809F;
  GL_SAMPLE_COVERAGE = $80A0;
  GL_SAMPLE_BUFFERS = $80A8;
  GL_SAMPLES = $80A9;
  GL_SAMPLE_COVERAGE_VALUE = $80AA;
  GL_SAMPLE_COVERAGE_INVERT = $80AB;
  GL_MULTISAMPLE_BIT = $20000000;
  GL_NORMAL_MAP = $8511;
  GL_REFLECTION_MAP = $8512;
  GL_TEXTURE_CUBE_MAP = $8513;
  GL_TEXTURE_BINDING_CUBE_MAP = $8514;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = $8515;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = $8516;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = $8517;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $8518;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = $8519;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $851A;
  GL_PROXY_TEXTURE_CUBE_MAP = $851B;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = $851C;
  GL_COMPRESSED_ALPHA = $84E9;
  GL_COMPRESSED_LUMINANCE = $84EA;
  GL_COMPRESSED_LUMINANCE_ALPHA = $84EB;
  GL_COMPRESSED_INTENSITY = $84EC;
  GL_COMPRESSED_RGB = $84ED;
  GL_COMPRESSED_RGBA = $84EE;
  GL_TEXTURE_COMPRESSION_HINT = $84EF;
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE = $86A0;
  GL_TEXTURE_COMPRESSED = $86A1;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS = $86A2;
  GL_COMPRESSED_TEXTURE_FORMATS = $86A3;
  GL_CLAMP_TO_BORDER = $812D;
  GL_CLAMP_TO_BORDER_SGIS = $812D;
  GL_COMBINE = $8570;
  GL_COMBINE_RGB = $8571;
  GL_COMBINE_ALPHA = $8572;
  GL_SOURCE0_RGB = $8580;
  GL_SOURCE1_RGB = $8581;
  GL_SOURCE2_RGB = $8582;
  GL_SOURCE0_ALPHA = $8588;
  GL_SOURCE1_ALPHA = $8589;
  GL_SOURCE2_ALPHA = $858A;
  GL_OPERAND0_RGB = $8590;
  GL_OPERAND1_RGB = $8591;
  GL_OPERAND2_RGB = $8592;
  GL_OPERAND0_ALPHA = $8598;
  GL_OPERAND1_ALPHA = $8599;
  GL_OPERAND2_ALPHA = $859A;
  GL_RGB_SCALE = $8573;
  GL_ADD_SIGNED = $8574;
  GL_INTERPOLATE = $8575;
  GL_SUBTRACT = $84E7;
  GL_CONSTANT = $8576;
  GL_PRIMARY_COLOR = $8577;
  GL_PREVIOUS = $8578;
  GL_DOT3_RGB = $86AE;
  GL_DOT3_RGBA = $86AF;

{$ifndef GL_STATIC}
var
  glActiveTexture: procedure(texture: TGLenum); libdecl;
  glClientActiveTexture: procedure(texture: TGLenum); libdecl;
  glMultiTexCoord1d: procedure(target: TGLenum; s: TGLdouble); libdecl;
  glMultiTexCoord1dv: procedure(target: TGLenum; const v: PGLdouble); libdecl;
  glMultiTexCoord1f: procedure(target: TGLenum; s: TGLfloat); libdecl;
  glMultiTexCoord1fv: procedure(target: TGLenum; const v: PGLfloat); libdecl;
  glMultiTexCoord1i: procedure(target: TGLenum; s: TGLint); libdecl;
  glMultiTexCoord1iv: procedure(target: TGLenum; const v: PGLint); libdecl;
  glMultiTexCoord1s: procedure(target: TGLenum; s: TGLshort); libdecl;
  glMultiTexCoord1sv: procedure(target: TGLenum; const v: PGLshort); libdecl;
  glMultiTexCoord2d: procedure(target: glenum; s: gldouble; t: gldouble); libdecl;
  glMultiTexCoord2dv: procedure(target: glenum; const v: PGLdouble); libdecl;
  glMultiTexCoord2f: procedure(target: glenum; s: glfloat; t: glfloat); libdecl;
  glMultiTexCoord2fv: procedure(target: glenum; const v: PGLfloat); libdecl;
  glMultiTexCoord2i: procedure(target: glenum; s: glint; t: glint); libdecl;
  glMultiTexCoord2iv: procedure(target: glenum; const v: PGLint); libdecl;
  glMultiTexCoord2s: procedure(target: glenum; s: glshort; t: glshort); libdecl;
  glMultiTexCoord2sv: procedure(target: glenum; const v: PGLshort); libdecl;
  glMultiTexCoord3d: procedure(target: glenum; s: gldouble; t: gldouble; r: gldouble); libdecl;
  glMultiTexCoord3dv: procedure(target: glenum; const v: PGLdouble); libdecl;
  glMultiTexCoord3f: procedure(target: glenum; s: glfloat; t: glfloat; r: glfloat); libdecl;
  glMultiTexCoord3fv: procedure(target: glenum; const v: PGLfloat); libdecl;
  glMultiTexCoord3i: procedure(target: glenum; s: glint; t: glint; r: glint); libdecl;
  glMultiTexCoord3iv: procedure(target: glenum; const v: PGLint); libdecl;
  glMultiTexCoord3s: procedure(target: glenum; s: glshort; t: glshort; r: glshort); libdecl;
  glMultiTexCoord3sv: procedure(target: glenum; const v: PGLshort); libdecl;
  glMultiTexCoord4d: procedure(target: glenum; s: gldouble; t: gldouble; r: gldouble; q: gldouble); libdecl;
  glMultiTexCoord4dv: procedure(target: glenum; const v: PGLdouble); libdecl;
  glMultiTexCoord4f: procedure(target: glenum; s: glfloat; t: glfloat; r: glfloat; q: glfloat); libdecl;
  glMultiTexCoord4fv: procedure(target: glenum; const v: PGLfloat); libdecl;
  glMultiTexCoord4i: procedure(target: glenum; s: glint; t: glint; r: glint; q: glint); libdecl;
  glMultiTexCoord4iv: procedure(target: glenum; const v: PGLint); libdecl;
  glMultiTexCoord4s: procedure(target: glenum; s: glshort; t: glshort; r: glshort; q: glshort); libdecl;
  glMultiTexCoord4sv: procedure(target: glenum; const v: PGLshort); libdecl;
  glLoadTransposeMatrixf: procedure(const m: PGLfloat); libdecl;
  glLoadTransposeMatrixd: procedure(const m: PGLdouble); libdecl;
  glMultTransposeMatrixf: procedure(const m: PGLfloat); libdecl;
  glMultTransposeMatrixd: procedure(const m: PGLdouble); libdecl;
  glSampleCoverage: procedure(value: glclampf; invert: glboolean); libdecl;
  glCompressedTexImage3D: procedure(target: glenum; level: glint; internalformat: glenum; width: glsizei; height: glsizei; depth: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl;
  glCompressedTexImage2D: procedure(target: glenum; level: glint; internalformat: glenum; width: glsizei; height: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl;
  glCompressedTexImage1D: procedure(target: glenum; level: glint; internalformat: glenum; width: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl;
  glCompressedTexSubImage3D: procedure(target: glenum; level: glint; xoffset: glint; yoffset: glint; zoffset: glint; width: glsizei; height: glsizei; depth: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl;
  glCompressedTexSubImage2D: procedure(target: glenum; level: glint; xoffset: glint; yoffset: glint; width: glsizei; height: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl;
  glCompressedTexSubImage1D: procedure(target: glenum; level: glint; xoffset: glint; width: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl;
  glGetCompressedTexImage: procedure(target: TGLenum; level: TGLint; img: PGLvoid); libdecl;
{$endif}

//gl 1.4
const
  GL_BLEND_DST_RGB = $80C8;
  GL_BLEND_SRC_RGB = $80C9;
  GL_BLEND_DST_ALPHA = $80CA;
  GL_BLEND_SRC_ALPHA = $80CB;
  GL_POINT_SIZE_MIN = $8126;
  GL_POINT_SIZE_MAX = $8127;
  GL_POINT_FADE_THRESHOLD_SIZE = $8128;
  GL_POINT_DISTANCE_ATTENUATION = $8129;
  GL_GENERATE_MIPMAP = $8191;
  GL_GENERATE_MIPMAP_HINT = $8192;
  GL_DEPTH_COMPONENT16 = $81A5;
  GL_DEPTH_COMPONENT24 = $81A6;
  GL_DEPTH_COMPONENT32 = $81A7;
  GL_MIRRORED_REPEAT = $8370;
  GL_FOG_COORDINATE_SOURCE = $8450;
  GL_FOG_COORDINATE = $8451;
  GL_FRAGMENT_DEPTH = $8452;
  GL_CURRENT_FOG_COORDINATE = $8453;
  GL_FOG_COORDINATE_ARRAY_TYPE = $8454;
  GL_FOG_COORDINATE_ARRAY_STRIDE = $8455;
  GL_FOG_COORDINATE_ARRAY_POINTER = $8456;
  GL_FOG_COORDINATE_ARRAY = $8457;
  GL_COLOR_SUM = $8458;
  GL_CURRENT_SECONDARY_COLOR = $8459;
  GL_SECONDARY_COLOR_ARRAY_SIZE = $845A;
  GL_SECONDARY_COLOR_ARRAY_TYPE = $845B;
  GL_SECONDARY_COLOR_ARRAY_STRIDE = $845C;
  GL_SECONDARY_COLOR_ARRAY_POINTER = $845D;
  GL_SECONDARY_COLOR_ARRAY = $845E;
  GL_MAX_TEXTURE_LOD_BIAS = $84FD;
  GL_TEXTURE_FILTER_CONTROL = $8500;
  GL_TEXTURE_LOD_BIAS = $8501;
  GL_INCR_WRAP = $8507;
  GL_DECR_WRAP = $8508;
  GL_TEXTURE_DEPTH_SIZE = $884A;
  GL_DEPTH_TEXTURE_MODE = $884B;
  GL_TEXTURE_COMPARE_MODE = $884C;
  GL_TEXTURE_COMPARE_FUNC = $884D;
  GL_COMPARE_R_TO_TEXTURE = $884E;

//gl 1.5
const
  GL_BUFFER_SIZE = $8764;
  GL_BUFFER_USAGE = $8765;
  GL_QUERY_COUNTER_BITS = $8864;
  GL_CURRENT_QUERY = $8865;
  GL_QUERY_RESULT = $8866;
  GL_QUERY_RESULT_AVAILABLE = $8867;
  GL_ARRAY_BUFFER = $8892;
  GL_ELEMENT_ARRAY_BUFFER = $8893;
  GL_ARRAY_BUFFER_BINDING = $8894;
  GL_ELEMENT_ARRAY_BUFFER_BINDING = $8895;
  GL_VERTEX_ARRAY_BUFFER_BINDING = $8896;
  GL_NORMAL_ARRAY_BUFFER_BINDING = $8897;
  GL_COLOR_ARRAY_BUFFER_BINDING = $8898;
  GL_INDEX_ARRAY_BUFFER_BINDING = $8899;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = $889A;
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = $889B;
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = $889C;
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = $889D;
  GL_WEIGHT_ARRAY_BUFFER_BINDING = $889E;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = $889F;
  GL_READ_ONLY = $88B8;
  GL_WRITE_ONLY = $88B9;
  GL_READ_WRITE = $88BA;
  GL_BUFFER_ACCESS = $88BB;
  GL_BUFFER_MAPPED = $88BC;
  GL_BUFFER_MAP_POINTER = $88BD;
  GL_STREAM_DRAW = $88E0;
  GL_STREAM_READ = $88E1;
  GL_STREAM_COPY = $88E2;
  GL_STATIC_DRAW = $88E4;
  GL_STATIC_READ = $88E5;
  GL_STATIC_COPY = $88E6;
  GL_DYNAMIC_DRAW = $88E8;
  GL_DYNAMIC_READ = $88E9;
  GL_DYNAMIC_COPY = $88EA;
  GL_SAMPLES_PASSED = $8914;
  GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
  GL_FOG_COORD = GL_FOG_COORDINATE;
  GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
  GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
  GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
  GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
  GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
  GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
  GL_SRC0_RGB = GL_SOURCE0_RGB;
  GL_SRC1_RGB = GL_SOURCE1_RGB;
  GL_SRC2_RGB = GL_SOURCE2_RGB;
  GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
  GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
  GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;

{$ifndef GL_STATIC}
var
  glGenQueries: procedure(n: GLsizei; ids: PGLuint); libdecl;
  glDeleteQueries: procedure(n: GLsizei; const ids: PGLuint); libdecl;
  glIsQuery: function(id: GLuint): boolean; libdecl;
  glBeginQuery: procedure(target: GLenum; id: GLuint); libdecl;
  glEndQuery: procedure(target: GLenum); libdecl;
  glGetQueryiv: procedure(target, pname: GLenum; params: PGLint); libdecl;
  glGetQueryObjectiv: procedure(id: GLuint; pname: GLenum; params: PGLint); libdecl;
  glGetQueryObjectuiv: procedure(id: GLuint; pname: GLenum; params: PGLuint); libdecl;

  glBindBuffer: procedure(target: TGLenum; buffer: TGLuint); libdecl;
  glDeleteBuffers: procedure(n: TGLsizei; const buffers: PGLuint); libdecl;
  glGenBuffers: procedure(n: TGLsizei; buffers: PGLuint); libdecl;
  glIsBuffer: function(buffer: TGLuint): TGLboolean; libdecl;
  glBufferData: procedure(target: TGLenum; size: TGLsizei; const data: PGLvoid; usage: TGLenum); libdecl;
  glBufferSubData: procedure(target: TGLenum; offset: TGLsizei; size: TGLsizei; const data: PGLvoid); libdecl;
  glGetBufferSubData: procedure(target: TGLenum; offset: TGLsizei; size: TGLsizei; data: PGLvoid); libdecl;
  glMapBuffer: function(target: TGLenum; access: TGLenum): PGLvoid; libdecl;
  glUnmapBuffer: function(target: TGLenum): TGLboolean; libdecl;
  glGetBufferParameteriv: procedure(target: TGLenum; pname: TGLenum; params: PGLint); libdecl;
  glGetBufferPointerv: procedure(target: TGLenum; pname: TGLenum; params: PGLvoid); libdecl;
{$endif}

//gl 2.0
const
  GL_VERTEX_SHADER = $8B31;
  GL_MAX_VERTEX_UNIFORM_COMPONENTS = $8B4A;
  GL_MAX_VARYING_FLOATS = $8B4B;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = $8B4C;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = $8B4D;
  GL_OBJECT_ACTIVE_ATTRIBUTES = $8B89;
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH = $8B8A;
  GL_FRAGMENT_SHADER = $8B30;
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = $8B49;
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT = $8B8B;

type
  GLHandle = Integer;
  PGLHandle = ^GLHandle;
  GLChar = AnsiChar;
  PGLChar = ^GLChar;
  PPGLChar = ^PGLChar;

{$ifndef GL_STATIC}
var
  glBlendEquationSeparate: procedure(modeRGB: GLenum; modeAlpha: GLenum); libdecl;
  glDrawBuffers: procedure(n: GLsizei; const bufs: PGLenum); libdecl;
  glStencilOpSeparate: procedure(face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); libdecl;
  glStencilFuncSeparate: procedure(frontfunc: GLenum; backfunc: GLenum; ref: GLint; mask: GLuint); libdecl;
  glStencilMaskSeparate: procedure(face: GLenum; mask: GLuint); libdecl;
  glAttachShader: procedure(programObj, shaderObj: GLhandle); libdecl;
  glBindAttribLocation: procedure(programObj: GLhandle; index: GLuint; name: PChar); libdecl;
  glCompileShader: procedure(shaderObj: GLhandle); libdecl;
  glCreateProgram: function: GLhandle; libdecl;
  glCreateShader: function(shaderType: GLenum): GLhandle; libdecl;
  glDeleteProgram: procedure(programObj: GLhandle); libdecl;
  glDeleteShader: procedure(shaderObj: GLhandle); libdecl;
  glDetachShader: procedure(programObj, shaderObj: GLhandle); libdecl;
  glDisableVertexAttribArray: procedure(index: GLuint); libdecl;
  glEnableVertexAttribArray: procedure(index: GLuint); libdecl;
  glGetActiveAttrib: procedure(programObj: GLhandle; index: GLuint; maxlength: GLsizei; var length: GLint; var _type: GLenum; name: PChar); libdecl;
  glGetActiveUniform: procedure(programObj: GLhandle; index: GLuint; maxLength: GLsizei; var length: GLsizei; var size: GLint; var _type: GLenum; name: PChar); libdecl;
  glGetAttachedShaders: procedure(programObj: GLhandle; MaxCount: GLsizei; var Count: GLint; shaders: PGLuint); libdecl;
  glGetAttribLocation: function(programObj: GLhandle; char: AnsiString): glint; libdecl;
  glGetProgramiv: procedure(programObj: GLhandle; pname: glenum; params: PGLInt); libdecl;
  glGetProgramInfoLog: procedure(programObj: GLHandle; maxLength: glsizei; var length: GLint; infoLog: PChar); libdecl;
  glGetShaderiv: procedure(shaderObj: GLhandle; pname: glenum; params: PGLInt); libdecl;
  glGetShaderInfoLog: procedure(shaderObj: GLHandle; maxLength: glsizei; var length: glint; infoLog: PChar); libdecl;
  glGetShaderSource: procedure(shaderObj: GLhandle; maxlength: GLsizei; var length: GLsizei; source: PChar); libdecl;
  glGetUniformLocation: function(programObj: GLhandle; const char: PChar): glint; libdecl;
  glGetUniformfv: procedure(programObj: GLhandle; location: GLint; params: PGLfloat); libdecl;
  glGetUniformiv: procedure(programObj: GLhandle; location: GLint; params: PGLInt); libdecl;
  glGetVertexAttribfv: procedure(index: GLuint; pname: GLenum; params: PGLfloat); libdecl;
  glGetVertexAttribiv: procedure(index: GLuint; pname: GLenum; params: PGLint); libdecl;
  glGetVertexAttribPointerv: procedure(index: GLuint; pname: GLenum; _pointer: PGLvoid); libdecl;
  glIsProgram: function(programObj: GLhandle) : glboolean; libdecl;
  glIsShader: function(shaderObj: GLhandle) : glboolean; libdecl;
  glLinkProgram: procedure(programObj: GLHandle); libdecl;
  glShaderSource: procedure(shaderObj: GLHandle; count: glsizei; _string: PPGLChar; lengths: pglint); libdecl;
  glUseProgram: procedure(programObj: GLhandle); libdecl;
  glUniform1f: procedure(location: GLint; v0: GLfloat); libdecl;
  glUniform2f: procedure(location: GLint; v0, v1: GLfloat); libdecl;
  glUniform3f: procedure(location: GLint; v0, v1, v2: GLfloat); libdecl;
  glUniform4f: procedure(location: GLint; v0, v1, v2, v3: GLfloat); libdecl;
  glUniform1i: procedure(location: GLint; v0: GLint); libdecl;
  glUniform2i: procedure(location: GLint; v0, v1: GLint); libdecl;
  glUniform3i: procedure(location: GLint; v0, v1, v2: GLint); libdecl;
  glUniform4i: procedure(location: GLint; v0, v1, v2, v3: GLint); libdecl;
  glUniform1fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); libdecl;
  glUniform2fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); libdecl;
  glUniform3fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); libdecl;
  glUniform4fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); libdecl;
  glUniform1iv: procedure(location: GLint; count: GLsizei; value: PGLint); libdecl;
  glUniform2iv: procedure(location: GLint; count: GLsizei; value: PGLint); libdecl;
  glUniform3iv: procedure(location: GLint; count: GLsizei; value: PGLint); libdecl;
  glUniform4iv: procedure(location: GLint; count: GLsizei; value: PGLint); libdecl;
  glUniformMatrix2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl;
  glUniformMatrix3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl;
  glUniformMatrix4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl;
  glValidateProgram: procedure(programObj: GLhandle); libdecl;
  glVertexAttrib1d: procedure(index: GLuint; x: GLdouble); libdecl;
  glVertexAttrib1dv: procedure(index: GLuint; const v: PGLdouble); libdecl;
  glVertexAttrib1f: procedure(index: GLuint; x: GLfloat); libdecl;
  glVertexAttrib1fv: procedure(index: GLuint; const v: PGLfloat); libdecl;
  glVertexAttrib1s: procedure(index: GLuint; x: GLshort); libdecl;
  glVertexAttrib1sv: procedure(index: GLuint; const v: PGLshort); libdecl;
  glVertexAttrib2d: procedure(index: GLuint; x: GLdouble; y: GLdouble); libdecl;
  glVertexAttrib2dv: procedure(index: GLuint; const v: PGLdouble); libdecl;
  glVertexAttrib2f: procedure(index: GLuint; x: GLfloat; y: GLfloat); libdecl;
  glVertexAttrib2fv: procedure(index: GLuint; const v: PGLfloat); libdecl;
  glVertexAttrib2s: procedure(index: GLuint; x: GLshort; y: GLshort); libdecl;
  glVertexAttrib2sv: procedure(index: GLuint; const v: PGLshort); libdecl;
  glVertexAttrib3d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); libdecl;
  glVertexAttrib3dv: procedure(index: GLuint; const v: PGLdouble); libdecl;
  glVertexAttrib3f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); libdecl;
  glVertexAttrib3fv: procedure(index: GLuint; const v: PGLfloat); libdecl;
  glVertexAttrib3s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); libdecl;
  glVertexAttrib3sv: procedure(index: GLuint; const v: PGLshort); libdecl;
  glVertexAttrib4Nbv: procedure(index: GLuint; const v: PGLbyte); libdecl;
  glVertexAttrib4Niv: procedure(index: GLuint; const v: PGLint); libdecl;
  glVertexAttrib4Nsv: procedure(index: GLuint; const v: PGLshort); libdecl;
  glVertexAttrib4Nub: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); libdecl;
  glVertexAttrib4Nubv: procedure(index: GLuint; const v: PGLubyte); libdecl;
  glVertexAttrib4Nuiv: procedure(index: GLuint; const v: PGLuint); libdecl;
  glVertexAttrib4Nusv: procedure(index: GLuint; const v: PGLushort); libdecl;
  glVertexAttrib4bv: procedure(index: GLuint; const v: PGLbyte); libdecl;
  glVertexAttrib4d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); libdecl;
  glVertexAttrib4dv: procedure(index: GLuint; const v: PGLdouble); libdecl;
  glVertexAttrib4f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); libdecl;
  glVertexAttrib4fv: procedure(index: GLuint; const v: PGLfloat); libdecl;
  glVertexAttrib4iv: procedure(index: GLuint; const v: PGLint); libdecl;
  glVertexAttrib4s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); libdecl;
  glVertexAttrib4sv: procedure(index: GLuint; const v: PGLshort); libdecl;
  glVertexAttrib4ubv: procedure(index: GLuint; const v: PGLubyte); libdecl;
  glVertexAttrib4uiv: procedure(index: GLuint; const v: PGLuint); libdecl;
  glVertexAttrib4usv: procedure(index: GLuint; const v: PGLushort); libdecl;
  glVertexAttribPointer: procedure(index: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; stride: GLsizei; const _pointer: PGLvoid); libdecl;
{$endif}

//BlendFincSeparate
{$ifndef GL_STATIC}
  glBlendFuncSeparate: procedure(sfactorRGB: TGLenum; dfactorRGB: TGLenum; sfactorAlpha: TGLenum; dfactorAlpha: TGLenum); libdecl;
{$endif}

{$ifdef GL_STATIC}
  {$linkframework opengl}
  procedure glAccum (op: TGLenum; value: TGLfloat); libdecl; external;
  procedure glAlphaFunc (func: TGLenum; ref: TGLclampf); libdecl; external;
  function glAreTexturesResident (n: TGLsizei; const textures: PGLuint; residences: PGLboolean): TGLboolean; libdecl; external;
  procedure glArrayElement (i: TGLint); libdecl; external;
  procedure glBegin (mode: TGLenum); libdecl; external;
  procedure glBindTexture (target: TGLenum; texture: TGLuint); libdecl; external;
  procedure glBitmap (width: TGLsizei; height: TGLsizei; xorig: TGLfloat; yorig: TGLfloat; xmove: TGLfloat; ymove: TGLfloat; const bitmap: PGLubyte); libdecl; external;
  procedure glBlendFunc (sfactor: TGLenum; dfactor: TGLenum); libdecl; external;
  procedure glCallList (list: TGLuint); libdecl; external;
  procedure glCallLists (n: TGLsizei; _type: TGLenum; const lists: PGLvoid); libdecl; external;
  procedure glClear (mask: TGLbitfield); libdecl; external;
  procedure glClearAccum (red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); libdecl; external;
  procedure glClearColor (red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf); libdecl; external;
  procedure glClearDepth (depth: TGLclampd); libdecl; external;
  procedure glClearIndex (c: TGLfloat); libdecl; external;
  procedure glClearStencil (s: TGLint); libdecl; external;
  procedure glClipPlane (plane: TGLenum; const equation: PGLdouble); libdecl; external;
  procedure glColor3b (red: TGLbyte; green: TGLbyte; blue: TGLbyte); libdecl; external;
  procedure glColor3bv (const v: PGLbyte); libdecl; external;
  procedure glColor3d (red: TGLdouble; green: TGLdouble; blue: TGLdouble); libdecl; external;
  procedure glColor3dv (const v: PGLdouble); libdecl; external;
  procedure glColor3f (red: TGLfloat; green: TGLfloat; blue: TGLfloat); libdecl; external;
  procedure glColor3fv (const v: PGLfloat); libdecl; external;
  procedure glColor3i (red: TGLint; green: TGLint; blue: TGLint); libdecl; external;
  procedure glColor3iv (const v: PGLint); libdecl; external;
  procedure glColor3s (red: TGLshort; green: TGLshort; blue: TGLshort); libdecl; external;
  procedure glColor3sv (const v: PGLshort); libdecl; external;
  procedure glColor3ub (red: TGLubyte; green: TGLubyte; blue: TGLubyte); libdecl; external;
  procedure glColor3ubv (const v: PGLubyte); libdecl; external;
  procedure glColor3ui (red: TGLuint; green: TGLuint; blue: TGLuint); libdecl; external;
  procedure glColor3uiv (const v: PGLuint); libdecl; external;
  procedure glColor3us (red: TGLushort; green: TGLushort; blue: TGLushort); libdecl; external;
  procedure glColor3usv (const v: PGLushort); libdecl; external;
  procedure glColor4b (red: TGLbyte; green: TGLbyte; blue: TGLbyte; alpha: TGLbyte); libdecl; external;
  procedure glColor4bv (const v: PGLbyte); libdecl; external;
  procedure glColor4d (red: TGLdouble; green: TGLdouble; blue: TGLdouble; alpha: TGLdouble); libdecl; external;
  procedure glColor4dv (const v: PGLdouble); libdecl; external;
  procedure glColor4f (red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); libdecl; external;
  procedure glColor4fv (const v: PGLfloat); libdecl; external;
  procedure glColor4i (red: TGLint; green: TGLint; blue: TGLint; alpha: TGLint); libdecl; external;
  procedure glColor4iv (const v: PGLint); libdecl; external;
  procedure glColor4s (red: TGLshort; green: TGLshort; blue: TGLshort; alpha: TGLshort); libdecl; external;
  procedure glColor4sv (const v: PGLshort); libdecl; external;
  procedure glColor4ub (red: TGLubyte; green: TGLubyte; blue: TGLubyte; alpha: TGLubyte); libdecl; external;
  procedure glColor4ubv (const v: PGLubyte); libdecl; external;
  procedure glColor4ui (red: TGLuint; green: TGLuint; blue: TGLuint; alpha: TGLuint); libdecl; external;
  procedure glColor4uiv (const v: PGLuint); libdecl; external;
  procedure glColor4us (red: TGLushort; green: TGLushort; blue: TGLushort; alpha: TGLushort); libdecl; external;
  procedure glColor4usv (const v: PGLushort); libdecl; external;
  procedure glColorMask (red: TGLboolean; green: TGLboolean; blue: TGLboolean; alpha: TGLboolean); libdecl; external;
  procedure glColorMaterial (face: TGLenum; mode: TGLenum); libdecl; external;
  procedure glColorPointer (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  procedure glCopyPixels (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; _type: TGLenum); libdecl; external;
  procedure glCopyTexImage1D (target: TGLenum; level: TGLint; internalFormat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; border: TGLint); libdecl; external;
  procedure glCopyTexImage2D (target: TGLenum; level: TGLint; internalFormat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint); libdecl; external;
  procedure glCopyTexSubImage1D (target: TGLenum; level: TGLint; xoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei); libdecl; external;
  procedure glCopyTexSubImage2D (target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl; external;
  procedure glCullFace (mode: TGLenum); libdecl; external;
  procedure glDeleteLists (list: TGLuint; range: TGLsizei); libdecl; external;
  procedure glDeleteTextures (n: TGLsizei; const textures: PGLuint); libdecl; external;
  procedure glDepthFunc (func: TGLenum); libdecl; external;
  procedure glDepthMask (flag: TGLboolean); libdecl; external;
  procedure glDepthRange (zNear: TGLclampd; zFar: TGLclampd); libdecl; external;
  procedure glDisable (cap: TGLenum); libdecl; external;
  procedure glDisableClientState (_array: TGLenum); libdecl; external;
  procedure glDrawArrays (mode: TGLenum; first: TGLint; count: TGLsizei); libdecl; external;
  procedure glDrawBuffer (mode: TGLenum); libdecl; external;
  procedure glDrawElements (mode: TGLenum; count: TGLsizei; _type: TGLenum; const indices: PGLvoid); libdecl; external;
  procedure glDrawPixels (width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; external;
  procedure glEdgeFlag (flag: TGLboolean); libdecl; external;
  procedure glEdgeFlagPointer (stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  procedure glEdgeFlagv (const flag: PGLboolean); libdecl; external;
  procedure glEnable (cap: TGLenum); libdecl; external;
  procedure glEnableClientState (_array: TGLenum); libdecl; external;
  procedure glEnd (); libdecl; external;
  procedure glEndList (); libdecl; external;
  procedure glEvalCoord1d (u: TGLdouble); libdecl; external;
  procedure glEvalCoord1dv (const u: PGLdouble); libdecl; external;
  procedure glEvalCoord1f (u: TGLfloat); libdecl; external;
  procedure glEvalCoord1fv (const u: PGLfloat); libdecl; external;
  procedure glEvalCoord2d (u: TGLdouble; v: TGLdouble); libdecl; external;
  procedure glEvalCoord2dv (const u: PGLdouble); libdecl; external;
  procedure glEvalCoord2f (u: TGLfloat; v: TGLfloat); libdecl; external;
  procedure glEvalCoord2fv (const u: PGLfloat); libdecl; external;
  procedure glEvalMesh1 (mode: TGLenum; i1: TGLint; i2: TGLint); libdecl; external;
  procedure glEvalMesh2 (mode: TGLenum; i1: TGLint; i2: TGLint; j1: TGLint; j2: TGLint); libdecl; external;
  procedure glEvalPoint1 (i: TGLint); libdecl; external;
  procedure glEvalPoint2 (i: TGLint; j: TGLint); libdecl; external;
  procedure glFeedbackBuffer (size: TGLsizei; _type: TGLenum; buffer: PGLfloat); libdecl; external;
  procedure glFinish (); libdecl; external;
  procedure glFlush (); libdecl; external;
  procedure glFogf (pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glFogfv (pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glFogi (pname: TGLenum; param: TGLint); libdecl; external;
  procedure glFogiv (pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glFrontFace (mode: TGLenum); libdecl; external;
  procedure glFrustum (left: TGLdouble; right: TGLdouble; bottom: TGLdouble; top: TGLdouble; zNear: TGLdouble; zFar: TGLdouble); libdecl; external;
  function glGenLists (range: TGLsizei): TGLuint; libdecl; external;
  procedure glGenTextures (n: TGLsizei; textures: PGLuint); libdecl; external;
  procedure glGetBooleanv (pname: TGLenum; params: PGLboolean); libdecl; external;
  procedure glGetClipPlane (plane: TGLenum; equation: PGLdouble); libdecl; external;
  procedure glGetDoublev (pname: TGLenum; params: PGLdouble); libdecl; external;
  function glGetError (): TGLenum; libdecl; external;
  procedure glGetFloatv (pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetIntegerv (pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetLightfv (light: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetLightiv (light: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetMapdv (target: TGLenum; query: TGLenum; v: PGLdouble); libdecl; external;
  procedure glGetMapfv (target: TGLenum; query: TGLenum; v: PGLfloat); libdecl; external;
  procedure glGetMapiv (target: TGLenum; query: TGLenum; v: PGLint); libdecl; external;
  procedure glGetMaterialfv (face: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetMaterialiv (face: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetPixelMapfv (map: TGLenum; values: PGLfloat); libdecl; external;
  procedure glGetPixelMapuiv (map: TGLenum; values: PGLuint); libdecl; external;
  procedure glGetPixelMapusv (map: TGLenum; values: PGLushort); libdecl; external;
  procedure glGetPointerv (pname: TGLenum; params: PGLvoid); libdecl; external;
  procedure glGetPolygonStipple (mask: PGLubyte); libdecl; external;
  function glGetString (name: TGLenum): PAnsiChar; libdecl; external;
  procedure glGetTexEnvfv (target: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetTexEnviv (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetTexGendv (coord: TGLenum; pname: TGLenum; params: PGLdouble); libdecl; external;
  procedure glGetTexGenfv (coord: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetTexGeniv (coord: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetTexImage (target: TGLenum; level: TGLint; format: TGLenum; _type: TGLenum; pixels: PGLvoid); libdecl; external;
  procedure glGetTexLevelParameterfv (target: TGLenum; level: TGLint; pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetTexLevelParameteriv (target: TGLenum; level: TGLint; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetTexParameterfv (target: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; external;
  procedure glGetTexParameteriv (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glHint (target: TGLenum; mode: TGLenum); libdecl; external;
  procedure glIndexMask (mask: TGLuint); libdecl; external;
  procedure glIndexPointer (_type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  procedure glIndexd (c: TGLdouble); libdecl; external;
  procedure glIndexdv (const c: PGLdouble); libdecl; external;
  procedure glIndexf (c: TGLfloat); libdecl; external;
  procedure glIndexfv (const c: PGLfloat); libdecl; external;
  procedure glIndexi (c: TGLint); libdecl; external;
  procedure glIndexiv (const c: PGLint); libdecl; external;
  procedure glIndexs (c: TGLshort); libdecl; external;
  procedure glIndexsv (const c: PGLshort); libdecl; external;
  procedure glIndexub (c: TGLubyte); libdecl; external;
  procedure glIndexubv (const c: PGLubyte); libdecl; external;
  procedure glInitNames (); libdecl; external;
  procedure glInterleavedArrays (format: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  function glIsEnabled (cap: TGLenum): TGLboolean; libdecl; external;
  function glIsList (list: TGLuint): TGLboolean; libdecl; external;
  function glIsTexture (texture: TGLuint): TGLboolean; libdecl; external;
  procedure glLightModelf (pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glLightModelfv (pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glLightModeli (pname: TGLenum; param: TGLint); libdecl; external;
  procedure glLightModeliv (pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glLightf (light: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glLightfv (light: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glLighti (light: TGLenum; pname: TGLenum; param: TGLint); libdecl; external;
  procedure glLightiv (light: TGLenum; pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glLineStipple (factor: TGLint; pattern: TGLushort); libdecl; external;
  procedure glLineWidth (width: TGLfloat); libdecl; external;
  procedure glListBase (base: TGLuint); libdecl; external;
  procedure glLoadIdentity (); libdecl; external;
  procedure glLoadMatrixd (const m: PGLdouble); libdecl; external;
  procedure glLoadMatrixf (const m: PGLfloat); libdecl; external;
  procedure glLoadName (name: TGLuint); libdecl; external;
  procedure glLogicOp (opcode: TGLenum); libdecl; external;
  procedure glMap1d (target: TGLenum; u1: TGLdouble; u2: TGLdouble; stride: TGLint; order: TGLint; const points: PGLdouble); libdecl; external;
  procedure glMap1f (target: TGLenum; u1: TGLfloat; u2: TGLfloat; stride: TGLint; order: TGLint; const points: PGLfloat); libdecl; external;
  procedure glMap2d (target: TGLenum; u1: TGLdouble; u2: TGLdouble; ustride: TGLint; uorder: TGLint; v1: TGLdouble; v2: TGLdouble; vstride: TGLint; vorder: TGLint; const points: PGLdouble); libdecl; external;
  procedure glMap2f (target: TGLenum; u1: TGLfloat; u2: TGLfloat; ustride: TGLint; uorder: TGLint; v1: TGLfloat; v2: TGLfloat; vstride: TGLint; vorder: TGLint; const points: PGLfloat); libdecl; external;
  procedure glMapGrid1d (un: TGLint; u1: TGLdouble; u2: TGLdouble); libdecl; external;
  procedure glMapGrid1f (un: TGLint; u1: TGLfloat; u2: TGLfloat); libdecl; external;
  procedure glMapGrid2d (un: TGLint; u1: TGLdouble; u2: TGLdouble; vn: TGLint; v1: TGLdouble; v2: TGLdouble); libdecl; external;
  procedure glMapGrid2f (un: TGLint; u1: TGLfloat; u2: TGLfloat; vn: TGLint; v1: TGLfloat; v2: TGLfloat); libdecl; external;
  procedure glMaterialf (face: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glMaterialfv (face: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glMateriali (face: TGLenum; pname: TGLenum; param: TGLint); libdecl; external;
  procedure glMaterialiv (face: TGLenum; pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glMatrixMode (mode: TGLenum); libdecl; external;
  procedure glMultMatrixd (const m: PGLdouble); libdecl; external;
  procedure glMultMatrixf (const m: PGLfloat); libdecl; external;
  procedure glNewList (list: TGLuint; mode: TGLenum); libdecl; external;
  procedure glNormal3b (nx: TGLbyte; ny: TGLbyte; nz: TGLbyte); libdecl; external;
  procedure glNormal3bv (const v: PGLbyte); libdecl; external;
  procedure glNormal3d (nx: TGLdouble; ny: TGLdouble; nz: TGLdouble); libdecl; external;
  procedure glNormal3dv (const v: PGLdouble); libdecl; external;
  procedure glNormal3f (nx: TGLfloat; ny: TGLfloat; nz: TGLfloat); libdecl; external;
  procedure glNormal3fv (const v: PGLfloat); libdecl; external;
  procedure glNormal3i (nx: TGLint; ny: TGLint; nz: TGLint); libdecl; external;
  procedure glNormal3iv (const v: PGLint); libdecl; external;
  procedure glNormal3s (nx: TGLshort; ny: TGLshort; nz: TGLshort); libdecl; external;
  procedure glNormal3sv (const v: PGLshort); libdecl; external;
  procedure glNormalPointer (_type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  procedure glOrtho (left: TGLdouble; right: TGLdouble; bottom: TGLdouble; top: TGLdouble; zNear: TGLdouble; zFar: TGLdouble); libdecl; external;
  procedure glPassThrough (token: TGLfloat); libdecl; external;
  procedure glPixelMapfv (map: TGLenum; mapsize: TGLsizei; const values: PGLfloat); libdecl; external;
  procedure glPixelMapuiv (map: TGLenum; mapsize: TGLsizei; const values: PGLuint); libdecl; external;
  procedure glPixelMapusv (map: TGLenum; mapsize: TGLsizei; const values: PGLushort); libdecl; external;
  procedure glPixelStoref (pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glPixelStorei (pname: TGLenum; param: TGLint); libdecl; external;
  procedure glPixelTransferf (pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glPixelTransferi (pname: TGLenum; param: TGLint); libdecl; external;
  procedure glPixelZoom (xfactor: TGLfloat; yfactor: TGLfloat); libdecl; external;
  procedure glPointSize (size: TGLfloat); libdecl; external;
  procedure glPolygonMode (face: TGLenum; mode: TGLenum); libdecl; external;
  procedure glPolygonOffset (factor: TGLfloat; units: TGLfloat); libdecl; external;
  procedure glPolygonStipple (const mask: PGLubyte); libdecl; external;
  procedure glPopAttrib (); libdecl; external;
  procedure glPopClientAttrib (); libdecl; external;
  procedure glPopMatrix (); libdecl; external;
  procedure glPopName (); libdecl; external;
  procedure glPrioritizeTextures (n: TGLsizei; const textures: PGLuint; const priorities: PGLclampf); libdecl; external;
  procedure glPushAttrib (mask: TGLbitfield); libdecl; external;
  procedure glPushClientAttrib (mask: TGLbitfield); libdecl; external;
  procedure glPushMatrix (); libdecl; external;
  procedure glPushName (name: TGLuint); libdecl; external;
  procedure glRasterPos2d (x: TGLdouble; y: TGLdouble); libdecl; external;
  procedure glRasterPos2dv (const v: PGLdouble); libdecl; external;
  procedure glRasterPos2f (x: TGLfloat; y: TGLfloat); libdecl; external;
  procedure glRasterPos2fv (const v: PGLfloat); libdecl; external;
  procedure glRasterPos2i (x: TGLint; y: TGLint); libdecl; external;
  procedure glRasterPos2iv (const v: PGLint); libdecl; external;
  procedure glRasterPos2s (x: TGLshort; y: TGLshort); libdecl; external;
  procedure glRasterPos2sv (const v: PGLshort); libdecl; external;
  procedure glRasterPos3d (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; external;
  procedure glRasterPos3dv (const v: PGLdouble); libdecl; external;
  procedure glRasterPos3f (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; external;
  procedure glRasterPos3fv (const v: PGLfloat); libdecl; external;
  procedure glRasterPos3i (x: TGLint; y: TGLint; z: TGLint); libdecl; external;
  procedure glRasterPos3iv (const v: PGLint); libdecl; external;
  procedure glRasterPos3s (x: TGLshort; y: TGLshort; z: TGLshort); libdecl; external;
  procedure glRasterPos3sv (const v: PGLshort); libdecl; external;
  procedure glRasterPos4d (x: TGLdouble; y: TGLdouble; z: TGLdouble; w: TGLdouble); libdecl; external;
  procedure glRasterPos4dv (const v: PGLdouble); libdecl; external;
  procedure glRasterPos4f (x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); libdecl; external;
  procedure glRasterPos4fv (const v: PGLfloat); libdecl; external;
  procedure glRasterPos4i (x: TGLint; y: TGLint; z: TGLint; w: TGLint); libdecl; external;
  procedure glRasterPos4iv (const v: PGLint); libdecl; external;
  procedure glRasterPos4s (x: TGLshort; y: TGLshort; z: TGLshort; w: TGLshort); libdecl; external;
  procedure glRasterPos4sv (const v: PGLshort); libdecl; external;
  procedure glReadBuffer (mode: TGLenum); libdecl; external;
  procedure glReadPixels (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; pixels: PGLvoid); libdecl; external;
  procedure glRectd (x1: TGLdouble; y1: TGLdouble; x2: TGLdouble; y2: TGLdouble); libdecl; external;
  procedure glRectdv (const v1: PGLdouble; const v2: PGLdouble); libdecl; external;
  procedure glRectf (x1: TGLfloat; y1: TGLfloat; x2: TGLfloat; y2: TGLfloat); libdecl; external;
  procedure glRectfv (const v1: PGLfloat; const v2: PGLfloat); libdecl; external;
  procedure glRecti (x1: TGLint; y1: TGLint; x2: TGLint; y2: TGLint); libdecl; external;
  procedure glRectiv (const v1: PGLint; const v2: PGLint); libdecl; external;
  procedure glRects (x1: TGLshort; y1: TGLshort; x2: TGLshort; y2: TGLshort); libdecl; external;
  procedure glRectsv (const v1: PGLshort; const v2: PGLshort); libdecl; external;
  function glRenderMode (mode: TGLenum): TGLint; libdecl; external;
  procedure glRotated (angle: TGLdouble; x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; external;
  procedure glRotatef (angle: TGLfloat; x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; external;
  procedure glScaled (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; external;
  procedure glScalef (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; external;
  procedure glScissor (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl; external;
  procedure glSelectBuffer (size: TGLsizei; buffer: PGLuint); libdecl; external;
  procedure glShadeModel (mode: TGLenum); libdecl; external;
  procedure glStencilFunc (func: TGLenum; ref: TGLint; mask: TGLuint); libdecl; external;
  procedure glStencilMask (mask: TGLuint); libdecl; external;
  procedure glStencilOp (fail: TGLenum; zfail: TGLenum; zpass: TGLenum); libdecl; external;
  procedure glTexCoord1d (s: TGLdouble); libdecl; external;
  procedure glTexCoord1dv (const v: PGLdouble); libdecl; external;
  procedure glTexCoord1f (s: TGLfloat); libdecl; external;
  procedure glTexCoord1fv (const v: PGLfloat); libdecl; external;
  procedure glTexCoord1i (s: TGLint); libdecl; external;
  procedure glTexCoord1iv (const v: PGLint); libdecl; external;
  procedure glTexCoord1s (s: TGLshort); libdecl; external;
  procedure glTexCoord1sv (const v: PGLshort); libdecl; external;
  procedure glTexCoord2d (s: TGLdouble; t: TGLdouble); libdecl; external;
  procedure glTexCoord2dv (const v: PGLdouble); libdecl; external;
  procedure glTexCoord2f (s: TGLfloat; t: TGLfloat); libdecl; external;
  procedure glTexCoord2fv (const v: PGLfloat); libdecl; external;
  procedure glTexCoord2i (s: TGLint; t: TGLint); libdecl; external;
  procedure glTexCoord2iv (const v: PGLint); libdecl; external;
  procedure glTexCoord2s (s: TGLshort; t: TGLshort); libdecl; external;
  procedure glTexCoord2sv (const v: PGLshort); libdecl; external;
  procedure glTexCoord3d (s: TGLdouble; t: TGLdouble; r: TGLdouble); libdecl; external;
  procedure glTexCoord3dv (const v: PGLdouble); libdecl; external;
  procedure glTexCoord3f (s: TGLfloat; t: TGLfloat; r: TGLfloat); libdecl; external;
  procedure glTexCoord3fv (const v: PGLfloat); libdecl; external;
  procedure glTexCoord3i (s: TGLint; t: TGLint; r: TGLint); libdecl; external;
  procedure glTexCoord3iv (const v: PGLint); libdecl; external;
  procedure glTexCoord3s (s: TGLshort; t: TGLshort; r: TGLshort); libdecl; external;
  procedure glTexCoord3sv (const v: PGLshort); libdecl; external;
  procedure glTexCoord4d (s: TGLdouble; t: TGLdouble; r: TGLdouble; q: TGLdouble); libdecl; external;
  procedure glTexCoord4dv (const v: PGLdouble); libdecl; external;
  procedure glTexCoord4f (s: TGLfloat; t: TGLfloat; r: TGLfloat; q: TGLfloat); libdecl; external;
  procedure glTexCoord4fv (const v: PGLfloat); libdecl; external;
  procedure glTexCoord4i (s: TGLint; t: TGLint; r: TGLint; q: TGLint); libdecl; external;
  procedure glTexCoord4iv (const v: PGLint); libdecl; external;
  procedure glTexCoord4s (s: TGLshort; t: TGLshort; r: TGLshort; q: TGLshort); libdecl; external;
  procedure glTexCoord4sv (const v: PGLshort); libdecl; external;
  procedure glTexCoordPointer (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  procedure glTexEnvf (target: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glTexEnvfv (target: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glTexEnvi (target: TGLenum; pname: TGLenum; param: TGLint); libdecl; external;
  procedure glTexEnviv (target: TGLenum; pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glTexGend (coord: TGLenum; pname: TGLenum; param: TGLdouble); libdecl; external;
  procedure glTexGendv (coord: TGLenum; pname: TGLenum; const params: PGLdouble); libdecl; external;
  procedure glTexGenf (coord: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glTexGenfv (coord: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glTexGeni (coord: TGLenum; pname: TGLenum; param: TGLint); libdecl; external;
  procedure glTexGeniv (coord: TGLenum; pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glTexImage1D (target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; external;
  procedure glTexImage2D (target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; external;
  procedure glTexParameterf (target: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; external;
  procedure glTexParameterfv (target: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; external;
  procedure glTexParameteri (target: TGLenum; pname: TGLenum; param: TGLint); libdecl; external;
  procedure glTexParameteriv (target: TGLenum; pname: TGLenum; const params: PGLint); libdecl; external;
  procedure glTexSubImage1D (target: TGLenum; level: TGLint; xoffset: TGLint; width: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; external;
  procedure glTexSubImage2D (target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; external;
  procedure glTranslated (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; external;
  procedure glTranslatef (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; external;
  procedure glVertex2d (x: TGLdouble; y: TGLdouble); libdecl; external;
  procedure glVertex2dv (const v: PGLdouble); libdecl; external;
  procedure glVertex2f (x: TGLfloat; y: TGLfloat); libdecl; external;
  procedure glVertex2fv (const v: PGLfloat); libdecl; external;
  procedure glVertex2i (x: TGLint; y: TGLint); libdecl; external;
  procedure glVertex2iv (const v: PGLint); libdecl; external;
  procedure glVertex2s (x: TGLshort; y: TGLshort); libdecl; external;
  procedure glVertex2sv (const v: PGLshort); libdecl; external;
  procedure glVertex3d (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; external;
  procedure glVertex3dv (const v: PGLdouble); libdecl; external;
  procedure glVertex3f (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; external;
  procedure glVertex3fv (const v: PGLfloat); libdecl; external;
  procedure glVertex3i (x: TGLint; y: TGLint; z: TGLint); libdecl; external;
  procedure glVertex3iv (const v: PGLint); libdecl; external;
  procedure glVertex3s (x: TGLshort; y: TGLshort; z: TGLshort); libdecl; external;
  procedure glVertex3sv (const v: PGLshort); libdecl; external;
  procedure glVertex4d (x: TGLdouble; y: TGLdouble; z: TGLdouble; w: TGLdouble); libdecl; external;
  procedure glVertex4dv (const v: PGLdouble); libdecl; external;
  procedure glVertex4f (x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); libdecl; external;
  procedure glVertex4fv (const v: PGLfloat); libdecl; external;
  procedure glVertex4i (x: TGLint; y: TGLint; z: TGLint; w: TGLint); libdecl; external;
  procedure glVertex4iv (const v: PGLint); libdecl; external;
  procedure glVertex4s (x: TGLshort; y: TGLshort; z: TGLshort; w: TGLshort); libdecl; external;
  procedure glVertex4sv (const v: PGLshort); libdecl; external;
  procedure glVertexPointer (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; external;
  procedure glViewport (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl; external;

  function glIsRenderbuffer (renderbuffer: TGLuint): Boolean; libdecl; external;
  procedure glBindRenderbuffer (target: TGLenum; renderbuffer: TGLuint); libdecl; external;
  procedure glDeleteRenderbuffers (n: TGLsizei; const renderbuffers: PGLuint); libdecl; external;
  procedure glGenRenderbuffers (n: TGLsizei; renderbuffers: PGLuint); libdecl; external;
  procedure glRenderbufferStorage (target: TGLenum; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); libdecl; external;
  procedure glGetRenderbufferParameteriv (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  function glIsFramebuffer (framebuffer: TGLuint): Boolean; libdecl; external;
  procedure glBindFramebuffer (target: TGLenum; framebuffer: TGLuint); libdecl; external;
  procedure glDeleteFramebuffers (n: TGLsizei; const framebuffers: PGLuint); libdecl; external;
  procedure glGenFramebuffers (n: TGLsizei; framebuffers: PGLuint); libdecl; external;
  function glCheckFramebufferStatus (target: TGLenum): TGLenum; libdecl; external;
  procedure glFramebufferTexture1D (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); libdecl; external;
  procedure glFramebufferTexture2D (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); libdecl; external;
  procedure glFramebufferTexture3D (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint; zoffset: TGLint); libdecl; external;
  procedure glFramebufferRenderbuffer (target: TGLenum; attachment: TGLenum; renderbuffertarget: TGLenum; renderbuffer: TGLuint); libdecl; external;
  procedure glGetFramebufferAttachmentParameteriv (target: TGLenum; attachment: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGenerateMipmap (target: TGLenum); libdecl; external;

  procedure glBlendColor(red: GLclampf; green: GLclampf; blue: GLclampf; alpha: GLclampf); libdecl; external;
  procedure glBlendEquation(mode: GLenum); libdecl; external;
  procedure glDrawRangeElements(mode: GLenum; start: GLuint; _end: GLuint; count: GLsizei; _type: GLenum; const indices: PGLvoid); libdecl; external;
  procedure glTexImage3D(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; _type: GLenum; const pixels: PGLvoid); libdecl; external;
  procedure glTexSubImage3D(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); libdecl; external;
  procedure glCopyTexSubImage3D(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); libdecl; external;

  procedure glActiveTexture (texture: TGLenum); libdecl; external;
  procedure glClientActiveTexture (texture: TGLenum); libdecl; external;
  procedure glMultiTexCoord1d (target: TGLenum; s: TGLdouble); libdecl; external;
  procedure glMultiTexCoord1dv (target: TGLenum; const v: PGLdouble); libdecl; external;
  procedure glMultiTexCoord1f (target: TGLenum; s: TGLfloat); libdecl; external;
  procedure glMultiTexCoord1fv (target: TGLenum; const v: PGLfloat); libdecl; external;
  procedure glMultiTexCoord1i (target: TGLenum; s: TGLint); libdecl; external;
  procedure glMultiTexCoord1iv (target: TGLenum; const v: PGLint); libdecl; external;
  procedure glMultiTexCoord1s (target: TGLenum; s: TGLshort); libdecl; external;
  procedure glMultiTexCoord1sv (target: TGLenum; const v: PGLshort); libdecl; external;
  procedure glMultiTexCoord2d (target: glenum; s: gldouble; t: gldouble); libdecl; external;
  procedure glMultiTexCoord2dv (target: glenum; const v: PGLdouble); libdecl; external;
  procedure glMultiTexCoord2f (target: glenum; s: glfloat; t: glfloat); libdecl; external;
  procedure glMultiTexCoord2fv (target: glenum; const v: PGLfloat); libdecl; external;
  procedure glMultiTexCoord2i (target: glenum; s: glint; t: glint); libdecl; external;
  procedure glMultiTexCoord2iv (target: glenum; const v: PGLint); libdecl; external;
  procedure glMultiTexCoord2s (target: glenum; s: glshort; t: glshort); libdecl; external;
  procedure glMultiTexCoord2sv (target: glenum; const v: PGLshort); libdecl; external;
  procedure glMultiTexCoord3d (target: glenum; s: gldouble; t: gldouble; r: gldouble); libdecl; external;
  procedure glMultiTexCoord3dv (target: glenum; const v: PGLdouble); libdecl; external;
  procedure glMultiTexCoord3f (target: glenum; s: glfloat; t: glfloat; r: glfloat); libdecl; external;
  procedure glMultiTexCoord3fv (target: glenum; const v: PGLfloat); libdecl; external;
  procedure glMultiTexCoord3i (target: glenum; s: glint; t: glint; r: glint); libdecl; external;
  procedure glMultiTexCoord3iv (target: glenum; const v: PGLint); libdecl; external;
  procedure glMultiTexCoord3s (target: glenum; s: glshort; t: glshort; r: glshort); libdecl; external;
  procedure glMultiTexCoord3sv (target: glenum; const v: PGLshort); libdecl; external;
  procedure glMultiTexCoord4d (target: glenum; s: gldouble; t: gldouble; r: gldouble; q: gldouble); libdecl; external;
  procedure glMultiTexCoord4dv (target: glenum; const v: PGLdouble); libdecl; external;
  procedure glMultiTexCoord4f (target: glenum; s: glfloat; t: glfloat; r: glfloat; q: glfloat); libdecl; external;
  procedure glMultiTexCoord4fv (target: glenum; const v: PGLfloat); libdecl; external;
  procedure glMultiTexCoord4i (target: glenum; s: glint; t: glint; r: glint; q: glint); libdecl; external;
  procedure glMultiTexCoord4iv (target: glenum; const v: PGLint); libdecl; external;
  procedure glMultiTexCoord4s (target: glenum; s: glshort; t: glshort; r: glshort; q: glshort); libdecl; external;
  procedure glMultiTexCoord4sv (target: glenum; const v: PGLshort); libdecl; external;
  procedure glLoadTransposeMatrixf (const m: PGLfloat); libdecl; external;
  procedure glLoadTransposeMatrixd (const m: PGLdouble); libdecl; external;
  procedure glMultTransposeMatrixf (const m: PGLfloat); libdecl; external;
  procedure glMultTransposeMatrixd (const m: PGLdouble); libdecl; external;
  procedure glSampleCoverage (value: glclampf; invert: glboolean); libdecl; external;
  procedure glCompressedTexImage3D (target: glenum; level: glint; internalformat: glenum; width: glsizei; height: glsizei; depth: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl; external;
  procedure glCompressedTexImage2D (target: glenum; level: glint; internalformat: glenum; width: glsizei; height: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl; external;
  procedure glCompressedTexImage1D (target: glenum; level: glint; internalformat: glenum; width: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl; external;
  procedure glCompressedTexSubImage3D (target: glenum; level: glint; xoffset: glint; yoffset: glint; zoffset: glint; width: glsizei; height: glsizei; depth: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl; external;
  procedure glCompressedTexSubImage2D (target: glenum; level: glint; xoffset: glint; yoffset: glint; width: glsizei; height: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl; external;
  procedure glCompressedTexSubImage1D (target: glenum; level: glint; xoffset: glint; width: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl; external;
  procedure glGetCompressedTexImage (target: TGLenum; level: TGLint; img: PGLvoid); libdecl; external;

  procedure glGenQueries(n: GLsizei; ids: PGLuint); libdecl; external;
  procedure glDeleteQueries(n: GLsizei; const ids: PGLuint); libdecl; external;
  function glIsQuery(id: GLuint): boolean; libdecl; external;
  procedure glBeginQuery(target: GLenum; id: GLuint); libdecl; external;
  procedure glEndQuery(target: GLenum); libdecl; external;
  procedure glGetQueryiv(target, pname: GLenum; params: PGLint); libdecl; external;
  procedure glGetQueryObjectiv(id: GLuint; pname: GLenum; params: PGLint); libdecl; external;
  procedure glGetQueryObjectuiv(id: GLuint; pname: GLenum; params: PGLuint); libdecl; external;

  procedure glBindBuffer(target: TGLenum; buffer: TGLuint); libdecl; external;
  procedure glDeleteBuffers(n: TGLsizei; const buffers: PGLuint); libdecl; external;
  procedure glGenBuffers(n: TGLsizei; buffers: PGLuint); libdecl; external;
  function glIsBuffer(buffer: TGLuint): TGLboolean; libdecl; external;
  procedure glBufferData(target: TGLenum; size: TGLsizei; const data: PGLvoid; usage: TGLenum); libdecl; external;
  procedure glBufferSubData(target: TGLenum; offset: TGLsizei; size: TGLsizei; const data: PGLvoid); libdecl; external;
  procedure glGetBufferSubData(target: TGLenum; offset: TGLsizei; size: TGLsizei; data: PGLvoid); libdecl; external;
  function glMapBuffer(target: TGLenum; access: TGLenum): PGLvoid; libdecl; external;
  function glUnmapBuffer(target: TGLenum): TGLboolean; libdecl; external;
  procedure glGetBufferParameteriv(target: TGLenum; pname: TGLenum; params: PGLint); libdecl; external;
  procedure glGetBufferPointerv(target: TGLenum; pname: TGLenum; params: PGLvoid); libdecl; external;

  procedure glBlendEquationSeparate(modeRGB: GLenum; modeAlpha: GLenum); libdecl; external;
  procedure glDrawBuffers(n: GLsizei; const bufs: PGLenum); libdecl; external;
  procedure glStencilOpSeparate(face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); libdecl; external;
  procedure glStencilFuncSeparate(frontfunc: GLenum; backfunc: GLenum; ref: GLint; mask: GLuint); libdecl; external;
  procedure glStencilMaskSeparate(face: GLenum; mask: GLuint); libdecl; external;
  procedure glAttachShader(programObj, shaderObj: GLhandle); libdecl; external;
  procedure glBindAttribLocation(programObj: GLhandle; index: GLuint; name: PChar); libdecl; external;
  procedure glCompileShader(shaderObj: GLhandle); libdecl; external;
  function glCreateProgram: GLhandle; libdecl; external;
  function glCreateShader(shaderType: GLenum): GLhandle; libdecl; external;
  procedure glDeleteProgram(programObj: GLhandle); libdecl; external;
  procedure glDeleteShader(shaderObj: GLhandle); libdecl; external;
  procedure glDetachShader(programObj, shaderObj: GLhandle); libdecl; external;
  procedure glDisableVertexAttribArray(index: GLuint); libdecl; external;
  procedure glEnableVertexAttribArray(index: GLuint); libdecl; external;
  procedure glGetActiveAttrib(programObj: GLhandle; index: GLuint; maxlength: GLsizei; var length: GLint; var _type: GLenum; name: PChar); libdecl; external;
  procedure glGetActiveUniform(programObj: GLhandle; index: GLuint; maxLength: GLsizei; var length: GLsizei; var size: GLint; var _type: GLenum; name: PChar); libdecl; external;
  procedure glGetAttachedShaders(programObj: GLhandle; MaxCount: GLsizei; var Count: GLint; shaders: PGLuint); libdecl; external;
  function glGetAttribLocation(programObj: GLhandle; char: AnsiString): glint; libdecl; external;
  procedure glGetProgramiv(programObj: GLhandle; pname: glenum; params: PGLInt); libdecl; external;
  procedure glGetProgramInfoLog(programObj: GLHandle; maxLength: glsizei; var length: GLint; infoLog: PChar); libdecl; external;
  procedure glGetShaderiv(shaderObj: GLhandle; pname: glenum; params: PGLInt); libdecl; external;
  procedure glGetShaderInfoLog(shaderObj: GLHandle; maxLength: glsizei; var length: glint; infoLog: PChar); libdecl; external;
  procedure glGetShaderSource(shaderObj: GLhandle; maxlength: GLsizei; var length: GLsizei; source: PChar); libdecl; external;
  function glGetUniformLocation(programObj: GLhandle; const char: PChar): glint; libdecl; external;
  procedure glGetUniformfv(programObj: GLhandle; location: GLint; params: PGLfloat); libdecl; external;
  procedure glGetUniformiv(programObj: GLhandle; location: GLint; params: PGLInt); libdecl; external;
  procedure glGetVertexAttribfv(index: GLuint; pname: GLenum; params: PGLfloat); libdecl; external;
  procedure glGetVertexAttribiv(index: GLuint; pname: GLenum; params: PGLint); libdecl; external;
  procedure glGetVertexAttribPointerv(index: GLuint; pname: GLenum; _pointer: PGLvoid); libdecl; external;
  function glIsProgram(programObj: GLhandle) : glboolean; libdecl; external;
  function glIsShader(shaderObj: GLhandle) : glboolean; libdecl; external;
  procedure glLinkProgram(programObj: GLHandle); libdecl; external;
  procedure glShaderSource(shaderObj: GLHandle; count: glsizei; _string: PPGLChar; lengths: pglint); libdecl; external;
  procedure glUseProgram(programObj: GLhandle); libdecl; external;
  procedure glUniform1f(location: GLint; v0: GLfloat); libdecl; external;
  procedure glUniform2f(location: GLint; v0, v1: GLfloat); libdecl; external;
  procedure glUniform3f(location: GLint; v0, v1, v2: GLfloat); libdecl; external;
  procedure glUniform4f(location: GLint; v0, v1, v2, v3: GLfloat); libdecl; external;
  procedure glUniform1i(location: GLint; v0: GLint); libdecl; external;
  procedure glUniform2i(location: GLint; v0, v1: GLint); libdecl; external;
  procedure glUniform3i(location: GLint; v0, v1, v2: GLint); libdecl; external;
  procedure glUniform4i(location: GLint; v0, v1, v2, v3: GLint); libdecl; external;
  procedure glUniform1fv(location: GLint; count: GLsizei; value: PGLfloat); libdecl; external;
  procedure glUniform2fv(location: GLint; count: GLsizei; value: PGLfloat); libdecl; external;
  procedure glUniform3fv(location: GLint; count: GLsizei; value: PGLfloat); libdecl; external;
  procedure glUniform4fv(location: GLint; count: GLsizei; value: PGLfloat); libdecl; external;
  procedure glUniform1iv(location: GLint; count: GLsizei; value: PGLint); libdecl; external;
  procedure glUniform2iv(location: GLint; count: GLsizei; value: PGLint); libdecl; external;
  procedure glUniform3iv(location: GLint; count: GLsizei; value: PGLint); libdecl; external;
  procedure glUniform4iv(location: GLint; count: GLsizei; value: PGLint); libdecl; external;
  procedure glUniformMatrix2fv(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl; external;
  procedure glUniformMatrix3fv(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl; external;
  procedure glUniformMatrix4fv(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl; external;
  procedure glValidateProgram(programObj: GLhandle); libdecl; external;
  procedure glVertexAttrib1d(index: GLuint; x: GLdouble); libdecl; external;
  procedure glVertexAttrib1dv(index: GLuint; const v: PGLdouble); libdecl; external;
  procedure glVertexAttrib1f(index: GLuint; x: GLfloat); libdecl; external;
  procedure glVertexAttrib1fv(index: GLuint; const v: PGLfloat); libdecl; external;
  procedure glVertexAttrib1s(index: GLuint; x: GLshort); libdecl; external;
  procedure glVertexAttrib1sv(index: GLuint; const v: PGLshort); libdecl; external;
  procedure glVertexAttrib2d(index: GLuint; x: GLdouble; y: GLdouble); libdecl; external;
  procedure glVertexAttrib2dv(index: GLuint; const v: PGLdouble); libdecl; external;
  procedure glVertexAttrib2f(index: GLuint; x: GLfloat; y: GLfloat); libdecl; external;
  procedure glVertexAttrib2fv(index: GLuint; const v: PGLfloat); libdecl; external;
  procedure glVertexAttrib2s(index: GLuint; x: GLshort; y: GLshort); libdecl; external;
  procedure glVertexAttrib2sv(index: GLuint; const v: PGLshort); libdecl; external;
  procedure glVertexAttrib3d(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); libdecl; external;
  procedure glVertexAttrib3dv(index: GLuint; const v: PGLdouble); libdecl; external;
  procedure glVertexAttrib3f(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); libdecl; external;
  procedure glVertexAttrib3fv(index: GLuint; const v: PGLfloat); libdecl; external;
  procedure glVertexAttrib3s(index: GLuint; x: GLshort; y: GLshort; z: GLshort); libdecl; external;
  procedure glVertexAttrib3sv(index: GLuint; const v: PGLshort); libdecl; external;
  procedure glVertexAttrib4Nbv(index: GLuint; const v: PGLbyte); libdecl; external;
  procedure glVertexAttrib4Niv(index: GLuint; const v: PGLint); libdecl; external;
  procedure glVertexAttrib4Nsv(index: GLuint; const v: PGLshort); libdecl; external;
  procedure glVertexAttrib4Nub(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); libdecl; external;
  procedure glVertexAttrib4Nubv(index: GLuint; const v: PGLubyte); libdecl; external;
  procedure glVertexAttrib4Nuiv(index: GLuint; const v: PGLuint); libdecl; external;
  procedure glVertexAttrib4Nusv(index: GLuint; const v: PGLushort); libdecl; external;
  procedure glVertexAttrib4bv(index: GLuint; const v: PGLbyte); libdecl; external;
  procedure glVertexAttrib4d(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); libdecl; external;
  procedure glVertexAttrib4dv(index: GLuint; const v: PGLdouble); libdecl; external;
  procedure glVertexAttrib4f(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); libdecl; external;
  procedure glVertexAttrib4fv(index: GLuint; const v: PGLfloat); libdecl; external;
  procedure glVertexAttrib4iv(index: GLuint; const v: PGLint); libdecl; external;
  procedure glVertexAttrib4s(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); libdecl; external;
  procedure glVertexAttrib4sv(index: GLuint; const v: PGLshort); libdecl; external;
  procedure glVertexAttrib4ubv(index: GLuint; const v: PGLubyte); libdecl; external;
  procedure glVertexAttrib4uiv(index: GLuint; const v: PGLuint); libdecl; external;
  procedure glVertexAttrib4usv(index: GLuint; const v: PGLushort); libdecl; external;
  procedure glVertexAttribPointer(index: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; stride: GLsizei; const _pointer: PGLvoid); libdecl; external;
{$endif}

var gl_1_1_Cap: Boolean = False;
var gl_1_2_Cap: Boolean = False;
var gl_1_3_Cap: Boolean = False;
var gl_2_0_Cap: Boolean = False;
var gl_Query_Cap: Boolean = False;
var gl_VBO_Cap: Boolean = False;
var gl_PixelFormat_Cap: Boolean = False;
var gl_PBuffer_Cap: Boolean = False;
var gl_PBufferSGIX_Cap: Boolean = False;
var gl_PBufferTex_Cap: Boolean = False;
var gl_FBO_Cap: Boolean = False;
var gl_SwapInterval_Cap: Boolean = False;
var gl_BlendFuncSeparate_Cap: Boolean = False;

procedure InitOpenGL;
procedure UnInitOpenGL;

implementation

var LibOpenGL: TG2DynLib;
var CurCap: ^Boolean = nil;

{$ifndef GL_STATIC}
{$Hints off}
  procedure glAccumDummy (op: TGLenum; value: TGLfloat); libdecl; begin end;
  procedure glAlphaFuncDummy (func: TGLenum; ref: TGLclampf); libdecl; begin end;
  function glAreTexturesResidentDummy (n: TGLsizei; const textures: PGLuint; residences: PGLboolean): TGLboolean; libdecl; begin Result := False; end;
  procedure glArrayElementDummy (i: TGLint); libdecl; begin end;
  procedure glBeginDummy (mode: TGLenum); libdecl; begin end;
  procedure glBindTextureDummy (target: TGLenum; texture: TGLuint); libdecl; begin end;
  procedure glBitmapDummy (width: TGLsizei; height: TGLsizei; xorig: TGLfloat; yorig: TGLfloat; xmove: TGLfloat; ymove: TGLfloat; const bitmap: PGLubyte); libdecl; begin end;
  procedure glBlendFuncDummy (sfactor: TGLenum; dfactor: TGLenum); libdecl; begin end;
  procedure glCallListDummy (list: TGLuint); libdecl; begin end;
  procedure glCallListsDummy (n: TGLsizei; _type: TGLenum; const lists: PGLvoid); libdecl; begin end;
  procedure glClearDummy (mask: TGLbitfield); libdecl; begin end;
  procedure glClearAccumDummy (red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); libdecl; begin end;
  procedure glClearColorDummy (red: TGLclampf; green: TGLclampf; blue: TGLclampf; alpha: TGLclampf); libdecl; begin end;
  procedure glClearDepthDummy (depth: TGLclampd); libdecl; begin end;
  procedure glClearIndexDummy (c: TGLfloat); libdecl; begin end;
  procedure glClearStencilDummy (s: TGLint); libdecl; begin end;
  procedure glClipPlaneDummy (plane: TGLenum; const equation: PGLdouble); libdecl; begin end;
  procedure glColor3bDummy (red: TGLbyte; green: TGLbyte; blue: TGLbyte); libdecl; begin end;
  procedure glColor3bvDummy (const v: PGLbyte); libdecl; begin end;
  procedure glColor3dDummy (red: TGLdouble; green: TGLdouble; blue: TGLdouble); libdecl; begin end;
  procedure glColor3dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glColor3fDummy (red: TGLfloat; green: TGLfloat; blue: TGLfloat); libdecl; begin end;
  procedure glColor3fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glColor3iDummy (red: TGLint; green: TGLint; blue: TGLint); libdecl; begin end;
  procedure glColor3ivDummy (const v: PGLint); libdecl; begin end;
  procedure glColor3sDummy (red: TGLshort; green: TGLshort; blue: TGLshort); libdecl; begin end;
  procedure glColor3svDummy (const v: PGLshort); libdecl; begin end;
  procedure glColor3ubDummy (red: TGLubyte; green: TGLubyte; blue: TGLubyte); libdecl; begin end;
  procedure glColor3ubvDummy (const v: PGLubyte); libdecl; begin end;
  procedure glColor3uiDummy (red: TGLuint; green: TGLuint; blue: TGLuint); libdecl; begin end;
  procedure glColor3uivDummy (const v: PGLuint); libdecl; begin end;
  procedure glColor3usDummy (red: TGLushort; green: TGLushort; blue: TGLushort); libdecl; begin end;
  procedure glColor3usvDummy (const v: PGLushort); libdecl; begin end;
  procedure glColor4bDummy (red: TGLbyte; green: TGLbyte; blue: TGLbyte; alpha: TGLbyte); libdecl; begin end;
  procedure glColor4bvDummy (const v: PGLbyte); libdecl; begin end;
  procedure glColor4dDummy (red: TGLdouble; green: TGLdouble; blue: TGLdouble; alpha: TGLdouble); libdecl; begin end;
  procedure glColor4dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glColor4fDummy (red: TGLfloat; green: TGLfloat; blue: TGLfloat; alpha: TGLfloat); libdecl; begin end;
  procedure glColor4fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glColor4iDummy (red: TGLint; green: TGLint; blue: TGLint; alpha: TGLint); libdecl; begin end;
  procedure glColor4ivDummy (const v: PGLint); libdecl; begin end;
  procedure glColor4sDummy (red: TGLshort; green: TGLshort; blue: TGLshort; alpha: TGLshort); libdecl; begin end;
  procedure glColor4svDummy (const v: PGLshort); libdecl; begin end;
  procedure glColor4ubDummy (red: TGLubyte; green: TGLubyte; blue: TGLubyte; alpha: TGLubyte); libdecl; begin end;
  procedure glColor4ubvDummy (const v: PGLubyte); libdecl; begin end;
  procedure glColor4uiDummy (red: TGLuint; green: TGLuint; blue: TGLuint; alpha: TGLuint); libdecl; begin end;
  procedure glColor4uivDummy (const v: PGLuint); libdecl; begin end;
  procedure glColor4usDummy (red: TGLushort; green: TGLushort; blue: TGLushort; alpha: TGLushort); libdecl; begin end;
  procedure glColor4usvDummy (const v: PGLushort); libdecl; begin end;
  procedure glColorMaskDummy (red: TGLboolean; green: TGLboolean; blue: TGLboolean; alpha: TGLboolean); libdecl; begin end;
  procedure glColorMaterialDummy (face: TGLenum; mode: TGLenum); libdecl; begin end;
  procedure glColorPointerDummy (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  procedure glCopyPixelsDummy (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; _type: TGLenum); libdecl; begin end;
  procedure glCopyTexImage1DDummy (target: TGLenum; level: TGLint; internalFormat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; border: TGLint); libdecl; begin end;
  procedure glCopyTexImage2DDummy (target: TGLenum; level: TGLint; internalFormat: TGLenum; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint); libdecl; begin end;
  procedure glCopyTexSubImage1DDummy (target: TGLenum; level: TGLint; xoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei); libdecl; begin end;
  procedure glCopyTexSubImage2DDummy (target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl; begin end;
  procedure glCullFaceDummy (mode: TGLenum); libdecl; begin end;
  procedure glDeleteListsDummy (list: TGLuint; range: TGLsizei); libdecl; begin end;
  procedure glDeleteTexturesDummy (n: TGLsizei; const textures: PGLuint); libdecl; begin end;
  procedure glDepthFuncDummy (func: TGLenum); libdecl; begin end;
  procedure glDepthMaskDummy (flag: TGLboolean); libdecl; begin end;
  procedure glDepthRangeDummy (zNear: TGLclampd; zFar: TGLclampd); libdecl; begin end;
  procedure glDisableDummy (cap: TGLenum); libdecl; begin end;
  procedure glDisableClientStateDummy (_array: TGLenum); libdecl; begin end;
  procedure glDrawArraysDummy (mode: TGLenum; first: TGLint; count: TGLsizei); libdecl; begin end;
  procedure glDrawBufferDummy (mode: TGLenum); libdecl; begin end;
  procedure glDrawElementsDummy (mode: TGLenum; count: TGLsizei; _type: TGLenum; const indices: PGLvoid); libdecl; begin end;
  procedure glDrawPixelsDummy (width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glEdgeFlagDummy (flag: TGLboolean); libdecl; begin end;
  procedure glEdgeFlagPointerDummy (stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  procedure glEdgeFlagvDummy (const flag: PGLboolean); libdecl; begin end;
  procedure glEnableDummy (cap: TGLenum); libdecl; begin end;
  procedure glEnableClientStateDummy (_array: TGLenum); libdecl; begin end;
  procedure glEndDummy (); libdecl; begin end;
  procedure glEndListDummy (); libdecl; begin end;
  procedure glEvalCoord1dDummy (u: TGLdouble); libdecl; begin end;
  procedure glEvalCoord1dvDummy (const u: PGLdouble); libdecl; begin end;
  procedure glEvalCoord1fDummy (u: TGLfloat); libdecl; begin end;
  procedure glEvalCoord1fvDummy (const u: PGLfloat); libdecl; begin end;
  procedure glEvalCoord2dDummy (u: TGLdouble; v: TGLdouble); libdecl; begin end;
  procedure glEvalCoord2dvDummy (const u: PGLdouble); libdecl; begin end;
  procedure glEvalCoord2fDummy (u: TGLfloat; v: TGLfloat); libdecl; begin end;
  procedure glEvalCoord2fvDummy (const u: PGLfloat); libdecl; begin end;
  procedure glEvalMesh1Dummy (mode: TGLenum; i1: TGLint; i2: TGLint); libdecl; begin end;
  procedure glEvalMesh2Dummy (mode: TGLenum; i1: TGLint; i2: TGLint; j1: TGLint; j2: TGLint); libdecl; begin end;
  procedure glEvalPoint1Dummy (i: TGLint); libdecl; begin end;
  procedure glEvalPoint2Dummy (i: TGLint; j: TGLint); libdecl; begin end;
  procedure glFeedbackBufferDummy (size: TGLsizei; _type: TGLenum; buffer: PGLfloat); libdecl; begin end;
  procedure glFinishDummy (); libdecl; begin end;
  procedure glFlushDummy (); libdecl; begin end;
  procedure glFogfDummy (pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glFogfvDummy (pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glFogiDummy (pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glFogivDummy (pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glFrontFaceDummy (mode: TGLenum); libdecl; begin end;
  procedure glFrustumDummy (left: TGLdouble; right: TGLdouble; bottom: TGLdouble; top: TGLdouble; zNear: TGLdouble; zFar: TGLdouble); libdecl; begin end;
  function glGenListsDummy (range: TGLsizei): TGLuint; libdecl; begin Result := 0; end;
  procedure glGenTexturesDummy (n: TGLsizei; textures: PGLuint); libdecl; begin end;
  procedure glGetBooleanvDummy (pname: TGLenum; params: PGLboolean); libdecl; begin end;
  procedure glGetClipPlaneDummy (plane: TGLenum; equation: PGLdouble); libdecl; begin end;
  procedure glGetDoublevDummy (pname: TGLenum; params: PGLdouble); libdecl; begin end;
  function glGetErrorDummy (): TGLenum; libdecl; begin Result := 0; end;
  procedure glGetFloatvDummy (pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetIntegervDummy (pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetLightfvDummy (light: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetLightivDummy (light: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetMapdvDummy (target: TGLenum; query: TGLenum; v: PGLdouble); libdecl; begin end;
  procedure glGetMapfvDummy (target: TGLenum; query: TGLenum; v: PGLfloat); libdecl; begin end;
  procedure glGetMapivDummy (target: TGLenum; query: TGLenum; v: PGLint); libdecl; begin end;
  procedure glGetMaterialfvDummy (face: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetMaterialivDummy (face: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetPixelMapfvDummy (map: TGLenum; values: PGLfloat); libdecl; begin end;
  procedure glGetPixelMapuivDummy (map: TGLenum; values: PGLuint); libdecl; begin end;
  procedure glGetPixelMapusvDummy (map: TGLenum; values: PGLushort); libdecl; begin end;
  procedure glGetPointervDummy (pname: TGLenum; params: PGLvoid); libdecl; begin end;
  procedure glGetPolygonStippleDummy (mask: PGLubyte); libdecl; begin end;
  function glGetStringDummy (name: TGLenum): PAnsiChar; libdecl; begin Result := ''; end;
  procedure glGetTexEnvfvDummy (target: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetTexEnvivDummy (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetTexGendvDummy (coord: TGLenum; pname: TGLenum; params: PGLdouble); libdecl; begin end;
  procedure glGetTexGenfvDummy (coord: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetTexGenivDummy (coord: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetTexImageDummy (target: TGLenum; level: TGLint; format: TGLenum; _type: TGLenum; pixels: PGLvoid); libdecl; begin end;
  procedure glGetTexLevelParameterfvDummy (target: TGLenum; level: TGLint; pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetTexLevelParameterivDummy (target: TGLenum; level: TGLint; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetTexParameterfvDummy (target: TGLenum; pname: TGLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetTexParameterivDummy (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glHintDummy (target: TGLenum; mode: TGLenum); libdecl; begin end;
  procedure glIndexMaskDummy (mask: TGLuint); libdecl; begin end;
  procedure glIndexPointerDummy (_type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  procedure glIndexdDummy (c: TGLdouble); libdecl; begin end;
  procedure glIndexdvDummy (const c: PGLdouble); libdecl; begin end;
  procedure glIndexfDummy (c: TGLfloat); libdecl; begin end;
  procedure glIndexfvDummy (const c: PGLfloat); libdecl; begin end;
  procedure glIndexiDummy (c: TGLint); libdecl; begin end;
  procedure glIndexivDummy (const c: PGLint); libdecl; begin end;
  procedure glIndexsDummy (c: TGLshort); libdecl; begin end;
  procedure glIndexsvDummy (const c: PGLshort); libdecl; begin end;
  procedure glIndexubDummy (c: TGLubyte); libdecl; begin end;
  procedure glIndexubvDummy (const c: PGLubyte); libdecl; begin end;
  procedure glInitNamesDummy (); libdecl; begin end;
  procedure glInterleavedArraysDummy (format: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  function glIsEnabledDummy (cap: TGLenum): TGLboolean; libdecl; begin Result := False; end;
  function glIsListDummy (list: TGLuint): TGLboolean; libdecl; begin Result := False; end;
  function glIsTextureDummy (texture: TGLuint): TGLboolean; libdecl; begin Result := False; end;
  procedure glLightModelfDummy (pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glLightModelfvDummy (pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glLightModeliDummy (pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glLightModelivDummy (pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glLightfDummy (light: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glLightfvDummy (light: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glLightiDummy (light: TGLenum; pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glLightivDummy (light: TGLenum; pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glLineStippleDummy (factor: TGLint; pattern: TGLushort); libdecl; begin end;
  procedure glLineWidthDummy (width: TGLfloat); libdecl; begin end;
  procedure glListBaseDummy (base: TGLuint); libdecl; begin end;
  procedure glLoadIdentityDummy (); libdecl; begin end;
  procedure glLoadMatrixdDummy (const m: PGLdouble); libdecl; begin end;
  procedure glLoadMatrixfDummy (const m: PGLfloat); libdecl; begin end;
  procedure glLoadNameDummy (name: TGLuint); libdecl; begin end;
  procedure glLogicOpDummy (opcode: TGLenum); libdecl; begin end;
  procedure glMap1dDummy (target: TGLenum; u1: TGLdouble; u2: TGLdouble; stride: TGLint; order: TGLint; const points: PGLdouble); libdecl; begin end;
  procedure glMap1fDummy (target: TGLenum; u1: TGLfloat; u2: TGLfloat; stride: TGLint; order: TGLint; const points: PGLfloat); libdecl; begin end;
  procedure glMap2dDummy (target: TGLenum; u1: TGLdouble; u2: TGLdouble; ustride: TGLint; uorder: TGLint; v1: TGLdouble; v2: TGLdouble; vstride: TGLint; vorder: TGLint; const points: PGLdouble); libdecl; begin end;
  procedure glMap2fDummy (target: TGLenum; u1: TGLfloat; u2: TGLfloat; ustride: TGLint; uorder: TGLint; v1: TGLfloat; v2: TGLfloat; vstride: TGLint; vorder: TGLint; const points: PGLfloat); libdecl; begin end;
  procedure glMapGrid1dDummy (un: TGLint; u1: TGLdouble; u2: TGLdouble); libdecl; begin end;
  procedure glMapGrid1fDummy (un: TGLint; u1: TGLfloat; u2: TGLfloat); libdecl; begin end;
  procedure glMapGrid2dDummy (un: TGLint; u1: TGLdouble; u2: TGLdouble; vn: TGLint; v1: TGLdouble; v2: TGLdouble); libdecl; begin end;
  procedure glMapGrid2fDummy (un: TGLint; u1: TGLfloat; u2: TGLfloat; vn: TGLint; v1: TGLfloat; v2: TGLfloat); libdecl; begin end;
  procedure glMaterialfDummy (face: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glMaterialfvDummy (face: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glMaterialiDummy (face: TGLenum; pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glMaterialivDummy (face: TGLenum; pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glMatrixModeDummy (mode: TGLenum); libdecl; begin end;
  procedure glMultMatrixdDummy (const m: PGLdouble); libdecl; begin end;
  procedure glMultMatrixfDummy (const m: PGLfloat); libdecl; begin end;
  procedure glNewListDummy (list: TGLuint; mode: TGLenum); libdecl; begin end;
  procedure glNormal3bDummy (nx: TGLbyte; ny: TGLbyte; nz: TGLbyte); libdecl; begin end;
  procedure glNormal3bvDummy (const v: PGLbyte); libdecl; begin end;
  procedure glNormal3dDummy (nx: TGLdouble; ny: TGLdouble; nz: TGLdouble); libdecl; begin end;
  procedure glNormal3dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glNormal3fDummy (nx: TGLfloat; ny: TGLfloat; nz: TGLfloat); libdecl; begin end;
  procedure glNormal3fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glNormal3iDummy (nx: TGLint; ny: TGLint; nz: TGLint); libdecl; begin end;
  procedure glNormal3ivDummy (const v: PGLint); libdecl; begin end;
  procedure glNormal3sDummy (nx: TGLshort; ny: TGLshort; nz: TGLshort); libdecl; begin end;
  procedure glNormal3svDummy (const v: PGLshort); libdecl; begin end;
  procedure glNormalPointerDummy (_type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  procedure glOrthoDummy (left: TGLdouble; right: TGLdouble; bottom: TGLdouble; top: TGLdouble; zNear: TGLdouble; zFar: TGLdouble); libdecl; begin end;
  procedure glPassThroughDummy (token: TGLfloat); libdecl; begin end;
  procedure glPixelMapfvDummy (map: TGLenum; mapsize: TGLsizei; const values: PGLfloat); libdecl; begin end;
  procedure glPixelMapuivDummy (map: TGLenum; mapsize: TGLsizei; const values: PGLuint); libdecl; begin end;
  procedure glPixelMapusvDummy (map: TGLenum; mapsize: TGLsizei; const values: PGLushort); libdecl; begin end;
  procedure glPixelStorefDummy (pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glPixelStoreiDummy (pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glPixelTransferfDummy (pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glPixelTransferiDummy (pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glPixelZoomDummy (xfactor: TGLfloat; yfactor: TGLfloat); libdecl; begin end;
  procedure glPointSizeDummy (size: TGLfloat); libdecl; begin end;
  procedure glPolygonModeDummy (face: TGLenum; mode: TGLenum); libdecl; begin end;
  procedure glPolygonOffsetDummy (factor: TGLfloat; units: TGLfloat); libdecl; begin end;
  procedure glPolygonStippleDummy (const mask: PGLubyte); libdecl; begin end;
  procedure glPopAttribDummy (); libdecl; begin end;
  procedure glPopClientAttribDummy (); libdecl; begin end;
  procedure glPopMatrixDummy (); libdecl; begin end;
  procedure glPopNameDummy (); libdecl; begin end;
  procedure glPrioritizeTexturesDummy (n: TGLsizei; const textures: PGLuint; const priorities: PGLclampf); libdecl; begin end;
  procedure glPushAttribDummy (mask: TGLbitfield); libdecl; begin end;
  procedure glPushClientAttribDummy (mask: TGLbitfield); libdecl; begin end;
  procedure glPushMatrixDummy (); libdecl; begin end;
  procedure glPushNameDummy (name: TGLuint); libdecl; begin end;
  procedure glRasterPos2dDummy (x: TGLdouble; y: TGLdouble); libdecl; begin end;
  procedure glRasterPos2dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glRasterPos2fDummy (x: TGLfloat; y: TGLfloat); libdecl; begin end;
  procedure glRasterPos2fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glRasterPos2iDummy (x: TGLint; y: TGLint); libdecl; begin end;
  procedure glRasterPos2ivDummy (const v: PGLint); libdecl; begin end;
  procedure glRasterPos2sDummy (x: TGLshort; y: TGLshort); libdecl; begin end;
  procedure glRasterPos2svDummy (const v: PGLshort); libdecl; begin end;
  procedure glRasterPos3dDummy (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; begin end;
  procedure glRasterPos3dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glRasterPos3fDummy (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; begin end;
  procedure glRasterPos3fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glRasterPos3iDummy (x: TGLint; y: TGLint; z: TGLint); libdecl; begin end;
  procedure glRasterPos3ivDummy (const v: PGLint); libdecl; begin end;
  procedure glRasterPos3sDummy (x: TGLshort; y: TGLshort; z: TGLshort); libdecl; begin end;
  procedure glRasterPos3svDummy (const v: PGLshort); libdecl; begin end;
  procedure glRasterPos4dDummy (x: TGLdouble; y: TGLdouble; z: TGLdouble; w: TGLdouble); libdecl; begin end;
  procedure glRasterPos4dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glRasterPos4fDummy (x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); libdecl; begin end;
  procedure glRasterPos4fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glRasterPos4iDummy (x: TGLint; y: TGLint; z: TGLint; w: TGLint); libdecl; begin end;
  procedure glRasterPos4ivDummy (const v: PGLint); libdecl; begin end;
  procedure glRasterPos4sDummy (x: TGLshort; y: TGLshort; z: TGLshort; w: TGLshort); libdecl; begin end;
  procedure glRasterPos4svDummy (const v: PGLshort); libdecl; begin end;
  procedure glReadBufferDummy (mode: TGLenum); libdecl; begin end;
  procedure glReadPixelsDummy (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; pixels: PGLvoid); libdecl; begin end;
  procedure glRectdDummy (x1: TGLdouble; y1: TGLdouble; x2: TGLdouble; y2: TGLdouble); libdecl; begin end;
  procedure glRectdvDummy (const v1: PGLdouble; const v2: PGLdouble); libdecl; begin end;
  procedure glRectfDummy (x1: TGLfloat; y1: TGLfloat; x2: TGLfloat; y2: TGLfloat); libdecl; begin end;
  procedure glRectfvDummy (const v1: PGLfloat; const v2: PGLfloat); libdecl; begin end;
  procedure glRectiDummy (x1: TGLint; y1: TGLint; x2: TGLint; y2: TGLint); libdecl; begin end;
  procedure glRectivDummy (const v1: PGLint; const v2: PGLint); libdecl; begin end;
  procedure glRectsDummy (x1: TGLshort; y1: TGLshort; x2: TGLshort; y2: TGLshort); libdecl; begin end;
  procedure glRectsvDummy (const v1: PGLshort; const v2: PGLshort); libdecl; begin end;
  function glRenderModeDummy (mode: TGLenum): TGLint; libdecl; begin Result := 0; end;
  procedure glRotatedDummy (angle: TGLdouble; x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; begin end;
  procedure glRotatefDummy (angle: TGLfloat; x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; begin end;
  procedure glScaledDummy (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; begin end;
  procedure glScalefDummy (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; begin end;
  procedure glScissorDummy (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl; begin end;
  procedure glSelectBufferDummy (size: TGLsizei; buffer: PGLuint); libdecl; begin end;
  procedure glShadeModelDummy (mode: TGLenum); libdecl; begin end;
  procedure glStencilFuncDummy (func: TGLenum; ref: TGLint; mask: TGLuint); libdecl; begin end;
  procedure glStencilMaskDummy (mask: TGLuint); libdecl; begin end;
  procedure glStencilOpDummy (fail: TGLenum; zfail: TGLenum; zpass: TGLenum); libdecl; begin end;
  procedure glTexCoord1dDummy (s: TGLdouble); libdecl; begin end;
  procedure glTexCoord1dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glTexCoord1fDummy (s: TGLfloat); libdecl; begin end;
  procedure glTexCoord1fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glTexCoord1iDummy (s: TGLint); libdecl; begin end;
  procedure glTexCoord1ivDummy (const v: PGLint); libdecl; begin end;
  procedure glTexCoord1sDummy (s: TGLshort); libdecl; begin end;
  procedure glTexCoord1svDummy (const v: PGLshort); libdecl; begin end;
  procedure glTexCoord2dDummy (s: TGLdouble; t: TGLdouble); libdecl; begin end;
  procedure glTexCoord2dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glTexCoord2fDummy (s: TGLfloat; t: TGLfloat); libdecl; begin end;
  procedure glTexCoord2fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glTexCoord2iDummy (s: TGLint; t: TGLint); libdecl; begin end;
  procedure glTexCoord2ivDummy (const v: PGLint); libdecl; begin end;
  procedure glTexCoord2sDummy (s: TGLshort; t: TGLshort); libdecl; begin end;
  procedure glTexCoord2svDummy (const v: PGLshort); libdecl; begin end;
  procedure glTexCoord3dDummy (s: TGLdouble; t: TGLdouble; r: TGLdouble); libdecl; begin end;
  procedure glTexCoord3dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glTexCoord3fDummy (s: TGLfloat; t: TGLfloat; r: TGLfloat); libdecl; begin end;
  procedure glTexCoord3fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glTexCoord3iDummy (s: TGLint; t: TGLint; r: TGLint); libdecl; begin end;
  procedure glTexCoord3ivDummy (const v: PGLint); libdecl; begin end;
  procedure glTexCoord3sDummy (s: TGLshort; t: TGLshort; r: TGLshort); libdecl; begin end;
  procedure glTexCoord3svDummy (const v: PGLshort); libdecl; begin end;
  procedure glTexCoord4dDummy (s: TGLdouble; t: TGLdouble; r: TGLdouble; q: TGLdouble); libdecl; begin end;
  procedure glTexCoord4dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glTexCoord4fDummy (s: TGLfloat; t: TGLfloat; r: TGLfloat; q: TGLfloat); libdecl; begin end;
  procedure glTexCoord4fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glTexCoord4iDummy (s: TGLint; t: TGLint; r: TGLint; q: TGLint); libdecl; begin end;
  procedure glTexCoord4ivDummy (const v: PGLint); libdecl; begin end;
  procedure glTexCoord4sDummy (s: TGLshort; t: TGLshort; r: TGLshort; q: TGLshort); libdecl; begin end;
  procedure glTexCoord4svDummy (const v: PGLshort); libdecl; begin end;
  procedure glTexCoordPointerDummy (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  procedure glTexEnvfDummy (target: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glTexEnvfvDummy (target: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glTexEnviDummy (target: TGLenum; pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glTexEnvivDummy (target: TGLenum; pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glTexGendDummy (coord: TGLenum; pname: TGLenum; param: TGLdouble); libdecl; begin end;
  procedure glTexGendvDummy (coord: TGLenum; pname: TGLenum; const params: PGLdouble); libdecl; begin end;
  procedure glTexGenfDummy (coord: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glTexGenfvDummy (coord: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glTexGeniDummy (coord: TGLenum; pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glTexGenivDummy (coord: TGLenum; pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glTexImage1DDummy (target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glTexImage2DDummy (target: TGLenum; level: TGLint; internalformat: TGLint; width: TGLsizei; height: TGLsizei; border: TGLint; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glTexParameterfDummy (target: TGLenum; pname: TGLenum; param: TGLfloat); libdecl; begin end;
  procedure glTexParameterfvDummy (target: TGLenum; pname: TGLenum; const params: PGLfloat); libdecl; begin end;
  procedure glTexParameteriDummy (target: TGLenum; pname: TGLenum; param: TGLint); libdecl; begin end;
  procedure glTexParameterivDummy (target: TGLenum; pname: TGLenum; const params: PGLint); libdecl; begin end;
  procedure glTexSubImage1DDummy (target: TGLenum; level: TGLint; xoffset: TGLint; width: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glTexSubImage2DDummy (target: TGLenum; level: TGLint; xoffset: TGLint; yoffset: TGLint; width: TGLsizei; height: TGLsizei; format: TGLenum; _type: TGLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glTranslatedDummy (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; begin end;
  procedure glTranslatefDummy (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; begin end;
  procedure glVertex2dDummy (x: TGLdouble; y: TGLdouble); libdecl; begin end;
  procedure glVertex2dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glVertex2fDummy (x: TGLfloat; y: TGLfloat); libdecl; begin end;
  procedure glVertex2fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glVertex2iDummy (x: TGLint; y: TGLint); libdecl; begin end;
  procedure glVertex2ivDummy (const v: PGLint); libdecl; begin end;
  procedure glVertex2sDummy (x: TGLshort; y: TGLshort); libdecl; begin end;
  procedure glVertex2svDummy (const v: PGLshort); libdecl; begin end;
  procedure glVertex3dDummy (x: TGLdouble; y: TGLdouble; z: TGLdouble); libdecl; begin end;
  procedure glVertex3dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glVertex3fDummy (x: TGLfloat; y: TGLfloat; z: TGLfloat); libdecl; begin end;
  procedure glVertex3fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glVertex3iDummy (x: TGLint; y: TGLint; z: TGLint); libdecl; begin end;
  procedure glVertex3ivDummy (const v: PGLint); libdecl; begin end;
  procedure glVertex3sDummy (x: TGLshort; y: TGLshort; z: TGLshort); libdecl; begin end;
  procedure glVertex3svDummy (const v: PGLshort); libdecl; begin end;
  procedure glVertex4dDummy (x: TGLdouble; y: TGLdouble; z: TGLdouble; w: TGLdouble); libdecl; begin end;
  procedure glVertex4dvDummy (const v: PGLdouble); libdecl; begin end;
  procedure glVertex4fDummy (x: TGLfloat; y: TGLfloat; z: TGLfloat; w: TGLfloat); libdecl; begin end;
  procedure glVertex4fvDummy (const v: PGLfloat); libdecl; begin end;
  procedure glVertex4iDummy (x: TGLint; y: TGLint; z: TGLint; w: TGLint); libdecl; begin end;
  procedure glVertex4ivDummy (const v: PGLint); libdecl; begin end;
  procedure glVertex4sDummy (x: TGLshort; y: TGLshort; z: TGLshort; w: TGLshort); libdecl; begin end;
  procedure glVertex4svDummy (const v: PGLshort); libdecl; begin end;
  procedure glVertexPointerDummy (size: TGLint; _type: TGLenum; stride: TGLsizei; const _pointer: PGLvoid); libdecl; begin end;
  procedure glViewportDummy (x: TGLint; y: TGLint; width: TGLsizei; height: TGLsizei); libdecl; begin end;

  function glIsRenderBufferDummy (renderbuffer: TGLuint): Boolean; libdecl; begin Result := False; end;
  procedure glBindRenderBufferDummy (target: TGLenum; renderbuffer: TGLuint); libdecl; begin end;
  procedure glDeleteRenderBuffersDummy (n: TGLsizei; const renderbuffers: PGLuint); libdecl; begin end;
  procedure glGenRenderBuffersDummy (n: TGLsizei; renderbuffers: PGLuint); libdecl; begin end;
  procedure glRenderBufferStorageDummy (target: TGLenum; internalformat: TGLenum; width: TGLsizei; height: TGLsizei); libdecl; begin end;
  procedure glGetRenderBufferParameterivDummy (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  function glIsFrameBufferDummy (framebuffer: TGLuint): Boolean; libdecl; begin Result := False; end;
  procedure glBindFrameBufferDummy (target: TGLenum; framebuffer: TGLuint); libdecl; begin end;
  procedure glDeleteFrameBuffersDummy (n: TGLsizei; const framebuffers: PGLuint); libdecl; begin end;
  procedure glGenFrameBuffersDummy (n: TGLsizei; framebuffers: PGLuint); libdecl; begin end;
  function glCheckFrameBufferStatusDummy (target: TGLenum): TGLenum; libdecl; begin Result := 0; end;
  procedure glFrameBufferTexture1DDummy (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); libdecl; begin end;
  procedure glFrameBufferTexture2DDummy (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint); libdecl; begin end;
  procedure glFrameBufferTexture3DDummy (target: TGLenum; attachment: TGLenum; textarget: TGLenum; texture: TGLuint; level: TGLint; zoffset: TGLint); libdecl; begin end;
  procedure glFrameBufferRenderbufferDummy (target: TGLenum; attachment: TGLenum; renderbuffertarget: TGLenum; renderbuffer: TGLuint); libdecl; begin end;
  procedure glGetFrameBufferAttachmentParameterivDummy (target: TGLenum; attachment: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGenerateMipmapDummy (target: TGLenum); libdecl; begin end;

  procedure glBlendColorDummy(red: GLclampf; green: GLclampf; blue: GLclampf; alpha: GLclampf); libdecl; begin end;
  procedure glBlendEquationDummy(mode: GLenum); libdecl; begin end;
  procedure glDrawRangeElementsDummy(mode: GLenum; start: GLuint; _end: GLuint; count: GLsizei; _type: GLenum; const indices: PGLvoid); libdecl; begin end;
  procedure glTexImage3DDummy(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; _type: GLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glTexSubImage3DDummy(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; _type: GLenum; const pixels: PGLvoid); libdecl; begin end;
  procedure glCopyTexSubImage3DDummy(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); libdecl; begin end;

  procedure glActiveTextureDummy (texture: TGLenum); libdecl; begin end;
  procedure glClientActiveTextureDummy (texture: TGLenum); libdecl; begin end;
  procedure glMultiTexCoord1dDummy (target: TGLenum; s: TGLdouble); libdecl; begin end;
  procedure glMultiTexCoord1dvDummy (target: TGLenum; const v: PGLdouble); libdecl; begin end;
  procedure glMultiTexCoord1fDummy (target: TGLenum; s: TGLfloat); libdecl; begin end;
  procedure glMultiTexCoord1fvDummy (target: TGLenum; const v: PGLfloat); libdecl; begin end;
  procedure glMultiTexCoord1iDummy (target: TGLenum; s: TGLint); libdecl; begin end;
  procedure glMultiTexCoord1ivDummy (target: TGLenum; const v: PGLint); libdecl; begin end;
  procedure glMultiTexCoord1sDummy (target: TGLenum; s: TGLshort); libdecl; begin end;
  procedure glMultiTexCoord1svDummy (target: TGLenum; const v: PGLshort); libdecl; begin end;
  procedure glMultiTexCoord2dDummy (target: glenum; s: gldouble; t: gldouble); libdecl; begin end;
  procedure glMultiTexCoord2dvDummy (target: glenum; const v: PGLdouble); libdecl; begin end;
  procedure glMultiTexCoord2fDummy (target: glenum; s: glfloat; t: glfloat); libdecl; begin end;
  procedure glMultiTexCoord2fvDummy (target: glenum; const v: PGLfloat); libdecl; begin end;
  procedure glMultiTexCoord2iDummy (target: glenum; s: glint; t: glint); libdecl; begin end;
  procedure glMultiTexCoord2ivDummy (target: glenum; const v: PGLint); libdecl; begin end;
  procedure glMultiTexCoord2sDummy (target: glenum; s: glshort; t: glshort); libdecl; begin end;
  procedure glMultiTexCoord2svDummy (target: glenum; const v: PGLshort); libdecl; begin end;
  procedure glMultiTexCoord3dDummy (target: glenum; s: gldouble; t: gldouble; r: gldouble); libdecl; begin end;
  procedure glMultiTexCoord3dvDummy (target: glenum; const v: PGLdouble); libdecl; begin end;
  procedure glMultiTexCoord3fDummy (target: glenum; s: glfloat; t: glfloat; r: glfloat); libdecl; begin end;
  procedure glMultiTexCoord3fvDummy (target: glenum; const v: PGLfloat); libdecl; begin end;
  procedure glMultiTexCoord3iDummy (target: glenum; s: glint; t: glint; r: glint); libdecl; begin end;
  procedure glMultiTexCoord3ivDummy (target: glenum; const v: PGLint); libdecl; begin end;
  procedure glMultiTexCoord3sDummy (target: glenum; s: glshort; t: glshort; r: glshort); libdecl; begin end;
  procedure glMultiTexCoord3svDummy (target: glenum; const v: PGLshort); libdecl; begin end;
  procedure glMultiTexCoord4dDummy (target: glenum; s: gldouble; t: gldouble; r: gldouble; q: gldouble); libdecl; begin end;
  procedure glMultiTexCoord4dvDummy (target: glenum; const v: PGLdouble); libdecl; begin end;
  procedure glMultiTexCoord4fDummy (target: glenum; s: glfloat; t: glfloat; r: glfloat; q: glfloat); libdecl; begin end;
  procedure glMultiTexCoord4fvDummy (target: glenum; const v: PGLfloat); libdecl; begin end;
  procedure glMultiTexCoord4iDummy (target: glenum; s: glint; t: glint; r: glint; q: glint); libdecl; begin end;
  procedure glMultiTexCoord4ivDummy (target: glenum; const v: PGLint); libdecl; begin end;
  procedure glMultiTexCoord4sDummy (target: glenum; s: glshort; t: glshort; r: glshort; q: glshort); libdecl; begin end;
  procedure glMultiTexCoord4svDummy (target: glenum; const v: PGLshort); libdecl; begin end;
  procedure glLoadTransposeMatrixfDummy (const m: PGLfloat); libdecl; begin end;
  procedure glLoadTransposeMatrixdDummy (const m: PGLdouble); libdecl; begin end;
  procedure glMultTransposeMatrixfDummy (const m: PGLfloat); libdecl; begin end;
  procedure glMultTransposeMatrixdDummy (const m: PGLdouble); libdecl; begin end;
  procedure glSampleCoverageDummy (value: glclampf; invert: glboolean); libdecl; begin end;
  procedure glCompressedTexImage3DDummy (target: glenum; level: glint; internalformat: glenum; width: glsizei; height: glsizei; depth: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl; begin end;
  procedure glCompressedTexImage2DDummy (target: glenum; level: glint; internalformat: glenum; width: glsizei; height: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl; begin end;
  procedure glCompressedTexImage1DDummy (target: glenum; level: glint; internalformat: glenum; width: glsizei; border: glint; imageSize: glsizei; const data: PGLvoid); libdecl; begin end;
  procedure glCompressedTexSubImage3DDummy (target: glenum; level: glint; xoffset: glint; yoffset: glint; zoffset: glint; width: glsizei; height: glsizei; depth: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl; begin end;
  procedure glCompressedTexSubImage2DDummy (target: glenum; level: glint; xoffset: glint; yoffset: glint; width: glsizei; height: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl; begin end;
  procedure glCompressedTexSubImage1DDummy (target: glenum; level: glint; xoffset: glint; width: glsizei; format: glenum; imageSize: glsizei; const data: PGLvoid); libdecl; begin end;
  procedure glGetCompressedTexImageDummy (target: TGLenum; level: TGLint; img: PGLvoid); libdecl; begin end;

  procedure glGenQueriesDummy (n: GLsizei; ids: PGLuint); libdecl; begin end;
  procedure glDeleteQueriesDummy (n: GLsizei; const ids: PGLuint); libdecl; begin end;
  function glIsQueryDummy (id: GLuint): boolean; libdecl; begin Result := False; end;
  procedure glBeginQueryDummy (target: GLenum; id: GLuint); libdecl; begin end;
  procedure glEndQueryDummy (target: GLenum); libdecl; begin end;
  procedure glGetQueryivDummy (target, pname: GLenum; params: PGLint); libdecl; begin end;
  procedure glGetQueryObjectivDummy (id: GLuint; pname: GLenum; params: PGLint); libdecl; begin end;
  procedure glGetQueryObjectuivDummy (id: GLuint; pname: GLenum; params: PGLuint); libdecl; begin end;

  procedure glBindBufferDummy (target: TGLenum; buffer: TGLuint); libdecl; begin end;
  procedure glDeleteBuffersDummy (n: TGLsizei; const buffers: PGLuint); libdecl; begin end;
  procedure glGenBuffersDummy (n: TGLsizei; buffers: PGLuint); libdecl; begin end;
  function glIsBufferDummy (buffer: TGLuint): TGLboolean; libdecl; begin Result := False; end;
  procedure glBufferDataDummy (target: TGLenum; size: TGLsizei; const data: PGLvoid; usage: TGLenum); libdecl; begin end;
  procedure glBufferSubDataDummy (target: TGLenum; offset: TGLsizei; size: TGLsizei; const data: PGLvoid); libdecl; begin end;
  procedure glGetBufferSubDataDummy (target: TGLenum; offset: TGLsizei; size: TGLsizei; data: PGLvoid); libdecl; begin end;
  function glMapBufferDummy (target: TGLenum; access: TGLenum): PGLvoid; libdecl; begin Result := nil; end;
  function glUnmapBufferDummy (target: TGLenum): TGLboolean; libdecl; begin Result := False; end;
  procedure glGetBufferParameterivDummy (target: TGLenum; pname: TGLenum; params: PGLint); libdecl; begin end;
  procedure glGetBufferPointervDummy (target: TGLenum; pname: TGLenum; params: PGLvoid); libdecl; begin end;

  procedure glBlendEquationSeparateDummy (modeRGB: GLenum; modeAlpha: GLenum); libdecl; begin end;
  procedure glDrawBuffersDummy (n: GLsizei; const bufs: PGLenum); libdecl; begin end;
  procedure glStencilOpSeparateDummy (face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); libdecl; begin end;
  procedure glStencilFuncSeparateDummy (frontfunc: GLenum; backfunc: GLenum; ref: GLint; mask: GLuint); libdecl; begin end;
  procedure glStencilMaskSeparateDummy (face: GLenum; mask: GLuint); libdecl; begin end;
  procedure glAttachShaderDummy (programObj, shaderObj: GLhandle); libdecl; begin end;
  procedure glBindAttribLocationDummy (programObj: GLhandle; index: GLuint; name: PChar); libdecl; begin end;
  procedure glCompileShaderDummy (shaderObj: GLhandle); libdecl; begin end;
  function glCreateProgramDummy: GLhandle; libdecl; begin Result := 0; end;
  function glCreateShaderDummy (shaderType: GLenum): GLhandle; libdecl; begin Result := 0; end;
  procedure glDeleteProgramDummy (programObj: GLhandle); libdecl; begin end;
  procedure glDeleteShaderDummy (shaderObj: GLhandle); libdecl; begin end;
  procedure glDetachShaderDummy (programObj, shaderObj: GLhandle); libdecl; begin end;
  procedure glDisableVertexAttribArrayDummy (index: GLuint); libdecl; begin end;
  procedure glEnableVertexAttribArrayDummy (index: GLuint); libdecl; begin end;
  procedure glGetActiveAttribDummy (programObj: GLhandle; index: GLuint; maxlength: GLsizei; var length: GLint; var _type: GLenum; name: PChar); libdecl; begin end;
  procedure glGetActiveUniformDummy (programObj: GLhandle; index: GLuint; maxLength: GLsizei; var length: GLsizei; var size: GLint; var _type: GLenum; name: PChar); libdecl; begin end;
  procedure glGetAttachedShadersDummy (programObj: GLhandle; MaxCount: GLsizei; var Count: GLint; shaders: PGLuint); libdecl; begin end;
  function glGetAttribLocationDummy (programObj: GLhandle; char: AnsiString): glint; libdecl; begin Result := 0; end;
  procedure glGetProgramivDummy (programObj: GLhandle; pname: glenum; params: PGLInt); libdecl; begin end;
  procedure glGetProgramInfoLogDummy (programObj: GLHandle; maxLength: glsizei; var length: GLint; infoLog: PChar); libdecl; begin end;
  procedure glGetShaderivDummy (shaderObj: GLhandle; pname: glenum; params: PGLInt); libdecl; begin end;
  procedure glGetShaderInfoLogDummy (shaderObj: GLHandle; maxLength: glsizei; var length: glint; infoLog: PChar); libdecl; begin end;
  procedure glGetShaderSourceDummy (shaderObj: GLhandle; maxlength: GLsizei; var length: GLsizei; source: PChar); libdecl; begin end;
  function glGetUniformLocationDummy (programObj: GLhandle; const char: PChar): glint; libdecl; begin Result := 0; end;
  procedure glGetUniformfvDummy (programObj: GLhandle; location: GLint; params: PGLfloat); libdecl; begin end;
  procedure glGetUniformivDummy (programObj: GLhandle; location: GLint; params: PGLInt); libdecl; begin end;
  procedure glGetVertexAttribfvDummy (index: GLuint; pname: GLenum; params: PGLfloat); libdecl; begin end;
  procedure glGetVertexAttribivDummy (index: GLuint; pname: GLenum; params: PGLint); libdecl; begin end;
  procedure glGetVertexAttribPointervDummy (index: GLuint; pname: GLenum; _pointer: PGLvoid); libdecl; begin end;
  function glIsProgramDummy (programObj: GLhandle) : glboolean; libdecl; begin Result := False; end;
  function glIsShaderDummy (shaderObj: GLhandle) : glboolean; libdecl; begin Result := False; end;
  procedure glLinkProgramDummy (programObj: GLHandle); libdecl; begin end;
  procedure glShaderSourceDummy (shaderObj: GLHandle; count: glsizei; _string: PPGLChar; lengths: pglint); libdecl; begin end;
  procedure glUseProgramDummy (programObj: GLhandle); libdecl; begin end;
  procedure glUniform1fDummy (location: GLint; v0: GLfloat); libdecl; begin end;
  procedure glUniform2fDummy (location: GLint; v0, v1: GLfloat); libdecl; begin end;
  procedure glUniform3fDummy (location: GLint; v0, v1, v2: GLfloat); libdecl; begin end;
  procedure glUniform4fDummy (location: GLint; v0, v1, v2, v3: GLfloat); libdecl; begin end;
  procedure glUniform1iDummy (location: GLint; v0: GLint); libdecl; begin end;
  procedure glUniform2iDummy (location: GLint; v0, v1: GLint); libdecl; begin end;
  procedure glUniform3iDummy (location: GLint; v0, v1, v2: GLint); libdecl; begin end;
  procedure glUniform4iDummy (location: GLint; v0, v1, v2, v3: GLint); libdecl; begin end;
  procedure glUniform1fvDummy (location: GLint; count: GLsizei; value: PGLfloat); libdecl; begin end;
  procedure glUniform2fvDummy (location: GLint; count: GLsizei; value: PGLfloat); libdecl; begin end;
  procedure glUniform3fvDummy (location: GLint; count: GLsizei; value: PGLfloat); libdecl; begin end;
  procedure glUniform4fvDummy (location: GLint; count: GLsizei; value: PGLfloat); libdecl; begin end;
  procedure glUniform1ivDummy (location: GLint; count: GLsizei; value: PGLint); libdecl; begin end;
  procedure glUniform2ivDummy (location: GLint; count: GLsizei; value: PGLint); libdecl; begin end;
  procedure glUniform3ivDummy (location: GLint; count: GLsizei; value: PGLint); libdecl; begin end;
  procedure glUniform4ivDummy (location: GLint; count: GLsizei; value: PGLint); libdecl; begin end;
  procedure glUniformMatrix2fvDummy (location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl; begin end;
  procedure glUniformMatrix3fvDummy (location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl; begin end;
  procedure glUniformMatrix4fvDummy (location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); libdecl; begin end;
  procedure glValidateProgramDummy (programObj: GLhandle); libdecl; begin end;
  procedure glVertexAttrib1dDummy (index: GLuint; x: GLdouble); libdecl; begin end;
  procedure glVertexAttrib1dvDummy (index: GLuint; const v: PGLdouble); libdecl; begin end;
  procedure glVertexAttrib1fDummy (index: GLuint; x: GLfloat); libdecl; begin end;
  procedure glVertexAttrib1fvDummy (index: GLuint; const v: PGLfloat); libdecl; begin end;
  procedure glVertexAttrib1sDummy (index: GLuint; x: GLshort); libdecl; begin end;
  procedure glVertexAttrib1svDummy (index: GLuint; const v: PGLshort); libdecl; begin end;
  procedure glVertexAttrib2dDummy (index: GLuint; x: GLdouble; y: GLdouble); libdecl; begin end;
  procedure glVertexAttrib2dvDummy (index: GLuint; const v: PGLdouble); libdecl; begin end;
  procedure glVertexAttrib2fDummy (index: GLuint; x: GLfloat; y: GLfloat); libdecl; begin end;
  procedure glVertexAttrib2fvDummy (index: GLuint; const v: PGLfloat); libdecl; begin end;
  procedure glVertexAttrib2sDummy (index: GLuint; x: GLshort; y: GLshort); libdecl; begin end;
  procedure glVertexAttrib2svDummy (index: GLuint; const v: PGLshort); libdecl; begin end;
  procedure glVertexAttrib3dDummy (index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); libdecl; begin end;
  procedure glVertexAttrib3dvDummy (index: GLuint; const v: PGLdouble); libdecl; begin end;
  procedure glVertexAttrib3fDummy (index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); libdecl; begin end;
  procedure glVertexAttrib3fvDummy (index: GLuint; const v: PGLfloat); libdecl; begin end;
  procedure glVertexAttrib3sDummy (index: GLuint; x: GLshort; y: GLshort; z: GLshort); libdecl; begin end;
  procedure glVertexAttrib3svDummy (index: GLuint; const v: PGLshort); libdecl; begin end;
  procedure glVertexAttrib4NbvDummy (index: GLuint; const v: PGLbyte); libdecl; begin end;
  procedure glVertexAttrib4NivDummy (index: GLuint; const v: PGLint); libdecl; begin end;
  procedure glVertexAttrib4NsvDummy (index: GLuint; const v: PGLshort); libdecl; begin end;
  procedure glVertexAttrib4NubDummy (index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); libdecl; begin end;
  procedure glVertexAttrib4NubvDummy (index: GLuint; const v: PGLubyte); libdecl; begin end;
  procedure glVertexAttrib4NuivDummy (index: GLuint; const v: PGLuint); libdecl; begin end;
  procedure glVertexAttrib4NusvDummy (index: GLuint; const v: PGLushort); libdecl; begin end;
  procedure glVertexAttrib4bvDummy (index: GLuint; const v: PGLbyte); libdecl; begin end;
  procedure glVertexAttrib4dDummy (index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); libdecl; begin end;
  procedure glVertexAttrib4dvDummy (index: GLuint; const v: PGLdouble); libdecl; begin end;
  procedure glVertexAttrib4fDummy (index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); libdecl; begin end;
  procedure glVertexAttrib4fvDummy (index: GLuint; const v: PGLfloat); libdecl; begin end;
  procedure glVertexAttrib4ivDummy (index: GLuint; const v: PGLint); libdecl; begin end;
  procedure glVertexAttrib4sDummy (index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); libdecl; begin end;
  procedure glVertexAttrib4svDummy (index: GLuint; const v: PGLshort); libdecl; begin end;
  procedure glVertexAttrib4ubvDummy (index: GLuint; const v: PGLubyte); libdecl; begin end;
  procedure glVertexAttrib4uivDummy (index: GLuint; const v: PGLuint); libdecl; begin end;
  procedure glVertexAttrib4usvDummy (index: GLuint; const v: PGLushort); libdecl; begin end;
  procedure glVertexAttribPointerDummy (index: GLuint; size: GLint; _type: GLenum; normalized: GLboolean; stride: GLsizei; const _pointer: PGLvoid); libdecl; begin end;

  procedure glBlendFuncSeparateDummy (sfactorRGB: TGLenum; dfactorRGB: TGLenum; sfactorAlpha: TGLenum; dfactorAlpha: TGLenum); libdecl; begin end;
{$endif}

{$if defined(G2Target_Windows)}
  function wglChoosePixelFormatDummy (hdc: HDC; const piAttribIList: PGLint; const pfAttribFList: PGLfloat; nMaxFormats: TGLuint; piFormats: PGLint; nNumFormats: PGLuint): Boolean; stdcall; begin Result := False; end;
  function wglGetPixelFormatAttribivDummy (hdc: HDC; iPixelFormat: TGLint; iLayerPlane: TGLint; nAttributes: TGLuint; const piAttributes: PGLint; piValues: PGLint): Boolean; stdcall; begin Result := False; end;
  function wglGetPixelFormatAttribfvDummy (hdc: HDC; iPixelFormat: TGLint; iLayerPlane: TGLint; nAttributes: TGLuint; const piAttributes: PGLint; pfValues: PGLfloat): Boolean; stdcall; begin Result := False; end;

  function wglCreatePbufferDummy (hDC: HDC; iPixelFormat: TGLint; iWidth: TGLint; iHeight: TGLint; const piAttribList: PGLint): HPBuffer; stdcall; begin Result := 0; end;
  function wglGetPbufferDCDummy (hPbuffer: HPBuffer): HDC; stdcall; begin Result := 0; end;
  function wglReleasePbufferDCDummy (hPbuffer: HPBuffer; hDC: HDC): TGLint; stdcall; begin Result := 0; end;
  function wglDestroyPbufferDummy (hPbuffer: HPBuffer): Boolean; stdcall; begin Result := False; end;
  function wglQueryPbufferDummy (hPbuffer: HPBuffer; iAttribute: TGLint; piValue: PGLint): Boolean; stdcall; begin Result := False; end;

  function wglBindTexImageDummy (hPbuffer: HPBuffer; iBuffer: TGLint): Boolean; stdcall; begin Result := False; end;
  function wglReleaseTexImageDummy (hPbuffer: HPBuffer; iBuffer: TGLint): Boolean; stdcall; begin Result := False; end;
  function wglSetPbufferAttribDummy (hPbuffer: HPBuffer; const piAttribList: PGLint): Boolean; stdcall; begin Result := False; end;

  function wglSwapIntervalDummy (interval: TGLint): Boolean; stdcall; begin Result := False; end;
  function wglGetSwapIntervalDummy (): TGLint; stdcall; begin Result := 0; end;
{$elseif defined(G2Target_Linux)}
  function glXGetVisualFromFBConfigDummy (dpy: PDisplay; consfig: Integer): PXVisualInfo; cdecl; begin Result := nil; end;
  function glXChooseFBConfigDummy (dpy: PDisplay; screen: Integer; attribList: PInteger; nitems: PInteger): GLXFBConfig; cdecl; begin Result := nil; end;
  function glXCreatePBufferDummy (dpy: PDisplay; config: Integer; attribList: PInteger): GLXPbuffer; cdecl; begin Result := 0; end;
  procedure glXDestroyPBufferDummy (dpy: PDisplay; pbuf: GLXPBuffer); cdecl; begin end;
  function glXGetVisualFromFBConfigSGIXDummy (dpy: PDisplay; consfig: Integer): PXVisualInfo; cdecl; begin Result := nil; end;
  function glXChooseFBConfigSGIXDummy (dpy: PDisplay; screen: Integer; attribList: PInteger; nitems: PInteger): GLXFBConfig; cdecl; begin Result := nil; end;
  function glXCreateGLXPBufferSGIXDummy (dpy: PDisplay; config: Integer; width, height: LongWord; attribList: PInteger): GLXPbuffer; cdecl; begin Result := 0; end;
  procedure glXDestroyGLXPBufferSGIXDummy (dpy: PDisplay; pbuf: GLXPBuffer); cdecl; begin end;
{$endif}
{$Hints on}

function glProc(const Name: AnsiString; const DefProc: Pointer = nil): Pointer;
begin
  {$ifdef G2Target_Windows}
  Result := wglGetProcAddress(PAnsiChar(Name));
  if Result = nil then Result := wglGetProcAddress(PAnsiChar(Name + 'ARB'));
  if Result = nil then Result := wglGetProcAddress(PAnsiChar(Name + 'EXT'));
  if Result = nil then Result := G2DynLibAddress(LibOpenGL, Name);
  if Result = nil then Result := G2DynLibAddress(LibOpenGL, Name + 'ARB');
  if Result = nil then Result := G2DynLibAddress(LibOpenGL, Name + 'EXT');
  {$else}
  Result := G2DynLibAddress(LibOpenGL, Name);
  if Result = nil then Result := G2DynLibAddress(LibOpenGL, Name + 'ARB');
  if Result = nil then Result := G2DynLibAddress(LibOpenGL, Name + 'EXT');
  {$endif}
  if CurCap <> nil then CurCap^ := CurCap^ and (Result <> nil);
  if Result = nil then Result := DefProc;
end;

procedure InitOpenGL;
begin
  if LibOpenGL <> 0 then UnInitOpenGL;
  LibOpenGL := G2DynLibOpen(LibGL);
  {$ifdef G2Target_Linux}
  if LibOpenGL = 0 then LibOpenGL := G2DynLibOpen('libGL.so');
  {$endif}
  {$ifdef GL_STATIC}
  gl_1_1_Cap := True;
  gl_1_3_Cap := True;
  gl_Query_Cap := True;
  gl_VBO_Cap := True;
  gl_PixelFormat_Cap := True;
  gl_PBuffer_Cap := True;
  gl_PBufferSGIX_Cap := True;
  gl_PBufferTex_Cap := True;
  gl_FBO_Cap := True;
  gl_SwapInterval_Cap := True;
  gl_BlendFuncSeparate_Cap := True;
  {$endif}

  {$if defined(G2Target_Windows)}
  CurCap := @gl_PixelFormat_Cap; CurCap^ := True;
  Pointer(wglChoosePixelFormat) := glProc('wglChoosePixelFormat', @wglChoosePixelFormatDummy);
  Pointer(wglGetPixelFormatAttribiv) := glProc('wglGetPixelFormatAttribiv', @wglGetPixelFormatAttribivDummy);
  Pointer(wglGetPixelFormatAttribfv) := glProc('wglGetPixelFormatAttribfv', @wglGetPixelFormatAttribfvDummy);

  CurCap := @gl_PBuffer_Cap; CurCap^ := True;
  Pointer(wglCreatePbuffer) := glProc('wglCreatePbuffer', @wglCreatePbufferDummy);
  Pointer(wglGetPbufferDC) := glProc('wglGetPbufferDC', @wglGetPbufferDCDummy);
  Pointer(wglReleasePbufferDC) := glProc('wglReleasePbufferDC', @wglReleasePbufferDCDummy);
  Pointer(wglDestroyPbuffer) := glProc('wglDestroyPbuffer', @wglDestroyPbufferDummy);
  Pointer(wglQueryPbuffer) := glProc('wglQueryPbuffer', @wglQueryPbufferDummy);

  CurCap := @gl_PBufferTex_Cap; CurCap^ := True;
  Pointer(wglBindTexImage) := glProc('wglBindTexImage', @wglBindTexImageDummy);
  Pointer(wglReleaseTexImage) := glProc('wglReleaseTexImage', @wglReleaseTexImageDummy);
  Pointer(wglSetPbufferAttrib) := glProc('wglSetPbufferAttrib', @wglSetPbufferAttribDummy);

  CurCap := @gl_SwapInterval_Cap; CurCap^ := True;
  Pointer(wglSwapInterval) := glProc('wglSwapInterval', @wglSwapIntervalDummy);
  Pointer(wglGetSwapInterval) := glProc('wglGetSwapInterval', @wglGetSwapIntervalDummy);
  {$elseif defined(G2Target_Linux)}
  CurCap := @gl_PBuffer_Cap; CurCap^ := True;
  Pointer(glXGetVisualFromFBConfig) := glProc('glXGetVisualFromFBConfig', @glXGetVisualFromFBConfigDummy);
  Pointer(glXChooseFBConfig) := glProc('glXChooseFBConfig', @glXChooseFBConfigDummy);
  Pointer(glXCreatePBuffer) := glProc('glXCreatePbuffer', @glXCreatePBufferDummy);
  Pointer(glXDestroyPBuffer) := glProc('glXDestroyPbuffer', @glXDestroyPBufferDummy);

  CurCap := @gl_PBufferSGIX_Cap; CurCap^ := True;
  Pointer(glXGetVisualFromFBConfigSGIX) := glProc('glXGetVisualFromFBConfigSGIX', @glXGetVisualFromFBConfigSGIXDummy);
  Pointer(glXChooseFBConfigSGIX) := glProc('glXChooseFBConfigSGIX', @glXChooseFBConfigSGIXDummy);
  Pointer(glXCreateGLXPBufferSGIX) := glProc('glXCreateGLXPbufferSGIX', @glXCreateGLXPBufferSGIXDummy);
  Pointer(glXDestroyGLXPBufferSGIX) := glProc('glXDestroyGLXPbufferSGIX', @glXDestroyGLXPBufferSGIXDummy);
  {$endif}

  {$ifndef GL_STATIC}
  CurCap := @gl_1_1_Cap; CurCap^ := True;
  Pointer(glAccum) := glProc('glAccum', @glAccumDummy);
  Pointer(glAlphaFunc) := glProc('glAlphaFunc', @glAlphaFuncDummy);
  Pointer(glAreTexturesResident) := glProc('glAreTexturesResident', @glAreTexturesResidentDummy);
  Pointer(glArrayElement) := glProc('glArrayElement', @glArrayElementDummy);
  Pointer(glBegin) := glProc('glBegin', @glBeginDummy);
  Pointer(glBindTexture) := glProc('glBindTexture', @glBindTextureDummy);
  Pointer(glBitmap) := glProc('glBitmap', @glBitmapDummy);
  Pointer(glBlendFunc) := glProc('glBlendFunc', @glBlendFuncDummy);
  Pointer(glCallList) := glProc('glCallList', @glCallListDummy);
  Pointer(glCallLists) := glProc('glCallLists', @glCallListsDummy);
  Pointer(glClear) := glProc('glClear', @glClearDummy);
  Pointer(glClearAccum) := glProc('glClearAccum', @glClearAccumDummy);
  Pointer(glClearColor) := glProc('glClearColor', @glClearColorDummy);
  Pointer(glClearDepth) := glProc('glClearDepth', @glClearDepthDummy);
  Pointer(glClearIndex) := glProc('glClearIndex', @glClearIndexDummy);
  Pointer(glClearStencil) := glProc('glClearStencil', @glClearStencilDummy);
  Pointer(glClipPlane) := glProc('glClipPlane', @glClipPlaneDummy);
  Pointer(glColor3b) := glProc('glColor3b', @glColor3bDummy);
  Pointer(glColor3bv) := glProc('glColor3bv', @glColor3bvDummy);
  Pointer(glColor3d) := glProc('glColor3d', @glColor3dDummy);
  Pointer(glColor3dv) := glProc('glColor3dv', @glColor3dvDummy);
  Pointer(glColor3f) := glProc('glColor3f', @glColor3fDummy);
  Pointer(glColor3fv) := glProc('glColor3fv', @glColor3fvDummy);
  Pointer(glColor3i) := glProc('glColor3i', @glColor3iDummy);
  Pointer(glColor3iv) := glProc('glColor3iv', @glColor3ivDummy);
  Pointer(glColor3s) := glProc('glColor3s', @glColor3sDummy);
  Pointer(glColor3sv) := glProc('glColor3sv', @glColor3svDummy);
  Pointer(glColor3ub) := glProc('glColor3ub', @glColor3ubDummy);
  Pointer(glColor3ubv) := glProc('glColor3ubv', @glColor3ubvDummy);
  Pointer(glColor3ui) := glProc('glColor3ui', @glColor3uiDummy);
  Pointer(glColor3uiv) := glProc('glColor3uiv', @glColor3uivDummy);
  Pointer(glColor3us) := glProc('glColor3us', @glColor3usDummy);
  Pointer(glColor3usv) := glProc('glColor3usv', @glColor3usvDummy);
  Pointer(glColor4b) := glProc('glColor4b', @glColor4bDummy);
  Pointer(glColor4bv) := glProc('glColor4bv', @glColor4bvDummy);
  Pointer(glColor4d) := glProc('glColor4d', @glColor4dDummy);
  Pointer(glColor4dv) := glProc('glColor4dv', @glColor4dvDummy);
  Pointer(glColor4f) := glProc('glColor4f', @glColor4fDummy);
  Pointer(glColor4fv) := glProc('glColor4fv', @glColor4fvDummy);
  Pointer(glColor4i) := glProc('glColor4i', @glColor4iDummy);
  Pointer(glColor4iv) := glProc('glColor4iv', @glColor4ivDummy);
  Pointer(glColor4s) := glProc('glColor4s', @glColor4sDummy);
  Pointer(glColor4sv) := glProc('glColor4sv', @glColor4svDummy);
  Pointer(glColor4ub) := glProc('glColor4ub', @glColor4ubDummy);
  Pointer(glColor4ubv) := glProc('glColor4ubv', @glColor4ubvDummy);
  Pointer(glColor4ui) := glProc('glColor4ui', @glColor4uiDummy);
  Pointer(glColor4uiv) := glProc('glColor4uiv', @glColor4uivDummy);
  Pointer(glColor4us) := glProc('glColor4us', @glColor4usDummy);
  Pointer(glColor4usv) := glProc('glColor4usv', @glColor4usvDummy);
  Pointer(glColorMask) := glProc('glColorMask', @glColorMaskDummy);
  Pointer(glColorMaterial) := glProc('glColorMaterial', @glColorMaterialDummy);
  Pointer(glColorPointer) := glProc('glColorPointer', @glColorPointerDummy);
  Pointer(glCopyPixels) := glProc('glCopyPixels', @glCopyPixelsDummy);
  Pointer(glCopyTexImage1D) := glProc('glCopyTexImage1D', @glCopyTexImage1DDummy);
  Pointer(glCopyTexImage2D) := glProc('glCopyTexImage2D', @glCopyTexImage2DDummy);
  Pointer(glCopyTexSubImage1D) := glProc('glCopyTexSubImage1D', @glCopyTexSubImage1DDummy);
  Pointer(glCopyTexSubImage2D) := glProc('glCopyTexSubImage2D', @glCopyTexSubImage2DDummy);
  Pointer(glCullFace) := glProc('glCullFace', @glCullFaceDummy);
  Pointer(glDeleteLists) := glProc('glDeleteLists', @glDeleteListsDummy);
  Pointer(glDeleteTextures) := glProc('glDeleteTextures', @glDeleteTexturesDummy);
  Pointer(glDepthFunc) := glProc('glDepthFunc', @glDepthFuncDummy);
  Pointer(glDepthMask) := glProc('glDepthMask', @glDepthMaskDummy);
  Pointer(glDepthRange) := glProc('glDepthRange', @glDepthRangeDummy);
  Pointer(glDisable) := glProc('glDisable', @glDisableDummy);
  Pointer(glDisableClientState) := glProc('glDisableClientState', @glDisableClientStateDummy);
  Pointer(glDrawArrays) := glProc('glDrawArrays', @glDrawArraysDummy);
  Pointer(glDrawBuffer) := glProc('glDrawBuffer', @glDrawBufferDummy);
  Pointer(glDrawElements) := glProc('glDrawElements', @glDrawElementsDummy);
  Pointer(glDrawPixels) := glProc('glDrawPixels', @glDrawPixelsDummy);
  Pointer(glEdgeFlag) := glProc('glEdgeFlag', @glEdgeFlagDummy);
  Pointer(glEdgeFlagPointer) := glProc('glEdgeFlagPointer', @glEdgeFlagPointerDummy);
  Pointer(glEdgeFlagv) := glProc('glEdgeFlagv', @glEdgeFlagvDummy);
  Pointer(glEnable) := glProc('glEnable', @glEnableDummy);
  Pointer(glEnableClientState) := glProc('glEnableClientState', @glEnableClientStateDummy);
  Pointer(glEnd) := glProc('glEnd', @glEndDummy);
  Pointer(glEndList) := glProc('glEndList', @glEndListDummy);
  Pointer(glEvalCoord1d) := glProc('glEvalCoord1d', @glEvalCoord1dDummy);
  Pointer(glEvalCoord1dv) := glProc('glEvalCoord1dv', @glEvalCoord1dvDummy);
  Pointer(glEvalCoord1f) := glProc('glEvalCoord1f', @glEvalCoord1fDummy);
  Pointer(glEvalCoord1fv) := glProc('glEvalCoord1fv', @glEvalCoord1fvDummy);
  Pointer(glEvalCoord2d) := glProc('glEvalCoord2d', @glEvalCoord2dDummy);
  Pointer(glEvalCoord2dv) := glProc('glEvalCoord2dv', @glEvalCoord2dvDummy);
  Pointer(glEvalCoord2f) := glProc('glEvalCoord2f', @glEvalCoord2fDummy);
  Pointer(glEvalCoord2fv) := glProc('glEvalCoord2fv', @glEvalCoord2fvDummy);
  Pointer(glEvalMesh1) := glProc('glEvalMesh1', @glEvalMesh1Dummy);
  Pointer(glEvalMesh2) := glProc('glEvalMesh2', @glEvalMesh2Dummy);
  Pointer(glEvalPoint1) := glProc('glEvalPoint1', @glEvalPoint1Dummy);
  Pointer(glEvalPoint2) := glProc('glEvalPoint2', @glEvalPoint2Dummy);
  Pointer(glFeedbackBuffer) := glProc('glFeedbackBuffer', @glFeedbackBufferDummy);
  Pointer(glFinish) := glProc('glFinish', @glFinishDummy);
  Pointer(glFlush) := glProc('glFlush', @glFlushDummy);
  Pointer(glFogf) := glProc('glFogf', @glFogfDummy);
  Pointer(glFogfv) := glProc('glFogfv', @glFogfvDummy);
  Pointer(glFogi) := glProc('glFogi', @glFogiDummy);
  Pointer(glFogiv) := glProc('glFogiv', @glFogivDummy);
  Pointer(glFrontFace) := glProc('glFrontFace', @glFrontFaceDummy);
  Pointer(glFrustum) := glProc('glFrustum', @glFrustumDummy);
  Pointer(glGenLists) := glProc('glGenLists', @glGenListsDummy);
  Pointer(glGenTextures) := glProc('glGenTextures', @glGenTexturesDummy);
  Pointer(glGetBooleanv) := glProc('glGetBooleanv', @glGetBooleanvDummy);
  Pointer(glGetClipPlane) := glProc('glGetClipPlane', @glGetClipPlaneDummy);
  Pointer(glGetDoublev) := glProc('glGetDoublev', @glGetDoublevDummy);
  Pointer(glGetError) := glProc('glGetError', @glGetErrorDummy);
  Pointer(glGetFloatv) := glProc('glGetFloatv', @glGetFloatvDummy);
  Pointer(glGetIntegerv) := glProc('glGetIntegerv', @glGetIntegervDummy);
  Pointer(glGetLightfv) := glProc('glGetLightfv', @glGetLightfvDummy);
  Pointer(glGetLightiv) := glProc('glGetLightiv', @glGetLightivDummy);
  Pointer(glGetMapdv) := glProc('glGetMapdv', @glGetMapdvDummy);
  Pointer(glGetMapfv) := glProc('glGetMapfv', @glGetMapfvDummy);
  Pointer(glGetMapiv) := glProc('glGetMapiv', @glGetMapivDummy);
  Pointer(glGetMaterialfv) := glProc('glGetMaterialfv', @glGetMaterialfvDummy);
  Pointer(glGetMaterialiv) := glProc('glGetMaterialiv', @glGetMaterialivDummy);
  Pointer(glGetPixelMapfv) := glProc('glGetPixelMapfv', @glGetPixelMapfvDummy);
  Pointer(glGetPixelMapuiv) := glProc('glGetPixelMapuiv', @glGetPixelMapuivDummy);
  Pointer(glGetPixelMapusv) := glProc('glGetPixelMapusv', @glGetPixelMapusvDummy);
  Pointer(glGetPointerv) := glProc('glGetPointerv', @glGetPointervDummy);
  Pointer(glGetPolygonStipple) := glProc('glGetPolygonStipple', @glGetPolygonStippleDummy);
  Pointer(glGetString) := glProc('glGetString', @glGetStringDummy);
  Pointer(glGetTexEnvfv) := glProc('glGetTexEnvfv', @glGetTexEnvfvDummy);
  Pointer(glGetTexEnviv) := glProc('glGetTexEnviv', @glGetTexEnvivDummy);
  Pointer(glGetTexGendv) := glProc('glGetTexGendv', @glGetTexGendvDummy);
  Pointer(glGetTexGenfv) := glProc('glGetTexGenfv', @glGetTexGenfvDummy);
  Pointer(glGetTexGeniv) := glProc('glGetTexGeniv', @glGetTexGenivDummy);
  Pointer(glGetTexImage) := glProc('glGetTexImage', @glGetTexImageDummy);
  Pointer(glGetTexLevelParameterfv) := glProc('glGetTexLevelParameterfv', @glGetTexLevelParameterfvDummy);
  Pointer(glGetTexLevelParameteriv) := glProc('glGetTexLevelParameteriv', @glGetTexLevelParameterivDummy);
  Pointer(glGetTexParameterfv) := glProc('glGetTexParameterfv', @glGetTexParameterfvDummy);
  Pointer(glGetTexParameteriv) := glProc('glGetTexParameteriv', @glGetTexParameterivDummy);
  Pointer(glHint) := glProc('glHint', @glHintDummy);
  Pointer(glIndexMask) := glProc('glIndexMask', @glIndexMaskDummy);
  Pointer(glIndexPointer) := glProc('glIndexPointer', @glIndexPointerDummy);
  Pointer(glIndexd) := glProc('glIndexd', @glIndexdDummy);
  Pointer(glIndexdv) := glProc('glIndexdv', @glIndexdvDummy);
  Pointer(glIndexf) := glProc('glIndexf', @glIndexfDummy);
  Pointer(glIndexfv) := glProc('glIndexfv', @glIndexfvDummy);
  Pointer(glIndexi) := glProc('glIndexi', @glIndexiDummy);
  Pointer(glIndexiv) := glProc('glIndexiv', @glIndexivDummy);
  Pointer(glIndexs) := glProc('glIndexs', @glIndexsDummy);
  Pointer(glIndexsv) := glProc('glIndexsv', @glIndexsvDummy);
  Pointer(glIndexub) := glProc('glIndexub', @glIndexubDummy);
  Pointer(glIndexubv) := glProc('glIndexubv', @glIndexubvDummy);
  Pointer(glInitNames) := glProc('glInitNames', @glInitNamesDummy);
  Pointer(glInterleavedArrays) := glProc('glInterleavedArrays', @glInterleavedArraysDummy);
  Pointer(glIsEnabled) := glProc('glIsEnabled', @glIsEnabledDummy);
  Pointer(glIsList) := glProc('glIsList', @glIsListDummy);
  Pointer(glIsTexture) := glProc('glIsTexture', @glIsTextureDummy);
  Pointer(glLightModelf) := glProc('glLightModelf', @glLightModelfDummy);
  Pointer(glLightModelfv) := glProc('glLightModelfv', @glLightModelfvDummy);
  Pointer(glLightModeli) := glProc('glLightModeli', @glLightModeliDummy);
  Pointer(glLightModeliv) := glProc('glLightModeliv', @glLightModelivDummy);
  Pointer(glLightf) := glProc('glLightf', @glLightfDummy);
  Pointer(glLightfv) := glProc('glLightfv', @glLightfvDummy);
  Pointer(glLighti) := glProc('glLighti', @glLightiDummy);
  Pointer(glLightiv) := glProc('glLightiv', @glLightivDummy);
  Pointer(glLineStipple) := glProc('glLineStipple', @glLineStippleDummy);
  Pointer(glLineWidth) := glProc('glLineWidth', @glLineWidthDummy);
  Pointer(glListBase) := glProc('glListBase', @glListBaseDummy);
  Pointer(glLoadIdentity) := glProc('glLoadIdentity', @glLoadIdentityDummy);
  Pointer(glLoadMatrixd) := glProc('glLoadMatrixd', @glLoadMatrixdDummy);
  Pointer(glLoadMatrixf) := glProc('glLoadMatrixf', @glLoadMatrixfDummy);
  Pointer(glLoadName) := glProc('glLoadName', @glLoadNameDummy);
  Pointer(glLogicOp) := glProc('glLogicOp', @glLogicOpDummy);
  Pointer(glMap1d) := glProc('glMap1d', @glMap1dDummy);
  Pointer(glMap1f) := glProc('glMap1f', @glMap1fDummy);
  Pointer(glMap2d) := glProc('glMap2d', @glMap2dDummy);
  Pointer(glMap2f) := glProc('glMap2f', @glMap2fDummy);
  Pointer(glMapGrid1d) := glProc('glMapGrid1d', @glMapGrid1dDummy);
  Pointer(glMapGrid1f) := glProc('glMapGrid1f', @glMapGrid1fDummy);
  Pointer(glMapGrid2d) := glProc('glMapGrid2d', @glMapGrid2dDummy);
  Pointer(glMapGrid2f) := glProc('glMapGrid2f', @glMapGrid2fDummy);
  Pointer(glMaterialf) := glProc('glMaterialf', @glMaterialfDummy);
  Pointer(glMaterialfv) := glProc('glMaterialfv', @glMaterialfvDummy);
  Pointer(glMateriali) := glProc('glMateriali', @glMaterialiDummy);
  Pointer(glMaterialiv) := glProc('glMaterialiv', @glMaterialivDummy);
  Pointer(glMatrixMode) := glProc('glMatrixMode', @glMatrixModeDummy);
  Pointer(glMultMatrixd) := glProc('glMultMatrixd', @glMultMatrixdDummy);
  Pointer(glMultMatrixf) := glProc('glMultMatrixf', @glMultMatrixfDummy);
  Pointer(glNewList) := glProc('glNewList', @glNewListDummy);
  Pointer(glNormal3b) := glProc('glNormal3b', @glNormal3bDummy);
  Pointer(glNormal3bv) := glProc('glNormal3bv', @glNormal3bvDummy);
  Pointer(glNormal3d) := glProc('glNormal3d', @glNormal3dDummy);
  Pointer(glNormal3dv) := glProc('glNormal3dv', @glNormal3dvDummy);
  Pointer(glNormal3f) := glProc('glNormal3f', @glNormal3fDummy);
  Pointer(glNormal3fv) := glProc('glNormal3fv', @glNormal3fvDummy);
  Pointer(glNormal3i) := glProc('glNormal3i', @glNormal3iDummy);
  Pointer(glNormal3iv) := glProc('glNormal3iv', @glNormal3ivDummy);
  Pointer(glNormal3s) := glProc('glNormal3s', @glNormal3sDummy);
  Pointer(glNormal3sv) := glProc('glNormal3sv', @glNormal3svDummy);
  Pointer(glNormalPointer) := glProc('glNormalPointer', @glNormalPointerDummy);
  Pointer(glOrtho) := glProc('glOrtho', @glOrthoDummy);
  Pointer(glPassThrough) := glProc('glPassThrough', @glPassThroughDummy);
  Pointer(glPixelMapfv) := glProc('glPixelMapfv', @glPixelMapfvDummy);
  Pointer(glPixelMapuiv) := glProc('glPixelMapuiv', @glPixelMapuivDummy);
  Pointer(glPixelMapusv) := glProc('glPixelMapusv', @glPixelMapusvDummy);
  Pointer(glPixelStoref) := glProc('glPixelStoref', @glPixelStorefDummy);
  Pointer(glPixelStorei) := glProc('glPixelStorei', @glPixelStoreiDummy);
  Pointer(glPixelTransferf) := glProc('glPixelTransferf', @glPixelTransferfDummy);
  Pointer(glPixelTransferi) := glProc('glPixelTransferi', @glPixelTransferiDummy);
  Pointer(glPixelZoom) := glProc('glPixelZoom', @glPixelZoomDummy);
  Pointer(glPointSize) := glProc('glPointSize', @glPointSizeDummy);
  Pointer(glPolygonMode) := glProc('glPolygonMode', @glPolygonModeDummy);
  Pointer(glPolygonOffset) := glProc('glPolygonOffset', @glPolygonOffsetDummy);
  Pointer(glPolygonStipple) := glProc('glPolygonStipple', @glPolygonStippleDummy);
  Pointer(glPopAttrib) := glProc('glPopAttrib', @glPopAttribDummy);
  Pointer(glPopClientAttrib) := glProc('glPopClientAttrib', @glPopClientAttribDummy);
  Pointer(glPopMatrix) := glProc('glPopMatrix', @glPopMatrixDummy);
  Pointer(glPopName) := glProc('glPopName', @glPopNameDummy);
  Pointer(glPrioritizeTextures) := glProc('glPrioritizeTextures', @glPrioritizeTexturesDummy);
  Pointer(glPushAttrib) := glProc('glPushAttrib', @glPushAttribDummy);
  Pointer(glPushClientAttrib) := glProc('glPushClientAttrib', @glPushClientAttribDummy);
  Pointer(glPushMatrix) := glProc('glPushMatrix', @glPushMatrixDummy);
  Pointer(glPushName) := glProc('glPushName', @glPushNameDummy);
  Pointer(glRasterPos2d) := glProc('glRasterPos2d', @glRasterPos2dDummy);
  Pointer(glRasterPos2dv) := glProc('glRasterPos2dv', @glRasterPos2dvDummy);
  Pointer(glRasterPos2f) := glProc('glRasterPos2f', @glRasterPos2fDummy);
  Pointer(glRasterPos2fv) := glProc('glRasterPos2fv', @glRasterPos2fvDummy);
  Pointer(glRasterPos2i) := glProc('glRasterPos2i', @glRasterPos2iDummy);
  Pointer(glRasterPos2iv) := glProc('glRasterPos2iv', @glRasterPos2ivDummy);
  Pointer(glRasterPos2s) := glProc('glRasterPos2s', @glRasterPos2sDummy);
  Pointer(glRasterPos2sv) := glProc('glRasterPos2sv', @glRasterPos2svDummy);
  Pointer(glRasterPos3d) := glProc('glRasterPos3d', @glRasterPos3dDummy);
  Pointer(glRasterPos3dv) := glProc('glRasterPos3dv', @glRasterPos3dvDummy);
  Pointer(glRasterPos3f) := glProc('glRasterPos3f', @glRasterPos3fDummy);
  Pointer(glRasterPos3fv) := glProc('glRasterPos3fv', @glRasterPos3fvDummy);
  Pointer(glRasterPos3i) := glProc('glRasterPos3i', @glRasterPos3iDummy);
  Pointer(glRasterPos3iv) := glProc('glRasterPos3iv', @glRasterPos3ivDummy);
  Pointer(glRasterPos3s) := glProc('glRasterPos3s', @glRasterPos3sDummy);
  Pointer(glRasterPos3sv) := glProc('glRasterPos3sv', @glRasterPos3svDummy);
  Pointer(glRasterPos4d) := glProc('glRasterPos4d', @glRasterPos4dDummy);
  Pointer(glRasterPos4dv) := glProc('glRasterPos4dv', @glRasterPos4dvDummy);
  Pointer(glRasterPos4f) := glProc('glRasterPos4f', @glRasterPos4fDummy);
  Pointer(glRasterPos4fv) := glProc('glRasterPos4fv', @glRasterPos4fvDummy);
  Pointer(glRasterPos4i) := glProc('glRasterPos4i', @glRasterPos4iDummy);
  Pointer(glRasterPos4iv) := glProc('glRasterPos4iv', @glRasterPos4ivDummy);
  Pointer(glRasterPos4s) := glProc('glRasterPos4s', @glRasterPos4sDummy);
  Pointer(glRasterPos4sv) := glProc('glRasterPos4sv', @glRasterPos4svDummy);
  Pointer(glReadBuffer) := glProc('glReadBuffer', @glReadBufferDummy);
  Pointer(glReadPixels) := glProc('glReadPixels', @glReadPixelsDummy);
  Pointer(glRectd) := glProc('glRectd', @glRectdDummy);
  Pointer(glRectdv) := glProc('glRectdv', @glRectdvDummy);
  Pointer(glRectf) := glProc('glRectf', @glRectfDummy);
  Pointer(glRectfv) := glProc('glRectfv', @glRectfvDummy);
  Pointer(glRecti) := glProc('glRecti', @glRectiDummy);
  Pointer(glRectiv) := glProc('glRectiv', @glRectivDummy);
  Pointer(glRects) := glProc('glRects', @glRectsDummy);
  Pointer(glRectsv) := glProc('glRectsv', @glRectsvDummy);
  Pointer(glRenderMode) := glProc('glRenderMode', @glRenderModeDummy);
  Pointer(glRotated) := glProc('glRotated', @glRotatedDummy);
  Pointer(glRotatef) := glProc('glRotatef', @glRotatefDummy);
  Pointer(glScaled) := glProc('glScaled', @glScaledDummy);
  Pointer(glScalef) := glProc('glScalef', @glScalefDummy);
  Pointer(glScissor) := glProc('glScissor', @glScissorDummy);
  Pointer(glSelectBuffer) := glProc('glSelectBuffer', @glSelectBufferDummy);
  Pointer(glShadeModel) := glProc('glShadeModel', @glShadeModelDummy);
  Pointer(glStencilFunc) := glProc('glStencilFunc', @glStencilFuncDummy);
  Pointer(glStencilMask) := glProc('glStencilMask', @glStencilMaskDummy);
  Pointer(glStencilOp) := glProc('glStencilOp', @glStencilOpDummy);
  Pointer(glTexCoord1d) := glProc('glTexCoord1d', @glTexCoord1dDummy);
  Pointer(glTexCoord1dv) := glProc('glTexCoord1dv', @glTexCoord1dvDummy);
  Pointer(glTexCoord1f) := glProc('glTexCoord1f', @glTexCoord1fDummy);
  Pointer(glTexCoord1fv) := glProc('glTexCoord1fv', @glTexCoord1fvDummy);
  Pointer(glTexCoord1i) := glProc('glTexCoord1i', @glTexCoord1iDummy);
  Pointer(glTexCoord1iv) := glProc('glTexCoord1iv', @glTexCoord1ivDummy);
  Pointer(glTexCoord1s) := glProc('glTexCoord1s', @glTexCoord1sDummy);
  Pointer(glTexCoord1sv) := glProc('glTexCoord1sv', @glTexCoord1svDummy);
  Pointer(glTexCoord2d) := glProc('glTexCoord2d', @glTexCoord2dDummy);
  Pointer(glTexCoord2dv) := glProc('glTexCoord2dv', @glTexCoord2dvDummy);
  Pointer(glTexCoord2f) := glProc('glTexCoord2f', @glTexCoord2fDummy);
  Pointer(glTexCoord2fv) := glProc('glTexCoord2fv', @glTexCoord2fvDummy);
  Pointer(glTexCoord2i) := glProc('glTexCoord2i', @glTexCoord2iDummy);
  Pointer(glTexCoord2iv) := glProc('glTexCoord2iv', @glTexCoord2ivDummy);
  Pointer(glTexCoord2s) := glProc('glTexCoord2s', @glTexCoord2sDummy);
  Pointer(glTexCoord2sv) := glProc('glTexCoord2sv', @glTexCoord2svDummy);
  Pointer(glTexCoord3d) := glProc('glTexCoord3d', @glTexCoord3dDummy);
  Pointer(glTexCoord3dv) := glProc('glTexCoord3dv', @glTexCoord3dvDummy);
  Pointer(glTexCoord3f) := glProc('glTexCoord3f', @glTexCoord3fDummy);
  Pointer(glTexCoord3fv) := glProc('glTexCoord3fv', @glTexCoord3fvDummy);
  Pointer(glTexCoord3i) := glProc('glTexCoord3i', @glTexCoord3iDummy);
  Pointer(glTexCoord3iv) := glProc('glTexCoord3iv', @glTexCoord3ivDummy);
  Pointer(glTexCoord3s) := glProc('glTexCoord3s', @glTexCoord3sDummy);
  Pointer(glTexCoord3sv) := glProc('glTexCoord3sv', @glTexCoord3svDummy);
  Pointer(glTexCoord4d) := glProc('glTexCoord4d', @glTexCoord4dDummy);
  Pointer(glTexCoord4dv) := glProc('glTexCoord4dv', @glTexCoord4dvDummy);
  Pointer(glTexCoord4f) := glProc('glTexCoord4f', @glTexCoord4fDummy);
  Pointer(glTexCoord4fv) := glProc('glTexCoord4fv', @glTexCoord4fvDummy);
  Pointer(glTexCoord4i) := glProc('glTexCoord4i', @glTexCoord4iDummy);
  Pointer(glTexCoord4iv) := glProc('glTexCoord4iv', @glTexCoord4ivDummy);
  Pointer(glTexCoord4s) := glProc('glTexCoord4s', @glTexCoord4sDummy);
  Pointer(glTexCoord4sv) := glProc('glTexCoord4sv', @glTexCoord4svDummy);
  Pointer(glTexCoordPointer) := glProc('glTexCoordPointer', @glTexCoordPointerDummy);
  Pointer(glTexEnvf) := glProc('glTexEnvf', @glTexEnvfDummy);
  Pointer(glTexEnvfv) := glProc('glTexEnvfv', @glTexEnvfvDummy);
  Pointer(glTexEnvi) := glProc('glTexEnvi', @glTexEnviDummy);
  Pointer(glTexEnviv) := glProc('glTexEnviv', @glTexEnvivDummy);
  Pointer(glTexGend) := glProc('glTexGend', @glTexGendDummy);
  Pointer(glTexGendv) := glProc('glTexGendv', @glTexGendvDummy);
  Pointer(glTexGenf) := glProc('glTexGenf', @glTexGenfDummy);
  Pointer(glTexGenfv) := glProc('glTexGenfv', @glTexGenfvDummy);
  Pointer(glTexGeni) := glProc('glTexGeni', @glTexGeniDummy);
  Pointer(glTexGeniv) := glProc('glTexGeniv', @glTexGenivDummy);
  Pointer(glTexImage1D) := glProc('glTexImage1D', @glTexImage1DDummy);
  Pointer(glTexImage2D) := glProc('glTexImage2D', @glTexImage2DDummy);
  Pointer(glTexParameterf) := glProc('glTexParameterf', @glTexParameterfDummy);
  Pointer(glTexParameterfv) := glProc('glTexParameterfv', @glTexParameterfvDummy);
  Pointer(glTexParameteri) := glProc('glTexParameteri', @glTexParameteriDummy);
  Pointer(glTexParameteriv) := glProc('glTexParameteriv', @glTexParameterivDummy);
  Pointer(glTexSubImage1D) := glProc('glTexSubImage1D', @glTexSubImage1DDummy);
  Pointer(glTexSubImage2D) := glProc('glTexSubImage2D', @glTexSubImage2DDummy);
  Pointer(glTranslated) := glProc('glTranslated', @glTranslatedDummy);
  Pointer(glTranslatef) := glProc('glTranslatef', @glTranslatefDummy);
  Pointer(glVertex2d) := glProc('glVertex2d', @glVertex2dDummy);
  Pointer(glVertex2dv) := glProc('glVertex2dv', @glVertex2dvDummy);
  Pointer(glVertex2f) := glProc('glVertex2f', @glVertex2fDummy);
  Pointer(glVertex2fv) := glProc('glVertex2fv', @glVertex2fvDummy);
  Pointer(glVertex2i) := glProc('glVertex2i', @glVertex2iDummy);
  Pointer(glVertex2iv) := glProc('glVertex2iv', @glVertex2ivDummy);
  Pointer(glVertex2s) := glProc('glVertex2s', @glVertex2sDummy);
  Pointer(glVertex2sv) := glProc('glVertex2sv', @glVertex2svDummy);
  Pointer(glVertex3d) := glProc('glVertex3d', @glVertex3dDummy);
  Pointer(glVertex3dv) := glProc('glVertex3dv', @glVertex3dvDummy);
  Pointer(glVertex3f) := glProc('glVertex3f', @glVertex3fDummy);
  Pointer(glVertex3fv) := glProc('glVertex3fv', @glVertex3fvDummy);
  Pointer(glVertex3i) := glProc('glVertex3i', @glVertex3iDummy);
  Pointer(glVertex3iv) := glProc('glVertex3iv', @glVertex3ivDummy);
  Pointer(glVertex3s) := glProc('glVertex3s', @glVertex3sDummy);
  Pointer(glVertex3sv) := glProc('glVertex3sv', @glVertex3svDummy);
  Pointer(glVertex4d) := glProc('glVertex4d', @glVertex4dDummy);
  Pointer(glVertex4dv) := glProc('glVertex4dv', @glVertex4dvDummy);
  Pointer(glVertex4f) := glProc('glVertex4f', @glVertex4fDummy);
  Pointer(glVertex4fv) := glProc('glVertex4fv', @glVertex4fvDummy);
  Pointer(glVertex4i) := glProc('glVertex4i', @glVertex4iDummy);
  Pointer(glVertex4iv) := glProc('glVertex4iv', @glVertex4ivDummy);
  Pointer(glVertex4s) := glProc('glVertex4s', @glVertex4sDummy);
  Pointer(glVertex4sv) := glProc('glVertex4sv', @glVertex4svDummy);
  Pointer(glVertexPointer) := glProc('glVertexPointer', @glVertexPointerDummy);
  Pointer(glViewport) := glProc('glViewport', @glViewportDummy);

  CurCap := @gl_FBO_Cap; CurCap^ := True;
  Pointer(glIsRenderBuffer) := glProc('glIsRenderbuffer', @glIsRenderBufferDummy);
  Pointer(glBindRenderBuffer) := glProc('glBindRenderbuffer', @glBindRenderBufferDummy);
  Pointer(glDeleteRenderBuffers) := glProc('glDeleteRenderbuffers', @glDeleteRenderBuffersDummy);
  Pointer(glGenRenderBuffers) := glProc('glGenRenderbuffers', @glGenRenderBuffersDummy);
  Pointer(glRenderBufferStorage) := glProc('glRenderbufferStorage', @glRenderBufferStorageDummy);
  Pointer(glGetRenderBufferParameteriv) := glProc('glGetRenderbufferParameteriv', @glGetRenderBufferParameterivDummy);
  Pointer(glIsFrameBuffer) := glProc('glIsFramebuffer', @glIsFrameBufferDummy);
  Pointer(glBindFrameBuffer) := glProc('glBindFramebuffer', @glBindFrameBufferDummy);
  Pointer(glDeleteFrameBuffers) := glProc('glDeleteFramebuffers', @glDeleteFrameBuffersDummy);
  Pointer(glGenFrameBuffers) := glProc('glGenFramebuffers', @glGenFrameBuffersDummy);
  Pointer(glCheckFrameBufferStatus) := glProc('glCheckFramebufferStatus', @glCheckFrameBufferStatusDummy);
  Pointer(glFrameBufferTexture1D) := glProc('glFramebufferTexture1D', @glFrameBufferTexture1DDummy);
  Pointer(glFrameBufferTexture2D) := glProc('glFramebufferTexture2D', @glFrameBufferTexture2DDummy);
  Pointer(glFrameBufferTexture3D) := glProc('glFramebufferTexture3D', @glFrameBufferTexture3DDummy);
  Pointer(glFrameBufferRenderbuffer) := glProc('glFramebufferRenderbuffer', @glFrameBufferRenderbufferDummy);
  Pointer(glGetFrameBufferAttachmentParameteriv) := glProc('glGetFramebufferAttachmentParameteriv', @glGetFrameBufferAttachmentParameterivDummy);
  Pointer(glGenerateMipmap) := glProc('glGenerateMipmap', @glGenerateMipmapDummy);

  CurCap := @gl_1_2_Cap; CurCap^ := True;
  Pointer(glBlendColor) := glProc('glBlendColor', @glBlendColorDummy);
  Pointer(glBlendEquation) := glProc('glBlendEquation', @glBlendEquationDummy);
  Pointer(glDrawRangeElements) := glProc('glDrawRangeElements', @glDrawRangeElementsDummy);
  Pointer(glTexImage3D) := glProc('glTexImage3D', @glTexImage3DDummy);
  Pointer(glTexSubImage3D) := glProc('glTexSubImage3D', @glTexSubImage3DDummy);
  Pointer(glCopyTexSubImage3D) := glProc('glCopyTexSubImage3D', @glCopyTexSubImage3DDummy);

  CurCap := @gl_1_3_Cap; CurCap^ := True;
  Pointer(glActiveTexture) := glProc('glActiveTexture', @glActiveTextureDummy);
  Pointer(glClientActiveTexture) := glProc('glClientActiveTexture', @glClientActiveTextureDummy);
  Pointer(glMultiTexCoord1d) := glProc('glMultiTexCoord1d', @glMultiTexCoord1dDummy);
  Pointer(glMultiTexCoord1dv) := glProc('glMultiTexCoord1dv', @glMultiTexCoord1dvDummy);
  Pointer(glMultiTexCoord1f) := glProc('glMultiTexCoord1f', @glMultiTexCoord1fDummy);
  Pointer(glMultiTexCoord1fv) := glProc('glMultiTexCoord1fv', @glMultiTexCoord1fvDummy);
  Pointer(glMultiTexCoord1i) := glProc('glMultiTexCoord1i', @glMultiTexCoord1iDummy);
  Pointer(glMultiTexCoord1iv) := glProc('glMultiTexCoord1iv', @glMultiTexCoord1ivDummy);
  Pointer(glMultiTexCoord1s) := glProc('glMultiTexCoord1s', @glMultiTexCoord1sDummy);
  Pointer(glMultiTexCoord1sv) := glProc('glMultiTexCoord1sv', @glMultiTexCoord1svDummy);
  Pointer(glMultiTexCoord2d) := glProc('glMultiTexCoord2d', @glMultiTexCoord2dDummy);
  Pointer(glMultiTexCoord2dv) := glProc('glMultiTexCoord2dv', @glMultiTexCoord2dvDummy);
  Pointer(glMultiTexCoord2f) := glProc('glMultiTexCoord2f', @glMultiTexCoord2fDummy);
  Pointer(glMultiTexCoord2fv) := glProc('glMultiTexCoord2fv', @glMultiTexCoord2fvDummy);
  Pointer(glMultiTexCoord2i) := glProc('glMultiTexCoord2i', @glMultiTexCoord2iDummy);
  Pointer(glMultiTexCoord2iv) := glProc('glMultiTexCoord2iv', @glMultiTexCoord2ivDummy);
  Pointer(glMultiTexCoord2s) := glProc('glMultiTexCoord2s', @glMultiTexCoord2sDummy);
  Pointer(glMultiTexCoord2sv) := glProc('glMultiTexCoord2sv', @glMultiTexCoord2svDummy);
  Pointer(glMultiTexCoord3d) := glProc('glMultiTexCoord3d', @glMultiTexCoord3dDummy);
  Pointer(glMultiTexCoord3dv) := glProc('glMultiTexCoord3dv', @glMultiTexCoord3dvDummy);
  Pointer(glMultiTexCoord3f) := glProc('glMultiTexCoord3f', @glMultiTexCoord3fDummy);
  Pointer(glMultiTexCoord3fv) := glProc('glMultiTexCoord3fv', @glMultiTexCoord3fvDummy);
  Pointer(glMultiTexCoord3i) := glProc('glMultiTexCoord3i', @glMultiTexCoord3iDummy);
  Pointer(glMultiTexCoord3iv) := glProc('glMultiTexCoord3iv', @glMultiTexCoord3ivDummy);
  Pointer(glMultiTexCoord3s) := glProc('glMultiTexCoord3s', @glMultiTexCoord3sDummy);
  Pointer(glMultiTexCoord3sv) := glProc('glMultiTexCoord3sv', @glMultiTexCoord3svDummy);
  Pointer(glMultiTexCoord4d) := glProc('glMultiTexCoord4d', @glMultiTexCoord4dDummy);
  Pointer(glMultiTexCoord4dv) := glProc('glMultiTexCoord4dv', @glMultiTexCoord4dvDummy);
  Pointer(glMultiTexCoord4f) := glProc('glMultiTexCoord4f', @glMultiTexCoord4fDummy);
  Pointer(glMultiTexCoord4fv) := glProc('glMultiTexCoord4fv', @glMultiTexCoord4fvDummy);
  Pointer(glMultiTexCoord4i) := glProc('glMultiTexCoord4i', @glMultiTexCoord4iDummy);
  Pointer(glMultiTexCoord4iv) := glProc('glMultiTexCoord4iv', @glMultiTexCoord4ivDummy);
  Pointer(glMultiTexCoord4s) := glProc('glMultiTexCoord4s', @glMultiTexCoord4sDummy);
  Pointer(glMultiTexCoord4sv) := glProc('glMultiTexCoord4sv', @glMultiTexCoord4svDummy);
  Pointer(glLoadTransposeMatrixf) := glProc('glLoadTransposeMatrixf', @glLoadTransposeMatrixfDummy);
  Pointer(glLoadTransposeMatrixd) := glProc('glLoadTransposeMatrixd', @glLoadTransposeMatrixdDummy);
  Pointer(glMultTransposeMatrixf) := glProc('glMultTransposeMatrixf', @glMultTransposeMatrixfDummy);
  Pointer(glMultTransposeMatrixd) := glProc('glMultTransposeMatrixd', @glMultTransposeMatrixdDummy);
  Pointer(glSampleCoverage) := glProc('glSampleCoverage', @glSampleCoverageDummy);
  Pointer(glCompressedTexImage3D) := glProc('glCompressedTexImage3D', @glCompressedTexImage3DDummy);
  Pointer(glCompressedTexImage2D) := glProc('glCompressedTexImage2D', @glCompressedTexImage2DDummy);
  Pointer(glCompressedTexImage1D) := glProc('glCompressedTexImage1D', @glCompressedTexImage1DDummy);
  Pointer(glCompressedTexSubImage3D) := glProc('glCompressedTexSubImage3D', @glCompressedTexSubImage3DDummy);
  Pointer(glCompressedTexSubImage2D) := glProc('glCompressedTexSubImage2D', @glCompressedTexSubImage2DDummy);
  Pointer(glCompressedTexSubImage1D) := glProc('glCompressedTexSubImage1D', @glCompressedTexSubImage1DDummy);
  Pointer(glGetCompressedTexImage) := glProc('glGetCompressedTexImage', @glGetCompressedTexImageDummy);

  CurCap := @gl_Query_Cap; CurCap^ := True;
  Pointer(glGenQueries) := glProc('glGenQueries', @glGenQueriesDummy);
  Pointer(glDeleteQueries) := glProc('glDeleteQueries', @glDeleteQueriesDummy);
  Pointer(glIsQuery) := glProc('glIsQuery', @glIsQueryDummy);
  Pointer(glBeginQuery) := glProc('glBeginQuery', @glBeginQueryDummy);
  Pointer(glEndQuery) := glProc('glEndQuery', @glEndQueryDummy);
  Pointer(glGetQueryiv) := glProc('glGetQueryiv', @glGetQueryivDummy);
  Pointer(glGetQueryObjectiv) := glProc('glGetQueryObjectiv', @glGetQueryObjectivDummy);
  Pointer(glGetQueryObjectuiv) := glProc('glGetQueryObjectuiv', @glGetQueryObjectuivDummy);

  CurCap := @gl_VBO_Cap; CurCap^ := True;
  Pointer(glBindBuffer) := glProc('glBindBuffer', @glBindBufferDummy);
  Pointer(glDeleteBuffers) := glProc('glDeleteBuffers', @glDeleteBuffersDummy);
  Pointer(glGenBuffers) := glProc('glGenBuffers', @glGenBuffersDummy);
  Pointer(glIsBuffer) := glProc('glIsBuffer', @glIsBufferDummy);
  Pointer(glBufferData) := glProc('glBufferData', @glBufferDataDummy);
  Pointer(glBufferSubData) := glProc('glBufferSubData', @glBufferSubDataDummy);
  Pointer(glGetBufferSubData) := glProc('glGetBufferSubData', @glGetBufferSubDataDummy);
  Pointer(glMapBuffer) := glProc('glMapBuffer', @glMapBufferDummy);
  Pointer(glUnmapBuffer) := glProc('glUnmapBuffer', @glUnmapBufferDummy);
  Pointer(glGetBufferParameteriv) := glProc('glGetBufferParameteriv', @glGetBufferParameterivDummy);
  Pointer(glGetBufferPointerv) := glProc('glGetBufferPointerv', @glGetBufferPointervDummy);

  CurCap := @gl_2_0_Cap; CurCap^ := True;
  Pointer(glBlendEquationSeparate) := glProc('glBlendEquationSeparate', @glBlendEquationSeparateDummy);
  Pointer(glDrawBuffers) := glProc('glDrawBuffers', @glDrawBuffersDummy);
  Pointer(glStencilOpSeparate) := glProc('glStencilOpSeparate', @glStencilOpSeparateDummy);
  Pointer(glStencilFuncSeparate) := glProc('glStencilFuncSeparate', @glStencilFuncSeparateDummy);
  Pointer(glStencilMaskSeparate) := glProc('glStencilMaskSeparate', @glStencilMaskSeparateDummy);
  Pointer(glAttachShader) := glProc('glAttachShader', @glAttachShaderDummy);
  Pointer(glBindAttribLocation) := glProc('glBindAttribLocation', @glBindAttribLocationDummy);
  Pointer(glCompileShader) := glProc('glCompileShader', @glCompileShaderDummy);
  Pointer(glCreateProgram) := glProc('glCreateProgram', @glCreateProgramDummy);
  Pointer(glCreateShader) := glProc('glCreateShader', @glCreateShaderDummy);
  Pointer(glDeleteProgram) := glProc('glDeleteProgram', @glDeleteProgramDummy);
  Pointer(glDeleteShader) := glProc('glDeleteShader', @glDeleteShaderDummy);
  Pointer(glDetachShader) := glProc('glDetachShader', @glDetachShaderDummy);
  Pointer(glDisableVertexAttribArray) := glProc('glDisableVertexAttribArray', @glDisableVertexAttribArrayDummy);
  Pointer(glEnableVertexAttribArray) := glProc('glEnableVertexAttribArray', @glEnableVertexAttribArrayDummy);
  Pointer(glGetActiveAttrib) := glProc('glGetActiveAttrib', @glGetActiveAttribDummy);
  Pointer(glGetActiveUniform) := glProc('glGetActiveUniform', @glGetActiveUniformDummy);
  Pointer(glGetAttachedShaders) := glProc('glGetAttachedShaders', @glGetAttachedShadersDummy);
  Pointer(glGetAttribLocation) := glProc('glGetAttribLocation', @glGetAttribLocationDummy);
  Pointer(glGetProgramiv) := glProc('glGetProgramiv', @glGetProgramivDummy);
  Pointer(glGetProgramInfoLog) := glProc('glGetProgramInfoLog', @glGetProgramInfoLogDummy);
  Pointer(glGetShaderiv) := glProc('glGetShaderiv', @glGetShaderivDummy);
  Pointer(glGetShaderInfoLog) := glProc('glGetShaderInfoLog', @glGetShaderInfoLogDummy);
  Pointer(glGetShaderSource) := glProc('glGetShaderSource', @glGetShaderSourceDummy);
  Pointer(glGetUniformLocation) := glProc('glGetUniformLocation', @glGetUniformLocationDummy);
  Pointer(glGetUniformfv) := glProc('glGetUniformfv', @glGetUniformfvDummy);
  Pointer(glGetUniformiv) := glProc('glGetUniformiv', @glGetUniformivDummy);
  Pointer(glGetVertexAttribfv) := glProc('glGetVertexAttribfv', @glGetVertexAttribfvDummy);
  Pointer(glGetVertexAttribiv) := glProc('glGetVertexAttribiv', @glGetVertexAttribivDummy);
  Pointer(glGetVertexAttribPointerv) := glProc('glGetVertexAttribPointerv', @glGetVertexAttribPointervDummy);
  Pointer(glIsProgram) := glProc('glIsProgram', @glIsProgramDummy);
  Pointer(glIsShader) := glProc('glIsShader', @glIsShaderDummy);
  Pointer(glLinkProgram) := glProc('glLinkProgram', @glLinkProgramDummy);
  Pointer(glShaderSource) := glProc('glShaderSource', @glShaderSourceDummy);
  Pointer(glUseProgram) := glProc('glUseProgram', @glUseProgramDummy);
  Pointer(glUniform1f) := glProc('glUniform1f', @glUniform1fDummy);
  Pointer(glUniform2f) := glProc('glUniform2f', @glUniform2fDummy);
  Pointer(glUniform3f) := glProc('glUniform3f', @glUniform3fDummy);
  Pointer(glUniform4f) := glProc('glUniform4f', @glUniform4fDummy);
  Pointer(glUniform1i) := glProc('glUniform1i', @glUniform1iDummy);
  Pointer(glUniform2i) := glProc('glUniform2i', @glUniform2iDummy);
  Pointer(glUniform3i) := glProc('glUniform3i', @glUniform3iDummy);
  Pointer(glUniform4i) := glProc('glUniform4i', @glUniform4iDummy);
  Pointer(glUniform1fv) := glProc('glUniform1fv', @glUniform1fvDummy);
  Pointer(glUniform2fv) := glProc('glUniform2fv', @glUniform2fvDummy);
  Pointer(glUniform3fv) := glProc('glUniform3fv', @glUniform3fvDummy);
  Pointer(glUniform4fv) := glProc('glUniform4fv', @glUniform4fvDummy);
  Pointer(glUniform1iv) := glProc('glUniform1iv', @glUniform1ivDummy);
  Pointer(glUniform2iv) := glProc('glUniform2iv', @glUniform2ivDummy);
  Pointer(glUniform3iv) := glProc('glUniform3iv', @glUniform3ivDummy);
  Pointer(glUniform4iv) := glProc('glUniform4iv', @glUniform4ivDummy);
  Pointer(glUniformMatrix2fv) := glProc('glUniformMatrix2fv', @glUniformMatrix2fvDummy);
  Pointer(glUniformMatrix3fv) := glProc('glUniformMatrix3fv', @glUniformMatrix3fvDummy);
  Pointer(glUniformMatrix4fv) := glProc('glUniformMatrix4fv', @glUniformMatrix4fvDummy);
  Pointer(glValidateProgram) := glProc('glValidateProgram', @glValidateProgramDummy);
  Pointer(glVertexAttrib1d) := glProc('glVertexAttrib1d', @glVertexAttrib1dDummy);
  Pointer(glVertexAttrib1dv) := glProc('glVertexAttrib1dv', @glVertexAttrib1dvDummy);
  Pointer(glVertexAttrib1f) := glProc('glVertexAttrib1f', @glVertexAttrib1fDummy);
  Pointer(glVertexAttrib1fv) := glProc('glVertexAttrib1fv', @glVertexAttrib1fvDummy);
  Pointer(glVertexAttrib1s) := glProc('glVertexAttrib1s', @glVertexAttrib1sDummy);
  Pointer(glVertexAttrib1sv) := glProc('glVertexAttrib1sv', @glVertexAttrib1svDummy);
  Pointer(glVertexAttrib2d) := glProc('glVertexAttrib2d', @glVertexAttrib2dDummy);
  Pointer(glVertexAttrib2dv) := glProc('glVertexAttrib2dv', @glVertexAttrib2dvDummy);
  Pointer(glVertexAttrib2f) := glProc('glVertexAttrib2f', @glVertexAttrib2fDummy);
  Pointer(glVertexAttrib2fv) := glProc('glVertexAttrib2fv', @glVertexAttrib2fvDummy);
  Pointer(glVertexAttrib2s) := glProc('glVertexAttrib2s', @glVertexAttrib2sDummy);
  Pointer(glVertexAttrib2sv) := glProc('glVertexAttrib2sv', @glVertexAttrib2svDummy);
  Pointer(glVertexAttrib3d) := glProc('glVertexAttrib3d', @glVertexAttrib3dDummy);
  Pointer(glVertexAttrib3dv) := glProc('glVertexAttrib3dv', @glVertexAttrib3dvDummy);
  Pointer(glVertexAttrib3f) := glProc('glVertexAttrib3f', @glVertexAttrib3fDummy);
  Pointer(glVertexAttrib3fv) := glProc('glVertexAttrib3fv', @glVertexAttrib3fvDummy);
  Pointer(glVertexAttrib3s) := glProc('glVertexAttrib3s', @glVertexAttrib3sDummy);
  Pointer(glVertexAttrib3sv) := glProc('glVertexAttrib3sv', @glVertexAttrib3svDummy);
  Pointer(glVertexAttrib4Nbv) := glProc('glVertexAttrib4Nbv', @glVertexAttrib4NbvDummy);
  Pointer(glVertexAttrib4Niv) := glProc('glVertexAttrib4Niv', @glVertexAttrib4NivDummy);
  Pointer(glVertexAttrib4Nsv) := glProc('glVertexAttrib4Nsv', @glVertexAttrib4NsvDummy);
  Pointer(glVertexAttrib4Nub) := glProc('glVertexAttrib4Nub', @glVertexAttrib4NubDummy);
  Pointer(glVertexAttrib4Nubv) := glProc('glVertexAttrib4Nubv', @glVertexAttrib4NubvDummy);
  Pointer(glVertexAttrib4Nuiv) := glProc('glVertexAttrib4Nuiv', @glVertexAttrib4NuivDummy);
  Pointer(glVertexAttrib4Nusv) := glProc('glVertexAttrib4Nusv', @glVertexAttrib4NusvDummy);
  Pointer(glVertexAttrib4bv) := glProc('glVertexAttrib4bv', @glVertexAttrib4bvDummy);
  Pointer(glVertexAttrib4d) := glProc('glVertexAttrib4d', @glVertexAttrib4dDummy);
  Pointer(glVertexAttrib4dv) := glProc('glVertexAttrib4dv', @glVertexAttrib4dvDummy);
  Pointer(glVertexAttrib4f) := glProc('glVertexAttrib4f', @glVertexAttrib4fDummy);
  Pointer(glVertexAttrib4fv) := glProc('glVertexAttrib4fv', @glVertexAttrib4fvDummy);
  Pointer(glVertexAttrib4iv) := glProc('glVertexAttrib4iv', @glVertexAttrib4ivDummy);
  Pointer(glVertexAttrib4s) := glProc('glVertexAttrib4s', @glVertexAttrib4sDummy);
  Pointer(glVertexAttrib4sv) := glProc('glVertexAttrib4sv', @glVertexAttrib4svDummy);
  Pointer(glVertexAttrib4ubv) := glProc('glVertexAttrib4ubv', @glVertexAttrib4ubvDummy);
  Pointer(glVertexAttrib4uiv) := glProc('glVertexAttrib4uiv', @glVertexAttrib4uivDummy);
  Pointer(glVertexAttrib4usv) := glProc('glVertexAttrib4usv', @glVertexAttrib4usvDummy);
  Pointer(glVertexAttribPointer) := glProc('glVertexAttribPointer', @glVertexAttribPointerDummy);

  CurCap := @gl_BlendFuncSeparate_Cap; CurCap^ := True;
  Pointer(glBlendFuncSeparate) := glProc('glBlendFuncSeparateEXT', @glBlendFuncSeparateDummy);
  {$endif}
end;

procedure UnInitOpenGL;
begin
  if LibOpenGL <> 0 then
  G2DynLibClose(LibOpenGL);
end;

initialization
begin
  {$ifndef FPC}
  Set8087CW($133F);
  {$endif}
  {$if defined(cpui386) or defined(cpux86_64)}
  SetExceptionMask([exInvalidOp, exDenormalized, exZeroDivide,exOverflow, exUnderflow, exPrecision]);
  {$endif}
  InitOpenGL;
end;

finalization
begin
  UnInitOpenGL;
end;

end.
